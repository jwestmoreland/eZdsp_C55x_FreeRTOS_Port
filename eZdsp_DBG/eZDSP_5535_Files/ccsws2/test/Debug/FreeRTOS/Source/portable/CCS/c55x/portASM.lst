TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    1

    1188              ; Temporary Registers Used: None
       1              ; .cdecls C, LIST, "FreeRTOSConfig.h"
       2              ;  .include "FreeRTOSConfig.h"
       3              ; 32-bit stack slow mode
       4                      .mmregs
       5                       .C54CM_off
       6              ;     .CPL_off
       7                    .ARMS_off
       8                       .align 4
       9              ;       .c28_amode
      10              
      11                           .global _usCriticalNesting
      12                           .global _save_xsp
      13                           .global _save_xssp
      14                           .global _first_save_xsp
      15                           .global _first_save_xssp
      16                           .global _first_flag
      17                           .global _save_xar7
      18                           .global _tZero
      19                           .global _save_xar6
      20                           .global _pxCurrentTCB                              ;; our currently exectuting TCB
      21                           .global _xTaskIncrementTick
      22                           .ref    _xTaskIncrementTick
      23                           .global _vTaskSwitchContext
      24                           .global _prvSetupTimerInterrupt
      25                           .global _tickIRQctr                                ;; debug - to be disabled during normal run/r
      26                           .global _save_new_pxcode                           ;; updated program counter that task suspende
      27                           .global _save_new_pxlcode                          ;; sysstack contents plus loop counter conten
      28                           .global _xCompareTCB                               ;; task Control Block for comparison
      29              
      30              ;                         .ref configUSE_TICK_CTR
      31              ;                         .ref configUSE_PREEMPTION
      32              
      33                           .def _vPortYield
      34                           .def _xPortStartScheduler
      35                           .def _vTickISR
      36                           .global _vPortYield
      37                           .global _xPortStartScheduler
      38                           .global _vTickISR
      39                           .global _INT14_ISR
      40                           .global _portFLAGS_INT_ENABLED
      41                           .global _portFLAGS_INT_ENABLED_POPPED
      42                           .global _DBSTAT_SAVE
      43                           .global _DBSTAT_RESTORE
      44                           .global _STATUS0_LOW
      45                           .global _STATUS0_HIGH
      46                           .global _STATUS1_LOW
      47                           .global _STATUS1_HIGH
      48                           .global _STATUS2_LOW
      49                           .global _STATUS2_HIGH
      50                           .global _PC_REG_HIGH_SAVE
      51                           .global _PC_REG_LOW_SAVE
      52                           .global _PC_REG_HIGH_RESTORE
      53                           .global _PC_REG_LOW_RESTORE
      54              ;            .cdecls C,NOLIST,"portmacro.h"
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    2

      55              ;            .cdecls C,LIST,"FreeRTOSConfig.h"
      56              ;                       CLRC AMODE
      57              ;       System Stack
      58 000000               .text
      59              portSAVE_CONTEXT .macro 
      60              ;                       ;CONTEXT_SAVE
      61              ;                       ASP  ; Align Stack Pointer
      62              ;                       CLRC       OVM,PAGE0
      63              ;                       CLRC       AMODE
      64              ;                       EALLOW
      65              
      66                                      bclr C54CM      ; temp - until we figure out what is setting this
      67              
      68                                      bset INTM               ; disable interrupts
      69              
      70              ;;                      mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
      71              ;;                      mov xssp, dbl (*(#_save_xssp))                  ; save xssp
      72              
      73              ;;                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
      74              ;;                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***       
      75                              
      76              ;                       pshboth xar7
      77              ;                       pshboth xar6
      78              ;                       pshboth xar5
      79              
      80                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
      81              ;                       .if configUSE_CONTEXT_DEBUG == 1
      82                                      mov xar6, dbl (*(#_save_xar6))
      83              ;                       .endif
      84              
      85                                      mov dbl (*(#_pxCurrentTCB)), xar7
      86              ; does this *always* work?
      87                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
      88                                      mov dbl (*ar7(#2)), xssp
      89                                      .if 0
      90                                      mov dbl (*(_xCompareTCB)), xar6                 ; need to restore our return address
      91                                      mov xar7, ac0
      92                                      mov xar6, ac1
      93                                      CMPU AC1 != AC0, TC1 
      94                                      BCC $5,TC1 
      95                                      amov #0x000000, xar7
      96                                      amov #0x000000, xar6
      97                                          mov  *(#_save_new_pxcode), ar7
      98                                          mov ar7, *sp(#0)
      99                                          mov *(#_save_new_pxlcode) , ar7
     100                                          mov ssp, ar6
     101                                          mov ar7, *ar6(#0)
     102                                          mov dbl (*(#_save_xar6)), xar6
     103                                      .endif
     104              $5:
     105              ;; what about xssp here?
     106              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     107              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     108                                 .if configUSE_CONTEXT_DEBUG == 1
     109              ;; save current PC (and possible loop bits values)
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    3

     110              ;; for debug - to see if this is being corrupted
     111                                      mov dbl(*ar7), xar6
     112                                      mov dbl(*ar6), xar7
     113                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
     114                                      mov xssp, xar7
     115                                      mov dbl(*ar7), xar6
     116                                      mov dbl(*ar6), xar7
     117                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
     118                                      mov xssp, xar7
     119                                      add #-2, ar7
     120                                      mov dbl(*ar7), xar6
     121                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
     122                          mov dbl (*(#_save_xar6)), xar6
     123              
     124              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     125              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     126              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     127                                      .endif
     128                                      ; save context in our stack(s) frame
     129                                      mov dbl (*(#_pxCurrentTCB)), xar7
     130                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     131                                      mov dbl (*ar7(#2)), xssp
     132              
     133                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     134              
     135                                      mov xar7, dbl(*sp(#8))                          ; save xar7
     136                                      mov ar7, *sp(#7)
     137              
     138                                      mov xar6, dbl(*sp(#10))
     139                                      mov ar6, *sp(#9)
     140              
     141                                      mov xar5, dbl(*sp(#12))
     142                                      mov ar5, *sp(#11)
     143              
     144                                      mov xar4, dbl(*sp(#14))
     145                                      mov ar4, *sp(#13)
     146              
     147                                      mov xar3, dbl(*sp(#16))
     148                                      mov ar3, *sp(#15)
     149              
     150                                      mov xar2, dbl(*sp(#18))
     151                                      mov ar2, *sp(#17)
     152              
     153                                      mov xar1, dbl(*sp(#20))
     154                                      mov ar1, *sp(#19)
     155              
     156                                      mov xar0, dbl(*sp(#22))
     157                                      mov ar0, *sp(#21)
     158              
     159                                      mov t3, *sp(#23)
     160                                      mov t2, *sp(#24)
     161                                      mov t1, *sp(#25)
     162                                      mov t0, *sp(#26)
     163              
     164              ;;                      mov mmap(ST0_55), t0
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    4

     165              ; - this is ok - we are not pushing - it's a relative stack frame
     166              ;                       mov t0, *sp(#25)
     167              ;;                      mov t0, *sp(#23)
     168              ;;                      mov mmap(ST1_55), t1
     169              ;                       mov t1, *sp(#26)                ; stomping on own mem
     170              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     171              ;;                      mov mmap(ST2_55), t2
     172              ;;                      mov t2, *sp(#22)
     173              ;                       mov t2, *sp(#27)
     174              ;;                      mov mmap(ST2_55), t3
     175              ;                       mov t3, *sp(#28)
     176              ;;                      mov t3, *sp(#24)
     177              
     178              ;                       PSH dbl(AR0) ; 32-bit
     179              ;                       PSH dbl(AR1) 
     180              ;                       PSH dbl(AR2) ; 32-bit
     181              ;                       PUSH XAR3 ; 32-bit
     182              ;                       PUSH XAR4 ; 32-bit
     183                              ;-- Comment these to save cycles --------
     184              ;                       PUSH XAR5 ; 32-bit
     185              ;                       PUSH XAR6 ; 32-bit
     186              ;                       PUSH XAR7 ; 32-bit
     187                              ;----------------------------------------
     188              
     189              ;                       PUSH XT   ; 32-bit
     190              
     191              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     192              ;                       push xar6 ; portFLAGS_INT_ENABLED
     193              
     194                                      mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
     195                                      mov xar6, dbl(*sp(#6))
     196                                      
     197              
     198              ;                       movl xar7, @_usCriticalNesting
     199              ;                       push xar7
     200                                      mov dbl (*(#_usCriticalNesting)), xar7
     201                                      mov xar7, dbl(*sp(#4))
     202              
     203                                      mov mmap(ST1_55), ar7
     204                                      mov ar7, *sp(#1)
     205                                      mov  mmap(ST2_55), ar7
     206                                      mov ar7, *sp(#2)
     207              
     208                                      mov ssp, ar7
     209                                      mov mmap(ST0_55), ar6
     210                                      mov ar6, *ar7(#2)
     211              
     212              ;                       mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
     213              ;                       mov dbl (*(#_save_xssp)), xssp          
     214              
     215              
     216              
     217              
     218              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     219              ;;;                     mov ar6, *ar7(#2)
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    5

     220              ;                       mov ar7, mmap(ST0_55)
     221              ;                       mov *ssp(#2), ar7
     222              
     223              ; fix up
     224              ;                       aadd #20, sp
     225              ;                       mov sp, t0
     226              ;                       sub #1, t0
     227              ;                       mov t0, ssp
     228              
     229                                      ; move contents of SP into address of current TCB
     230              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     231              
     232              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     233              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     234              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     235              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     236              ;                       mov dbl (*ar7+), xssp
     237              
     238              ;                       mov sp, t0              ; we've already saved t0
     239              ;                       add #1, t0
     240              ;                       mov t0, ssp
     241              ; ??
     242              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     243              
     244              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     245              ;                       mov al, @sp
     246              ;                       movl  *xar6, acc        
     247              ;;                      mov  ar0, @sp
     248              ;;                      mov  @ar6, alxd
     249              ;;                      mov  ar0, @sp
     250              ;;                      movl 0(xar6), sp
     251              ;                       EDIS
     252              ;                       NASP
     253              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     254              ;                       NOP
     255                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
     256                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     257                                      nop
     258                                      nop
     259                                      nop
     260                                      .endm
     261              
     262              portRESTORE_CONTEXT .macro
     263                                      .C54CM_off
     264              ;                       .CPL_off
     265                                      .ARMS_off
     266                                      .align 4
     267              
     268              ; Restore context & return
     269                                      ;CONTEXT_RESTORE
     270              ;                       ASP
     271              ;                       EALLOW
     272              ;                       nop
     273              ;                       nop
     274              ;                       nop
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    6

     275              ;                       nop
     276                                      bclr C54CM    
     277              ;               xssp = dbl(*(#_pxCurrentTCB))
     278              ;               xsp  = dbl(*(#_pxCurrentTCB))
     279                                      mov xar7, dbl (*(#_save_xar7))  
     280              
     281                                      aadd #-3, sp
     282              ;            aadd #-3, xsp
     283              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     284              ;            BCC $1,TC1 ; |216|
     285                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
     286                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
     287              ;            B $4
     288              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     289              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     290              
     291              ;                       aadd #-3, sp
     292              ;$1
     293              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     294              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     295              ;$4
     296                                      .if 1
     297                                      mov xsp, xar7
     298                                      mov xssp, xar6
     299                                      amov #0x000000, xar2
     300                                      amov #0x000000, xar1
     301                                      mov dbl (*(#_pxCurrentTCB)), xar5                       
     302              
     303                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     304                                      mov dbl (*ar5(#2)), xar3                        
     305                                      
     306                                      mov *ar4, ar2
     307                                      mov *ar3, ar1
     308              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     309                                      mov ar2, *ar7
     310                                      mov ar1, *ar6
     311              
     312                                      mov mmap(ST1_55), ar7
     313                                      and #0xf7ff, ar7                        ; <here>#0800h
     314                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     315                                      mov ar7, *ar4(#1)                       ; save in TCB
     316                                      mov mmap(ST2_55), ar7
     317                                      mov ar7, *sp(#2)
     318                                      mov ar7, *ar4(#2)
     319              
     320                                      mov ssp, ar7
     321                                      mov mmap(ST0_55), ar6
     322                                      mov ar6, *ar7(#2)
     323                                      mov ar6, *ar3(#2)
     324              
     325                                      .endif
     326              
     327              ;                       mov #0, ssp     
     328              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     329              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    7

     330                                      ; 32-bit mode - will act on SP and SSP:
     331              ;                       'fix-up' current SP and SSP - is this dangerous????
     332              ;                       aadd #-3, sp
     333              ;;                      mov *ar7, *sp
     334              ;                       mov dbl (*ar7), ar6
     335              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     336              ;                       mov *ar7(#2), *ssp                      
     337              ;                       POP mmap(ST3_55)
     338              ;                       pshboth xar7                            ; should increment both
     339                                      .if 0
     340                                      mov mmap(ST1_55), ar7
     341                                      and #0xf7ff, ar7                        ; <here>#0800h
     342                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     343                                      mov mmap(ST2_55), ar7
     344                                      mov ar7, *sp(#2)
     345              
     346                                      mov ssp, ar7
     347                                      mov mmap(ST0_55), ar6
     348                                      mov ar6, *ar7(#2)
     349              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     350              ;;                      mov ar6, *ar7(#1)
     351                                      .endif
     352                                      .if 0
     353                                      mov dbl (*(#_pxCurrentTCB)), xar7
     354              
     355                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     356                                      mov dbl (*ar7(#2)), xssp        
     357                                      .endif
     358                                      .if 0
     359                                      mov dbl (*(_xCompareTCB)), xar6
     360              ; need to restore our return address
     361                                      mov xar7, ac0
     362                                          mov xar6, ac1
     363                                          CMPU AC1 != AC0, TC1 ; |1393|
     364                                          BCC $6,TC1 ; |1393|
     365                                          amov #0x000000, xar7
     366                                          amov #0x000000, xar6
     367                                          mov  *(#_save_new_pxcode), ar7
     368                                          mov ar7, *sp(#0)
     369                                          mov *(#_save_new_pxlcode) , ar7
     370                                          mov ssp, ar6
     371                                          mov ar7, *ar6(#0)
     372              
     373                                          mov dbl (*(#_save_xar6)), xar6
     374                                                              .endif
     375              $6:
     376              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     377              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     378                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     379                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     380                                      mov xar6, dbl (*(#_save_xar6))
     381              
     382              ;; this is for debug
     383                                      mov dbl(*ar7), xar6
     384                                      mov dbl(*ar6), xar7
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    8

     385                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     386                                      mov xssp, xar7
     387                                      mov dbl(*ar7), xar6
     388                                      mov dbl(*ar6), xar7
     389                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     390                                      mov xssp, xar7
     391                                      add #-2, ar7
     392                                      mov dbl(*ar7), xar6
     393                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     394                                      mov dbl (*(#_save_xar6)), xar6
     395                                      
     396                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     397                                      .endif
     398              
     399              ;                       mov mmap(ST0_55), *ssp(#1)
     400              ;                       mov mmap(STO_55), *ssp(#2)
     401              ;                       mov mmap(ST1_55), *sp(#1)
     402              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     403              ;                       mov *ar7, t0
     404              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     405              ;                       mov *ar7(#2), t0
     406              ;                       mov t0, *ssp(#0)                        
     407              
     408              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     409              ; what about xssp?
     410              ;                       mov xar6, xsp
     411              ;                       mov xssp, xar7
     412              ;                       add #1, ar7
     413              ;                       mov xar7, xsp
     414              ;                       mov sp, t0
     415              ;                       mov ssp, t1
     416              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     417              ;                       ar0 = *ar6
     418              ;                       xssp = xar0
     419              ;                       mov *xar6, xar0
     420              ;                       mov xar0, xssp  ; stack now points to our TCB
     421              ;;                      mov sp, *ar6
     422              ;;                      mov sp, ar0
     423              ;;                      mov sp, *_pxCurrentTCB
     424              ;;                      clr ar0
     425              ;;                      mov ar0, @xar6
     426              ;;                      mov sp, AR0
     427              ;;                      add sp, xar6
     428              
     429              ;;                      pshboth xar7
     430              ;;                      pshboth xar6
     431              ;;                      pshboth xar5
     432              
     433              ;;                      popboth xar5
     434              ;;                      popboth xar6
     435              ;;                      popboth xar7
     436              
     437              ;;;                     mov *sp(#1), ar7 
     438              ;                       mov dbl(*sp(#1)), ar7
     439              ;;;                     mov  ar7, mmap(ST1_55)
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    9

     440                                      mov dbl (*(#_pxCurrentTCB)), xar7
     441                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     442                                      mov dbl (*ar7(#2)), xssp        
     443                                      .if 0
     444                                      mov *sp(#2), ar7
     445                                      mov ar7, mmap(ST2_55)
     446                                      mov ssp, ar7
     447                                      mov *ar7(#2), ar6
     448                                      mov ar6, mmap(ST0_55)
     449                                      .endif
     450              ;                       mov *ar7(#2), ar6
     451              ;                       mov ar6, *ssp(#2)
     452              ;                       mov *ssp(#2), ar7
     453              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     454              
     455                                      mov dbl(*sp(#4)), xar7
     456              ;                       mov *sp(#1), ar7
     457                                      mov xar7, dbl(*(#_usCriticalNesting))   
     458              
     459                                      mov dbl(*sp(#6)), xar6
     460              ;                       mov *sp(#3), ar6
     461              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     462                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     463              
     464              ;                       POP XT
     465                              ;-- Comment these to save cycles ---
     466                                      mov dbl(*sp(#8)), xar7
     467                                      mov *sp(#7), ar7
     468              ;                       mov *sp(#5), ar7
     469              ;                       mov dbl(*sp(#0)), hi(ar7)
     470              ;                       mov (*sp(#0)), lo(ar7)
     471                                      mov dbl(*sp(#10)), xar6
     472                                      mov *sp(#9), ar6
     473                                      mov dbl(*sp(#12)), xar5
     474                                      mov *sp(#11), ar5
     475              ;; pvPararmeters currently here - needs to be verified --- jcw
     476                                      mov dbl(*sp(#14)), xar4
     477                                      mov *sp(#13), ar4
     478                                      mov dbl(*sp(#16)), xar3
     479                                      mov *sp(#15), ar3
     480                                      mov dbl(*sp(#18)), xar2
     481                                      mov *sp(#17), ar2
     482                                      mov dbl(*sp(#20)), xar1
     483                                      mov *sp(#19), ar1
     484                                      mov dbl(*sp(#22)), xar0
     485                                      mov *sp(#21), ar0
     486              
     487                                      mov *sp(#23), t3
     488                                      mov *sp(#24), t2
     489                                      mov *sp(#25), t1
     490                                      mov *sp(#26), t0
     491              
     492              ;                       mov dbl(*sp(#21)), *xssp(#0)
     493              ;                       mov *sp(#21), *ssp
     494              ;                       mov *sp(#21), RETA
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   10

     495              ; need to move 23-16 to XSSP contents
     496              ;                       mov xar0, dbl (*(#_save_xar7))
     497              ;                       mov ssp, ar0
     498              ;                       mov #0, ssp 
     499              ;                       mov xssp, xar0
     500              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     501              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     502                      ;               add #1, xssp            ; 32-bit return address pointer
     503                      ;               amar *xssp+
     504              ;                       mov sp, t0
     505              ;                       add #1, t0
     506              ;                       mov t0, ssp
     507              ;                       incr ssp
     508              ;                       asub #20, ar0
     509              ;                       mov xar0, xssp
     510              ;                       mov ar0, ssp
     511              ;                       mov ar0, 
     512              ;;                      mov *sp(#1), t0
     513              ;;                      mov *sp(#3), t3         ; ST0
     514              ;;                      mov *sp(#4), t2         ; DBSTAT
     515              ;;                      mov t3, *ar0(#2)
     516                      ;;              mov t2, *ar0(#1)
     517              ;;                      mov t0, *ar0(#0)
     518              
     519              ;;                      mov *sp(#5), t0
     520              ;;                      mov *sp(#6), t1
     521              ;;                      mov *sp(#7), t2
     522                      ;;              mov *sp(#8), t3
     523              
     524              ; restore ar0
     525              ;                       mov dbl(*sp(#-2)), xar0
     526              ;                       mov #-1, ar0
     527              ;;                      mov dbl (*(#_save_xar7)), xar0
     528              ;;
     529              ;;                      mov sp, t0
     530              ;;                      add #1, t0
     531              ;;                      mov t0, ssp
     532              
     533              ;                       mov *sp(#3), *(#00004ch+#1)
     534              
     535              ;                       mov t3, *ssp(#1) 
     536              ;                       mov t2, *ssp(#2)
     537              
     538              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     539              ;;                      mov t3, *(ssp(#0))
     540              ;                       mov t3, *ssp
     541              ;                       mov *sp(#3), t3 ; 
     542              ;                       mov t3, *ssp(#1)
     543              ;;                      mov *sp(#21), PC        
     544              
     545              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     546              ;                       mov dbl(xsp), dbl(lcrpc)
     547              ;                       popboth XAR7
     548              ;                       add #1, sp
     549              ;                       add #1, ssp
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   11

     550              ;                       add #2, t0
     551              ;                       add #2, t1
     552              ;                       mov t0, sp
     553              ;                       mov t1, ssp
     554              ;                       popboth XAR6
     555              ;                       add #2, t0
     556              ;                       add #2, t1
     557              ;                       mov t0, sp
     558              ;                       mov t1, ssp
     559              ;                       popboth XAR5
     560              ;                       add #2, t0
     561              ;                       add #2, t1
     562              ;                       mov t0, sp
     563              ;                       mov t1, ssp
     564                              ;-----------------------------------
     565              ;                       popboth XAR4
     566              ;                       add #2, t0
     567              ;                       add #2, t1
     568              ;                       mov t0, sp
     569              ;                       mov t1, ssp
     570              ;                       popboth XAR3
     571              ;                       add #2, t0
     572              ;                       add #2, t1
     573              ;                       mov t0, sp
     574              ;                       mov t1, ssp
     575              ;                       popboth XAR2
     576              ;                       add #2, t0
     577              ;                       add #2, t1
     578              ;                       mov t0, sp
     579              ;                       mov t1, ssp
     580              ;                       popboth XAR1
     581              ;                       add #2, t0
     582              ;                       add #2, t1
     583              ;                       mov t0, sp
     584              ;                       mov t1, ssp
     585              ;                       popboth XAR0
     586              ;                       add #2, t0
     587              ;                       add #2, t1
     588              ;                       mov t0, sp
     589              ;                       mov t1, ssp
     590              ;                       EDIS
     591              ;                       NASP    ; Un-align stack pointer
     592              ;;                      pop mmap(ST3_55)
     593              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     594              ;            BCC $2,TC1 ; |216|
     595                                      .if 0
     596                                      mov dbl (*(#_pxCurrentTCB)), xar7
     597              
     598                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     599                                      mov dbl (*ar7(#2)), xssp                
     600                                      .endif
     601              
     602                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
     603                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
     604              
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   12

     605                                      .if 0
     606                                      mov dbl (*(_xCompareTCB)), xar6
     607              ; need to restore our return address
     608                                      mov xar7, ac0
     609                          mov xar6, ac1
     610                              CMPU AC1 != AC0, TC1 ; |1393|
     611                          BCC $6,TC1 ; |1393|
     612                          amov #0x000000, xar7
     613                                      amov #0x000000, xar6
     614                          mov  *(#_save_new_pxcode), ar7
     615                                      mov ar7, *sp(#0)
     616                          mov *(#_save_new_pxlcode) , ar7
     617                          mov ssp, ar6
     618                          mov ar7, *ar6(#0)
     619              
     620                          mov dbl (*(#_save_xar6)), xar6
     621                                      .endif
     622              
     623                                      mov dbl (*(#_save_xar7)), xar7
     624              
     625              ;                       B $3
     626              ;$2
     627              ;            MOV #0, *(#_first_flag) ; |217|
     628              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     629              ;                       mov dbl (*(#_first_save_xssp)), xssp
     630              ;$3
     631              ;                       aadd #-3, sp
     632                                      bclr INTM               ; enable interrupts
     633              ;                       aadd #1, sp
     634                                      RETI
     635              ;                       mov #1860h, ssp
     636                                      nop
     637                                      nop
     638              ;                       nop
     639                                      .endm
     640              portRESTORE_FIRST_CONTEXT .macro
     641                                      .C54CM_off
     642              ;                       .CPL_off
     643                                      .ARMS_off
     644                                      .align 4
     645              
     646              ; Restore context & return
     647                                      ;CONTEXT_RESTORE
     648              ;                       ASP
     649              ;                       EALLOW
     650              ;                       nop
     651              ;                       nop
     652              ;                       nop
     653              ;                       nop
     654                                      bclr C54CM    
     655              ;               xssp = dbl(*(#_pxCurrentTCB))
     656              ;               xsp  = dbl(*(#_pxCurrentTCB))
     657                                      mov xar7, dbl (*(#_save_xar7))  
     658              
     659                                      aadd #-3, sp
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   13

     660              ;            aadd #-3, xsp
     661              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     662              ;            BCC $1,TC1 ; |216|
     663                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
     664                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
     665              ;            B $4
     666              ;;;;;                   mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     667              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     668              
     669              ;                       aadd #-3, sp
     670              ;$1
     671              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     672              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     673              ;$4
     674                                      .if 1
     675                                      mov xsp, xar7
     676                                      mov xssp, xar6
     677                                      amov #0x000000, xar2
     678                                      amov #0x000000, xar1
     679                                      mov dbl (*(#_pxCurrentTCB)), xar5                               
     680              
     681                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     682                                      mov dbl (*ar5(#2)), xar3                        ; xssp          
     683                                      
     684                                      mov *ar4, ar2
     685                                      mov *ar3, ar1
     686              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     687                                      mov ar2, *ar7
     688                                      mov ar1, *ar6   
     689              
     690                                      mov mmap(ST1_55), ar7
     691                                      and #0xf7ff, ar7                        ; <here>#0800h
     692                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     693                                      mov ar7, *ar4(#1)                       ; save in TCB
     694                                      mov mmap(ST2_55), ar7
     695                                      mov ar7, *sp(#2)
     696                                      mov ar7, *ar4(#2)
     697              
     698                                      mov ssp, ar7
     699                                      mov mmap(ST0_55), ar6
     700                                      mov ar6, *ar7(#2)
     701                                      mov ar6, *ar3(#2)
     702                                      
     703                                      .endif
     704              
     705              ;                       mov #0, ssp     
     706              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     707              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     708                                      ; 32-bit mode - will act on SP and SSP:
     709              ;                       'fix-up' current SP and SSP - is this dangerous????
     710              ;                       aadd #-3, sp
     711              ;;                      mov *ar7, *sp
     712              ;                       mov dbl (*ar7), ar6
     713              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     714              ;                       mov *ar7(#2), *ssp                      
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   14

     715              ;                       POP mmap(ST3_55)
     716              ;                       pshboth xar7                            ; should increment both
     717                                      .if 0
     718                                      mov mmap(ST1_55), ar7
     719                                      and #0xf7ff, ar7                        ; <here>#0800h
     720                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     721                                      mov mmap(ST2_55), ar7
     722                                      mov ar7, *sp(#2)
     723              
     724                                      mov ssp, ar7
     725                                      mov mmap(ST0_55), ar6
     726                                      mov ar6, *ar7(#2)
     727                                      .endif
     728              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     729              ;;                      mov ar6, *ar7(#1)
     730              
     731                                      .if 0
     732                                      mov dbl (*(#_pxCurrentTCB)), xar7
     733              
     734                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     735                                      mov dbl (*ar7(#2)), xssp        
     736                                      .endif
     737              
     738                                      .if 0                                           ; first task - no pxcode update
     739                                          mov dbl (*(_xCompareTCB)), xar6
     740              ; need to restore our return address
     741                                          mov xar7, ac0
     742                                          mov xar6, ac1
     743                                          CMPU AC1 != AC0, TC1 ; |1393|
     744                                          BCC $7,TC1 ; |1393|
     745                                          amov #0x000000, xar7
     746                                          amov #0x000000, xar6
     747                                          mov  *(#_save_new_pxcode), ar7
     748                                          mov ar7, *sp(#0)
     749                                          mov *(#_save_new_pxlcode) , ar7
     750                                          mov ssp, ar6
     751                                          mov ar7, *ar6(#0)
     752              
     753                                          mov dbl (*(#_save_xar6)), xar6
     754                                          .endif
     755              $7:
     756              
     757              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     758              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     759                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     760                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     761                                      mov xar6, dbl (*(#_save_xar6))
     762              
     763              ;; this is for debug
     764                                      mov dbl(*ar7), xar6
     765                                      mov dbl(*ar6), xar7
     766                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     767                                      mov xssp, xar7
     768                                      mov dbl(*ar7), xar6
     769                                      mov dbl(*ar6), xar7
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   15

     770                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     771                                      mov xssp, xar7
     772                                      add #-2, ar7
     773                                      mov dbl(*ar7), xar6
     774                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     775                                      mov dbl (*(#_save_xar6)), xar6
     776                                      
     777                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     778                                      .endif
     779              
     780              ;                       mov mmap(ST0_55), *ssp(#1)
     781              ;                       mov mmap(STO_55), *ssp(#2)
     782              ;                       mov mmap(ST1_55), *sp(#1)
     783              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     784              ;                       mov *ar7, t0
     785              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     786              ;                       mov *ar7(#2), t0
     787              ;                       mov t0, *ssp(#0)                        
     788              
     789              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     790              ; what about xssp?
     791              ;                       mov xar6, xsp
     792              ;                       mov xssp, xar7
     793              ;                       add #1, ar7
     794              ;                       mov xar7, xsp
     795              ;                       mov sp, t0
     796              ;                       mov ssp, t1
     797              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     798              ;                       ar0 = *ar6
     799              ;                       xssp = xar0
     800              ;                       mov *xar6, xar0
     801              ;                       mov xar0, xssp  ; stack now points to our TCB
     802              ;;                      mov sp, *ar6
     803              ;;                      mov sp, ar0
     804              ;;                      mov sp, *_pxCurrentTCB
     805              ;;                      clr ar0
     806              ;;                      mov ar0, @xar6
     807              ;;                      mov sp, AR0
     808              ;;                      add sp, xar6
     809              
     810              ;;                      pshboth xar7
     811              ;;                      pshboth xar6
     812              ;;                      pshboth xar5
     813              
     814              ;;                      popboth xar5
     815              ;;                      popboth xar6
     816              ;;                      popboth xar7
     817              
     818              ;;;                     mov *sp(#1), ar7 
     819              ;                       mov dbl(*sp(#1)), ar7
     820              ;;;                     mov  ar7, mmap(ST1_55)
     821              
     822                                      mov dbl (*(#_pxCurrentTCB)), xar7
     823                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     824                                      mov dbl (*ar7(#2)), xssp        
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   16

     825                                      .if 0
     826                                      mov *sp(#2), ar7
     827                                      mov ar7, mmap(ST2_55)
     828                                      mov ssp, ar7
     829                                      mov *ar7(#2), ar6
     830                                      mov ar6, mmap(ST0_55)
     831                                      .endif
     832              ;                       mov *ar7(#2), ar6
     833              ;                       mov ar6, *ssp(#2)
     834              ;                       mov *ssp(#2), ar7
     835              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     836              
     837                                      mov dbl(*sp(#4)), xar7
     838              ;                       mov *sp(#1), ar7
     839                                      mov xar7, dbl(*(#_usCriticalNesting))   
     840              
     841                                      mov dbl(*sp(#6)), xar6
     842              ;                       mov *sp(#3), ar6
     843              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     844                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     845              
     846              ;                       POP XT
     847                              ;-- Comment these to save cycles ---
     848                                      mov dbl(*sp(#8)), xar7
     849                                      mov *sp(#7), ar7
     850              ;                       mov *sp(#5), ar7
     851              ;                       mov dbl(*sp(#0)), hi(ar7)
     852              ;                       mov (*sp(#0)), lo(ar7)
     853                                      mov dbl(*sp(#10)), xar6
     854                                      mov *sp(#9), ar6
     855                                      mov dbl(*sp(#12)), xar5
     856                                      mov *sp(#11), ar5
     857              ;; pvPararmeters currently here - needs to be verified --- jcw
     858                                      mov dbl(*sp(#14)), xar4
     859                                      mov *sp(#13), ar4
     860                                      mov dbl(*sp(#16)), xar3
     861                                      mov *sp(#15), ar3
     862                                      mov dbl(*sp(#18)), xar2
     863                                      mov *sp(#17), ar2
     864                                      mov dbl(*sp(#20)), xar1
     865                                      mov *sp(#19), ar1
     866                                      mov dbl(*sp(#22)), xar0
     867                                      mov *sp(#21), ar0
     868              
     869                                      mov *sp(#23), t3
     870                                      mov *sp(#24), t2
     871                                      mov *sp(#25), t1
     872                                      mov *sp(#26), t0
     873              
     874              ;                       mov dbl(*sp(#21)), *xssp(#0)
     875              ;                       mov *sp(#21), *ssp
     876              ;                       mov *sp(#21), RETA
     877              ; need to move 23-16 to XSSP contents
     878              ;                       mov xar0, dbl (*(#_save_xar7))
     879              ;                       mov ssp, ar0
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   17

     880              ;                       mov #0, ssp 
     881              ;                       mov xssp, xar0
     882              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     883              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     884                      ;               add #1, xssp            ; 32-bit return address pointer
     885                      ;               amar *xssp+
     886              ;                       mov sp, t0
     887              ;                       add #1, t0
     888              ;                       mov t0, ssp
     889              ;                       incr ssp
     890              ;                       asub #20, ar0
     891              ;                       mov xar0, xssp
     892              ;                       mov ar0, ssp
     893              ;                       mov ar0, 
     894              ;;                      mov *sp(#1), t0
     895              ;;                      mov *sp(#3), t3         ; ST0
     896              ;;                      mov *sp(#4), t2         ; DBSTAT
     897              ;;                      mov t3, *ar0(#2)
     898                      ;;              mov t2, *ar0(#1)
     899              ;;                      mov t0, *ar0(#0)
     900              
     901              ;;                      mov *sp(#5), t0
     902              ;;                      mov *sp(#6), t1
     903              ;;                      mov *sp(#7), t2
     904                      ;;              mov *sp(#8), t3
     905              
     906              ; restore ar0
     907              ;                       mov dbl(*sp(#-2)), xar0
     908              ;                       mov #-1, ar0
     909              ;;                      mov dbl (*(#_save_xar7)), xar0
     910              ;;
     911              ;;                      mov sp, t0
     912              ;;                      add #1, t0
     913              ;;                      mov t0, ssp
     914              
     915              ;                       mov *sp(#3), *(#00004ch+#1)
     916              
     917              ;                       mov t3, *ssp(#1) 
     918              ;                       mov t2, *ssp(#2)
     919              
     920              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     921              ;;                      mov t3, *(ssp(#0))
     922              ;                       mov t3, *ssp
     923              ;                       mov *sp(#3), t3 ; 
     924              ;                       mov t3, *ssp(#1)
     925              ;;                      mov *sp(#21), PC        
     926              
     927              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     928              ;                       mov dbl(xsp), dbl(lcrpc)
     929              ;                       popboth XAR7
     930              ;                       add #1, sp
     931              ;                       add #1, ssp
     932              ;                       add #2, t0
     933              ;                       add #2, t1
     934              ;                       mov t0, sp
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   18

     935              ;                       mov t1, ssp
     936              ;                       popboth XAR6
     937              ;                       add #2, t0
     938              ;                       add #2, t1
     939              ;                       mov t0, sp
     940              ;                       mov t1, ssp
     941              ;                       popboth XAR5
     942              ;                       add #2, t0
     943              ;                       add #2, t1
     944              ;                       mov t0, sp
     945              ;                       mov t1, ssp
     946                              ;-----------------------------------
     947              ;                       popboth XAR4
     948              ;                       add #2, t0
     949              ;                       add #2, t1
     950              ;                       mov t0, sp
     951              ;                       mov t1, ssp
     952              ;                       popboth XAR3
     953              ;                       add #2, t0
     954              ;                       add #2, t1
     955              ;                       mov t0, sp
     956              ;                       mov t1, ssp
     957              ;                       popboth XAR2
     958              ;                       add #2, t0
     959              ;                       add #2, t1
     960              ;                       mov t0, sp
     961              ;                       mov t1, ssp
     962              ;                       popboth XAR1
     963              ;                       add #2, t0
     964              ;                       add #2, t1
     965              ;                       mov t0, sp
     966              ;                       mov t1, ssp
     967              ;                       popboth XAR0
     968              ;                       add #2, t0
     969              ;                       add #2, t1
     970              ;                       mov t0, sp
     971              ;                       mov t1, ssp
     972              ;                       EDIS
     973              ;                       NASP    ; Un-align stack pointer
     974              ;;                      pop mmap(ST3_55)
     975              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     976              ;            BCC $2,TC1 ; |216|
     977                                      .if 0
     978                                      mov dbl (*(#_pxCurrentTCB)), xar7
     979              
     980                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     981                                      mov dbl (*ar7(#2)), xssp                
     982                                      .endif
     983              
     984                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
     985                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
     986              
     987                                      .if 0
     988                                      mov dbl (*(_xCompareTCB)), xar6
     989              ; need to restore our return address
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   19

     990                                      mov xar7, ac0
     991                          mov xar6, ac1
     992                              CMPU AC1 != AC0, TC1 ; |1393|
     993                          BCC $6,TC1 ; |1393|
     994                          amov #0x000000, xar7
     995                                      amov #0x000000, xar6
     996                          mov  *(#_save_new_pxcode), ar7
     997                                      mov ar7, *sp(#0)
     998                          mov *(#_save_new_pxlcode) , ar7
     999                          mov ssp, ar6
    1000                          mov ar7, *ar6(#0)
    1001              
    1002                          mov dbl (*(#_save_xar6)), xar6
    1003                                      .endif
    1004              
    1005                                      mov dbl (*(#_save_xar7)), xar7
    1006              
    1007              ;                       B $3
    1008              ;$2
    1009              ;            MOV #0, *(#_first_flag) ; |217|
    1010              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
    1011              ;                       mov dbl (*(#_first_save_xssp)), xssp
    1012              ;$3
    1013              ;                       aadd #-3, sp
    1014                                      bclr INTM               ; enable interrupts
    1015              ;                       aadd #1, sp
    1016                                      RETI
    1017              ;                       mov #1860h, ssp
    1018                                      nop
    1019                                      nop
    1020              ;                       nop
    1021                                      .endm
    1022              ; /*-----------------------------------------------------------*/
    1023              
    1024              
    1025              
    1026              ; /*-----------------------------------------------------------*/
    1027              
    1028              ; /*
    1029              ; * The RTOS tick ISR.
    1030              ; *
    1031              ; * If the cooperative scheduler is in use this simply increments the tick
    1032              ; * count.
    1033              ; *
    1034              ; * If the preemptive scheduler is in use a context switch can also occur.
    1035              ; */
    1036              
    1037              
    1038 000000       _xPortStartScheduler:
    1039              
    1040              ;                /* Setup the hardware to generate the tick.  Interrupts are disabled
    1041              ;                when this function is called. */
    1042 000000 4EFF                 aadd #-1, sp
    1043 000002 6C00                 call    #_prvSetupTimerInterrupt
         000004 0000!
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   20

    1044              
    1045              ;                /* Restore the context of the first task that is going to run. */
    1046              
    1047              ;;              INTR INT14      ; force interrupt - just for debug purposes.
    1048              
    1049              ;;            psh mmap(ST3_55)
    1050 000006 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7
         000008 F500 
         00000a 0000!
    1051 00000c EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save xar6
         00000e E500 
         000010 0000!
    1052              
    1053 000012 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000014 FF00 
         000016 0000!
    1054              ; does this *always* work?
    1055 000018 EDE1                          mov dbl (*ar7), xar6
         00001a EF   
    1056              ;                       mov xsp, dbl (*(#_first_save_xsp))      ; (init) xsp contains our TCB now
    1057 00001b EB31                          mov xsp, dbl (*(#_save_xsp))            ; (init) xsp contains our TCB now
         00001d 4500 
         00001f 0000!
    1058              ;                       mov xar6, dbl (*(#_save_xsp))   
    1059 000021 EDE3                          mov dbl (*ar7+), xar6
         000023 EF   
    1060              ;                       mov xssp, dbl (*(#_first_save_xssp))
    1061 000024 EB31                          mov xssp, dbl (*(#_save_xssp))
         000026 5500 
         000028 0000!
    1062              ;                       mov #1, *(#_first_flag)
    1063              
    1064              ; what about xssp here?
    1065 00002a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00002c FF00 
         00002e 0000!
    1066 000030 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000032 EF00 
         000034 0000!
    1067 000036 4E01                          aadd #1, sp
    1068              
    1069 ****** MACRO                 portRESTORE_FIRST_CONTEXT
    1069                                      .C54CM_off
    1069              ;                       .CPL_off
    1069                                      .ARMS_off
    1069                                      .align 4
    1069              
    1069              ; Restore context & return
    1069                                      ;CONTEXT_RESTORE
    1069              ;                       ASP
    1069              ;                       EALLOW
    1069              ;                       nop
    1069              ;                       nop
    1069              ;                       nop
    1069              ;                       nop
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   21

    1069 000038 4652                          bclr C54CM    
    1069              ;               xssp = dbl(*(#_pxCurrentTCB))
    1069              ;               xsp  = dbl(*(#_pxCurrentTCB))
    1069 00003a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00003c F500 
         00003e 0000!
    1069              
    1069 000040 4EFD                          aadd #-3, sp
    1069              ;            aadd #-3, xsp
    1069              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
    1069              ;            BCC $1,TC1 ; |216|
    1069 000042 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         000044 4F00 
         000046 0000!
    1069 000048 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         00004a 5F00 
         00004c 0000!
    1069              ;            B $4
    1069              ;;;;;                   mov xsp, dbl (*(#_save_xsp))                    ; save xsp
    1069              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
    1069              
    1069              ;                       aadd #-3, sp
    1069              ;$1
    1069              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
    1069              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
    1069              ;$4
    1069                                      .if 1
    1069 00004e 904F                          mov xsp, xar7
    1069 000050 905E                          mov xssp, xar6
    1069 000052 EC31                          amov #0x000000, xar2
         000054 AE00 
         000056 0000 
    1069 000058 EC31                          amov #0x000000, xar1
         00005a 9E00 
         00005c 0000 
    1069 00005e ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                               
         000060 DF00 
         000062 0000!
    1069              
    1069 000064 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         000066 CF   
    1069 000067 EDAD                          mov dbl (*ar5(#2)), xar3                        ; xssp          
         000069 BF00 
         00006b 02   
    1069                                      
    1069 00006c AA81                          mov *ar4, ar2
    1069 00006e A961                          mov *ar3, ar1
    1069              ;                       mov ar4, *ar6                           ; stack pointers fixed up
    1069 000070 CAE1                          mov ar2, *ar7
    1069 000072 C9C1                          mov ar1, *ar6   
    1069              
    1069 000074 AF06                          mov mmap(ST1_55), ar7
         000076 98   
    1069 000077 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         000079 FFFF 
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   22

    1069 00007b CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
    1069 00007d CF8D                          mov ar7, *ar4(#1)                       ; save in TCB
         00007f 0001 
    1069 000081 AF96                          mov mmap(ST2_55), ar7
         000083 98   
    1069 000084 CF04                          mov ar7, *sp(#2)
    1069 000086 CF8D                          mov ar7, *ar4(#2)
         000088 0002 
    1069              
    1069 00008a 449F                          mov ssp, ar7
    1069 00008c AE04                          mov mmap(ST0_55), ar6
         00008e 98   
    1069 00008f CEED                          mov ar6, *ar7(#2)
         000091 0002 
    1069 000093 CE6D                          mov ar6, *ar3(#2)
         000095 0002 
    1069                                      
    1069                                      .endif
    1069              
    1069              ;                       mov #0, ssp     
    1069              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
    1069              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
    1069                                      ; 32-bit mode - will act on SP and SSP:
    1069              ;                       'fix-up' current SP and SSP - is this dangerous????
    1069              ;                       aadd #-3, sp
    1069              ;;                      mov *ar7, *sp
    1069              ;                       mov dbl (*ar7), ar6
    1069              ;                       mov ar6, *sp                            ; xsp contains our TCB now
    1069              ;                       mov *ar7(#2), *ssp                      
    1069              ;                       POP mmap(ST3_55)
    1069              ;                       pshboth xar7                            ; should increment both
    1069                                      .if 0
    1069                                      mov mmap(ST1_55), ar7
    1069                                      and #0xf7ff, ar7                        ; <here>#0800h
    1069                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
    1069                                      mov mmap(ST2_55), ar7
    1069                                      mov ar7, *sp(#2)
    1069              
    1069                                      mov ssp, ar7
    1069                                      mov mmap(ST0_55), ar6
    1069                                      mov ar6, *ar7(#2)
    1069                                      .endif
    1069              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
    1069              ;;                      mov ar6, *ar7(#1)
    1069              
    1069                                      .if 0
    1069                                      mov dbl (*(#_pxCurrentTCB)), xar7
    1069              
    1069                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1069                                      mov dbl (*ar7(#2)), xssp        
    1069                                      .endif
    1069              
    1069                                      .if 0                                           ; first task - no pxcode update
    1069                                          mov dbl (*(_xCompareTCB)), xar6
    1069              ; need to restore our return address
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   23

    1069                                          mov xar7, ac0
    1069                                          mov xar6, ac1
    1069                                          CMPU AC1 != AC0, TC1 ; |1393|
    1069                                          BCC $7,TC1 ; |1393|
    1069                                          amov #0x000000, xar7
    1069                                          amov #0x000000, xar6
    1069                                          mov  *(#_save_new_pxcode), ar7
    1069                                          mov ar7, *sp(#0)
    1069                                          mov *(#_save_new_pxlcode) , ar7
    1069                                          mov ssp, ar6
    1069                                          mov ar7, *ar6(#0)
    1069              
    1069                                          mov dbl (*(#_save_xar6)), xar6
    1069                                          .endif
    1069 000097       $7_$1$:
    1069              
    1069              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
    1069              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
    1069                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
    1069                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
    1069                                      mov xar6, dbl (*(#_save_xar6))
    1069              
    1069              ;; this is for debug
    1069                                      mov dbl(*ar7), xar6
    1069                                      mov dbl(*ar6), xar7
    1069                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
    1069                                      mov xssp, xar7
    1069                                      mov dbl(*ar7), xar6
    1069                                      mov dbl(*ar6), xar7
    1069                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
    1069                                      mov xssp, xar7
    1069                                      add #-2, ar7
    1069                                      mov dbl(*ar7), xar6
    1069                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
    1069                                      mov dbl (*(#_save_xar6)), xar6
    1069                                      
    1069                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
    1069                                      .endif
    1069              
    1069              ;                       mov mmap(ST0_55), *ssp(#1)
    1069              ;                       mov mmap(STO_55), *ssp(#2)
    1069              ;                       mov mmap(ST1_55), *sp(#1)
    1069              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
    1069              ;                       mov *ar7, t0
    1069              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
    1069              ;                       mov *ar7(#2), t0
    1069              ;                       mov t0, *ssp(#0)                        
    1069              
    1069              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
    1069              ; what about xssp?
    1069              ;                       mov xar6, xsp
    1069              ;                       mov xssp, xar7
    1069              ;                       add #1, ar7
    1069              ;                       mov xar7, xsp
    1069              ;                       mov sp, t0
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   24

    1069              ;                       mov ssp, t1
    1069              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
    1069              ;                       ar0 = *ar6
    1069              ;                       xssp = xar0
    1069              ;                       mov *xar6, xar0
    1069              ;                       mov xar0, xssp  ; stack now points to our TCB
    1069              ;;                      mov sp, *ar6
    1069              ;;                      mov sp, ar0
    1069              ;;                      mov sp, *_pxCurrentTCB
    1069              ;;                      clr ar0
    1069              ;;                      mov ar0, @xar6
    1069              ;;                      mov sp, AR0
    1069              ;;                      add sp, xar6
    1069              
    1069              ;;                      pshboth xar7
    1069              ;;                      pshboth xar6
    1069              ;;                      pshboth xar5
    1069              
    1069              ;;                      popboth xar5
    1069              ;;                      popboth xar6
    1069              ;;                      popboth xar7
    1069              
    1069              ;;;                     mov *sp(#1), ar7 
    1069              ;                       mov dbl(*sp(#1)), ar7
    1069              ;;;                     mov  ar7, mmap(ST1_55)
    1069              
    1069 000097 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000099 FF00 
         00009b 0000!
    1069 00009d EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00009f 4F   
    1069 0000a0 EDED                          mov dbl (*ar7(#2)), xssp        
         0000a2 5F00 
         0000a4 02   
    1069                                      .if 0
    1069                                      mov *sp(#2), ar7
    1069                                      mov ar7, mmap(ST2_55)
    1069                                      mov ssp, ar7
    1069                                      mov *ar7(#2), ar6
    1069                                      mov ar6, mmap(ST0_55)
    1069                                      .endif
    1069              ;                       mov *ar7(#2), ar6
    1069              ;                       mov ar6, *ssp(#2)
    1069              ;                       mov *ssp(#2), ar7
    1069              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
    1069              
    1069 0000a5 ED08                          mov dbl(*sp(#4)), xar7
         0000a7 FF   
    1069              ;                       mov *sp(#1), ar7
    1069 0000a8 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0000aa F500 
         0000ac 0000!
    1069              
    1069 0000ae ED0C                          mov dbl(*sp(#6)), xar6
         0000b0 EF   
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   25

    1069              ;                       mov *sp(#3), ar6
    1069              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
    1069 0000b1 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0000b3 E500 
         0000b5 0000!
    1069              
    1069              ;                       POP XT
    1069                              ;-- Comment these to save cycles ---
    1069 0000b7 ED10                          mov dbl(*sp(#8)), xar7
         0000b9 FF   
    1069 0000ba AF0E                          mov *sp(#7), ar7
    1069              ;                       mov *sp(#5), ar7
    1069              ;                       mov dbl(*sp(#0)), hi(ar7)
    1069              ;                       mov (*sp(#0)), lo(ar7)
    1069 0000bc ED14                          mov dbl(*sp(#10)), xar6
         0000be EF   
    1069 0000bf AE12                          mov *sp(#9), ar6
    1069 0000c1 ED18                          mov dbl(*sp(#12)), xar5
         0000c3 DF   
    1069 0000c4 AD16                          mov *sp(#11), ar5
    1069              ;; pvPararmeters currently here - needs to be verified --- jcw
    1069 0000c6 ED1C                          mov dbl(*sp(#14)), xar4
         0000c8 CF   
    1069 0000c9 AC1A                          mov *sp(#13), ar4
    1069 0000cb ED20                          mov dbl(*sp(#16)), xar3
         0000cd BF   
    1069 0000ce AB1E                          mov *sp(#15), ar3
    1069 0000d0 ED24                          mov dbl(*sp(#18)), xar2
         0000d2 AF   
    1069 0000d3 AA22                          mov *sp(#17), ar2
    1069 0000d5 ED28                          mov dbl(*sp(#20)), xar1
         0000d7 9F   
    1069 0000d8 A926                          mov *sp(#19), ar1
    1069 0000da ED2C                          mov dbl(*sp(#22)), xar0
         0000dc 8F   
    1069 0000dd A82A                          mov *sp(#21), ar0
    1069              
    1069 0000df A72E                          mov *sp(#23), t3
    1069 0000e1 A630                          mov *sp(#24), t2
    1069 0000e3 A532                          mov *sp(#25), t1
    1069 0000e5 A434                          mov *sp(#26), t0
    1069              
    1069              ;                       mov dbl(*sp(#21)), *xssp(#0)
    1069              ;                       mov *sp(#21), *ssp
    1069              ;                       mov *sp(#21), RETA
    1069              ; need to move 23-16 to XSSP contents
    1069              ;                       mov xar0, dbl (*(#_save_xar7))
    1069              ;                       mov ssp, ar0
    1069              ;                       mov #0, ssp 
    1069              ;                       mov xssp, xar0
    1069              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
    1069              ;                       aadd #20, sp            ; this is ok - ssp also incremented
    1069                      ;               add #1, xssp            ; 32-bit return address pointer
    1069                      ;               amar *xssp+
    1069              ;                       mov sp, t0
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   26

    1069              ;                       add #1, t0
    1069              ;                       mov t0, ssp
    1069              ;                       incr ssp
    1069              ;                       asub #20, ar0
    1069              ;                       mov xar0, xssp
    1069              ;                       mov ar0, ssp
    1069              ;                       mov ar0, 
    1069              ;;                      mov *sp(#1), t0
    1069              ;;                      mov *sp(#3), t3         ; ST0
    1069              ;;                      mov *sp(#4), t2         ; DBSTAT
    1069              ;;                      mov t3, *ar0(#2)
    1069                      ;;              mov t2, *ar0(#1)
    1069              ;;                      mov t0, *ar0(#0)
    1069              
    1069              ;;                      mov *sp(#5), t0
    1069              ;;                      mov *sp(#6), t1
    1069              ;;                      mov *sp(#7), t2
    1069                      ;;              mov *sp(#8), t3
    1069              
    1069              ; restore ar0
    1069              ;                       mov dbl(*sp(#-2)), xar0
    1069              ;                       mov #-1, ar0
    1069              ;;                      mov dbl (*(#_save_xar7)), xar0
    1069              ;;
    1069              ;;                      mov sp, t0
    1069              ;;                      add #1, t0
    1069              ;;                      mov t0, ssp
    1069              
    1069              ;                       mov *sp(#3), *(#00004ch+#1)
    1069              
    1069              ;                       mov t3, *ssp(#1) 
    1069              ;                       mov t2, *ssp(#2)
    1069              
    1069              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
    1069              ;;                      mov t3, *(ssp(#0))
    1069              ;                       mov t3, *ssp
    1069              ;                       mov *sp(#3), t3 ; 
    1069              ;                       mov t3, *ssp(#1)
    1069              ;;                      mov *sp(#21), PC        
    1069              
    1069              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
    1069              ;                       mov dbl(xsp), dbl(lcrpc)
    1069              ;                       popboth XAR7
    1069              ;                       add #1, sp
    1069              ;                       add #1, ssp
    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069              ;                       popboth XAR6
    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069              ;                       popboth XAR5
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   27

    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069                              ;-----------------------------------
    1069              ;                       popboth XAR4
    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069              ;                       popboth XAR3
    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069              ;                       popboth XAR2
    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069              ;                       popboth XAR1
    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069              ;                       popboth XAR0
    1069              ;                       add #2, t0
    1069              ;                       add #2, t1
    1069              ;                       mov t0, sp
    1069              ;                       mov t1, ssp
    1069              ;                       EDIS
    1069              ;                       NASP    ; Un-align stack pointer
    1069              ;;                      pop mmap(ST3_55)
    1069              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
    1069              ;            BCC $2,TC1 ; |216|
    1069                                      .if 0
    1069                                      mov dbl (*(#_pxCurrentTCB)), xar7
    1069              
    1069                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1069                                      mov dbl (*ar7(#2)), xssp                
    1069                                      .endif
    1069              
    1069 0000e7 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         0000e9 4F00 
         0000eb 0000!
    1069 0000ed ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         0000ef 5F00 
         0000f1 0000!
    1069              
    1069                                      .if 0
    1069                                      mov dbl (*(_xCompareTCB)), xar6
    1069              ; need to restore our return address
    1069                                      mov xar7, ac0
    1069                          mov xar6, ac1
    1069                              CMPU AC1 != AC0, TC1 ; |1393|
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   28

    1069                          BCC $6,TC1 ; |1393|
    1069                          amov #0x000000, xar7
    1069                                      amov #0x000000, xar6
    1069                          mov  *(#_save_new_pxcode), ar7
    1069                                      mov ar7, *sp(#0)
    1069                          mov *(#_save_new_pxlcode) , ar7
    1069                          mov ssp, ar6
    1069                          mov ar7, *ar6(#0)
    1069              
    1069                          mov dbl (*(#_save_xar6)), xar6
    1069                                      .endif
    1069              
    1069 0000f3 ED31                          mov dbl (*(#_save_xar7)), xar7
         0000f5 FF00 
         0000f7 0000!
    1069              
    1069              ;                       B $3
    1069              ;$2
    1069              ;            MOV #0, *(#_first_flag) ; |217|
    1069              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
    1069              ;                       mov dbl (*(#_first_save_xssp)), xssp
    1069              ;$3
    1069              ;                       aadd #-3, sp
    1069 0000f9 46B2                          bclr INTM               ; enable interrupts
    1069              ;                       aadd #1, sp
    1069 0000fb 4805                          RETI
    1069              ;                       mov #1860h, ssp
    1069 0000fd 20                            nop
    1069 0000fe 20                            nop
    1069              ;                       nop
    1070              
    1071              
    1072 0000ff       _vTickISR:              ; the timer ISR is aggregated for this processor architecture
    1073               ;               bclr IFR0.IF4          ; enable interrupts
    1074              
    1075 0000ff 4EFF                  aadd #-1, sp                                            ;; in our current stack mode - this d
    1076 000101 E651                  MOV #0, *port(#6166) ; |119|
         000103 0018 
         000105 16   
    1077 000106 F402                  AND #0x0010, mmap(@IFR0)
         000108 0010 
         00010a 98   
    1078 00010b 46B3                  bset INTM
    1079              ;           MOV *port(#7188), AR1 ; |68|                ;; TIMER0 is only timer that is active
    1080              ;        BSET @#0, AR1 ; |68|
    1081              ;        BCC $1,AR1 == #0 ; |68|
    1082              ;        AND #0x0010, *(#1)
    1083              
    1084              ;               bset INTM               ; disable interrupts
    1085                              .if configUSE_TICK_CTR == 1
    1086 00010d F731                  add #1, *(#_tickIRQctr)
         00010f 0001 
         000111 0000 
         000113 00!  
    1087                              .endif
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   29

    1088              ;;              psh mmap(ST3_55)
    1089 000114 EB31                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
         000116 F500 
         000118 0000!
    1090 00011a EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save x
         00011c E500 
         00011e 0000!
    1091 000120 EC31                                                  amov #0x000000, xar7
         000122 FE00 
         000124 0000 
    1092 000126 EC31                                                  amov #0x000000, xar6
         000128 EE00 
         00012a 0000 
    1093 00012c AF02                          mov *sp(#1), ar7                                            ;; sp+3
    1094 00012e CF31                          mov ar7, *(#_save_new_pxcode)
         000130 0000 
         000132 00!  
    1095 000133 449E                          mov ssp, ar6
    1096 000135 AFCD                          mov *ar6(#1), ar7                                                       ;; ssp+3
         000137 0001 
    1097 000139 CF31                          mov ar7, *(#_save_new_pxlcode)       ;  ==> now we have our new return address, and i
         00013b 0000 
         00013d 00!  
    1098                                   ;   nop
    1099 00013e ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000140 FF00 
         000142 0000!
    1100 000144 EB31                          mov xar7, dbl(*(#_xCompareTCB))
         000146 F500 
         000148 0000!
    1101 00014a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00014c FF00 
         00014e 0000!
    1102 000150 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000152 EF00 
         000154 0000!
    1103              
    1104 ****** MACRO         portSAVE_CONTEXT
    1104              ;                       ;CONTEXT_SAVE
    1104              ;                       ASP  ; Align Stack Pointer
    1104              ;                       CLRC       OVM,PAGE0
    1104              ;                       CLRC       AMODE
    1104              ;                       EALLOW
    1104              
    1104 000156 4652                          bclr C54CM      ; temp - until we figure out what is setting this
    1104              
    1104 000158 46B3                          bset INTM               ; disable interrupts
    1104              
    1104              ;;                      mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
    1104              ;;                      mov xssp, dbl (*(#_save_xssp))                  ; save xssp
    1104              
    1104              ;;                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
    1104              ;;                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***       
    1104                              
    1104              ;                       pshboth xar7
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   30

    1104              ;                       pshboth xar6
    1104              ;                       pshboth xar5
    1104              
    1104 00015a EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         00015c F500 
         00015e 0000!
    1104              ;                       .if configUSE_CONTEXT_DEBUG == 1
    1104 000160 EB31                          mov xar6, dbl (*(#_save_xar6))
         000162 E500 
         000164 0000!
    1104              ;                       .endif
    1104              
    1104 000166 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000168 FF00 
         00016a 0000!
    1104              ; does this *always* work?
    1104 00016c EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00016e 4F   
    1104 00016f EDED                          mov dbl (*ar7(#2)), xssp
         000171 5F00 
         000173 02   
    1104                                      .if 0
    1104                                      mov dbl (*(_xCompareTCB)), xar6                 ; need to restore our return address
    1104                                      mov xar7, ac0
    1104                                      mov xar6, ac1
    1104                                      CMPU AC1 != AC0, TC1 
    1104                                      BCC $5,TC1 
    1104                                      amov #0x000000, xar7
    1104                                      amov #0x000000, xar6
    1104                                          mov  *(#_save_new_pxcode), ar7
    1104                                          mov ar7, *sp(#0)
    1104                                          mov *(#_save_new_pxlcode) , ar7
    1104                                          mov ssp, ar6
    1104                                          mov ar7, *ar6(#0)
    1104                                          mov dbl (*(#_save_xar6)), xar6
    1104                                      .endif
    1104 000174       $5_$2$:
    1104              ;; what about xssp here?
    1104              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
    1104              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
    1104                                 .if configUSE_CONTEXT_DEBUG == 1
    1104              ;; save current PC (and possible loop bits values)
    1104              ;; for debug - to see if this is being corrupted
    1104                                      mov dbl(*ar7), xar6
    1104                                      mov dbl(*ar6), xar7
    1104                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
    1104                                      mov xssp, xar7
    1104                                      mov dbl(*ar7), xar6
    1104                                      mov dbl(*ar6), xar7
    1104                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
    1104                                      mov xssp, xar7
    1104                                      add #-2, ar7
    1104                                      mov dbl(*ar7), xar6
    1104                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
    1104                          mov dbl (*(#_save_xar6)), xar6
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   31

    1104              
    1104              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
    1104              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
    1104              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
    1104                                      .endif
    1104                                      ; save context in our stack(s) frame
    1104 000174 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000176 FF00 
         000178 0000!
    1104 00017a EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00017c 4F   
    1104 00017d EDED                          mov dbl (*ar7(#2)), xssp
         00017f 5F00 
         000181 02   
    1104              
    1104 000182 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000184 FF00 
         000186 0000!
    1104              
    1104 000188 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         00018a F5   
    1104 00018b CF0E                          mov ar7, *sp(#7)
    1104              
    1104 00018d EB14                          mov xar6, dbl(*sp(#10))
         00018f E5   
    1104 000190 CE12                          mov ar6, *sp(#9)
    1104              
    1104 000192 EB18                          mov xar5, dbl(*sp(#12))
         000194 D5   
    1104 000195 CD16                          mov ar5, *sp(#11)
    1104              
    1104 000197 EB1C                          mov xar4, dbl(*sp(#14))
         000199 C5   
    1104 00019a CC1A                          mov ar4, *sp(#13)
    1104              
    1104 00019c EB20                          mov xar3, dbl(*sp(#16))
         00019e B5   
    1104 00019f CB1E                          mov ar3, *sp(#15)
    1104              
    1104 0001a1 EB24                          mov xar2, dbl(*sp(#18))
         0001a3 A5   
    1104 0001a4 CA22                          mov ar2, *sp(#17)
    1104              
    1104 0001a6 EB28                          mov xar1, dbl(*sp(#20))
         0001a8 95   
    1104 0001a9 C926                          mov ar1, *sp(#19)
    1104              
    1104 0001ab EB2C                          mov xar0, dbl(*sp(#22))
         0001ad 85   
    1104 0001ae C82A                          mov ar0, *sp(#21)
    1104              
    1104 0001b0 C72E                          mov t3, *sp(#23)
    1104 0001b2 C630                          mov t2, *sp(#24)
    1104 0001b4 C532                          mov t1, *sp(#25)
    1104 0001b6 C434                          mov t0, *sp(#26)
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   32

    1104              
    1104              ;;                      mov mmap(ST0_55), t0
    1104              ; - this is ok - we are not pushing - it's a relative stack frame
    1104              ;                       mov t0, *sp(#25)
    1104              ;;                      mov t0, *sp(#23)
    1104              ;;                      mov mmap(ST1_55), t1
    1104              ;                       mov t1, *sp(#26)                ; stomping on own mem
    1104              ;;                      mov t1, *sp(#21)                ; stomping on own mem
    1104              ;;                      mov mmap(ST2_55), t2
    1104              ;;                      mov t2, *sp(#22)
    1104              ;                       mov t2, *sp(#27)
    1104              ;;                      mov mmap(ST2_55), t3
    1104              ;                       mov t3, *sp(#28)
    1104              ;;                      mov t3, *sp(#24)
    1104              
    1104              ;                       PSH dbl(AR0) ; 32-bit
    1104              ;                       PSH dbl(AR1) 
    1104              ;                       PSH dbl(AR2) ; 32-bit
    1104              ;                       PUSH XAR3 ; 32-bit
    1104              ;                       PUSH XAR4 ; 32-bit
    1104                              ;-- Comment these to save cycles --------
    1104              ;                       PUSH XAR5 ; 32-bit
    1104              ;                       PUSH XAR6 ; 32-bit
    1104              ;                       PUSH XAR7 ; 32-bit
    1104                              ;----------------------------------------
    1104              
    1104              ;                       PUSH XT   ; 32-bit
    1104              
    1104              ;                       movl xar6, @_portFLAGS_INT_ENABLED
    1104              ;                       push xar6 ; portFLAGS_INT_ENABLED
    1104              
    1104 0001b8 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0001ba EF00 
         0001bc 0000!
    1104 0001be EB0C                          mov xar6, dbl(*sp(#6))
         0001c0 E5   
    1104                                      
    1104              
    1104              ;                       movl xar7, @_usCriticalNesting
    1104              ;                       push xar7
    1104 0001c1 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0001c3 FF00 
         0001c5 0000!
    1104 0001c7 EB08                          mov xar7, dbl(*sp(#4))
         0001c9 F5   
    1104              
    1104 0001ca AF06                          mov mmap(ST1_55), ar7
         0001cc 98   
    1104 0001cd CF02                          mov ar7, *sp(#1)
    1104 0001cf AF96                          mov  mmap(ST2_55), ar7
         0001d1 98   
    1104 0001d2 CF04                          mov ar7, *sp(#2)
    1104              
    1104 0001d4 449F                          mov ssp, ar7
    1104 0001d6 AE04                          mov mmap(ST0_55), ar6
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   33

         0001d8 98   
    1104 0001d9 CEED                          mov ar6, *ar7(#2)
         0001db 0002 
    1104              
    1104              ;                       mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
    1104              ;                       mov dbl (*(#_save_xssp)), xssp          
    1104              
    1104              
    1104              
    1104              
    1104              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
    1104              ;;;                     mov ar6, *ar7(#2)
    1104              ;                       mov ar7, mmap(ST0_55)
    1104              ;                       mov *ssp(#2), ar7
    1104              
    1104              ; fix up
    1104              ;                       aadd #20, sp
    1104              ;                       mov sp, t0
    1104              ;                       sub #1, t0
    1104              ;                       mov t0, ssp
    1104              
    1104                                      ; move contents of SP into address of current TCB
    1104              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
    1104              
    1104              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
    1104              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
    1104              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1104              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1104              ;                       mov dbl (*ar7+), xssp
    1104              
    1104              ;                       mov sp, t0              ; we've already saved t0
    1104              ;                       add #1, t0
    1104              ;                       mov t0, ssp
    1104              ; ??
    1104              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
    1104              
    1104              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
    1104              ;                       mov al, @sp
    1104              ;                       movl  *xar6, acc        
    1104              ;;                      mov  ar0, @sp
    1104              ;;                      mov  @ar6, alxd
    1104              ;;                      mov  ar0, @sp
    1104              ;;                      movl 0(xar6), sp
    1104              ;                       EDIS
    1104              ;                       NASP
    1104              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
    1104              ;                       NOP
    1104 0001dd ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
         0001df 4F00 
         0001e1 0000!
    1104 0001e3 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0001e5 5F00 
         0001e7 0000!
    1104 0001e9 20                            nop
    1104 0001ea 20                            nop
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   34

    1104 0001eb 20                            nop
    1105              
    1106 0001ec 6C00          call     #_xTaskIncrementTick
         0001ee 0000!
    1107              
    1108                      .if configUSE_PREEMPTION == 1
    1109              ;        mov xsp, dbl (*(#_save_xsp))                   ; save xsp
    1110              ;           mov xssp, dbl (*(#_save_xssp))                      ; save xssp
    1111 0001f0 6C00          call    #_vTaskSwitchContext
         0001f2 0000!
    1112                      .endif
    1113              ;$1:
    1114              ;               bclr INTM
    1115 0001f4 E651                  mov #1, *port(#6166) ; |127|
         0001f6 0118 
         0001f8 16   
    1116              ;               MOV #0, *port(#6294) ; |92|
    1117 0001f9 F551                  or #0x0001, *port(#7188) ; |130|
         0001fb 0001 
         0001fd 1C14 
    1118               ;       OR #0x0007, *port(#7188) ; |100|
    1119 0001ff 4E01              aadd #1, sp
    1120 ****** MACRO         portRESTORE_CONTEXT
    1120                                      .C54CM_off
    1120              ;                       .CPL_off
    1120                                      .ARMS_off
    1120                                      .align 4
    1120              
    1120              ; Restore context & return
    1120                                      ;CONTEXT_RESTORE
    1120              ;                       ASP
    1120              ;                       EALLOW
    1120              ;                       nop
    1120              ;                       nop
    1120              ;                       nop
    1120              ;                       nop
    1120 000204 4652                          bclr C54CM    
    1120              ;               xssp = dbl(*(#_pxCurrentTCB))
    1120              ;               xsp  = dbl(*(#_pxCurrentTCB))
    1120 000206 EB31                          mov xar7, dbl (*(#_save_xar7))  
         000208 F500 
         00020a 0000!
    1120              
    1120 00020c 4EFD                          aadd #-3, sp
    1120              ;            aadd #-3, xsp
    1120              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
    1120              ;            BCC $1,TC1 ; |216|
    1120 00020e ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         000210 4F00 
         000212 0000!
    1120 000214 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         000216 5F00 
         000218 0000!
    1120              ;            B $4
    1120              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   35

    1120              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
    1120              
    1120              ;                       aadd #-3, sp
    1120              ;$1
    1120              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
    1120              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
    1120              ;$4
    1120                                      .if 1
    1120 00021a 904F                          mov xsp, xar7
    1120 00021c 905E                          mov xssp, xar6
    1120 00021e EC31                          amov #0x000000, xar2
         000220 AE00 
         000222 0000 
    1120 000224 EC31                          amov #0x000000, xar1
         000226 9E00 
         000228 0000 
    1120 00022a ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         00022c DF00 
         00022e 0000!
    1120              
    1120 000230 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         000232 CF   
    1120 000233 EDAD                          mov dbl (*ar5(#2)), xar3                        
         000235 BF00 
         000237 02   
    1120                                      
    1120 000238 AA81                          mov *ar4, ar2
    1120 00023a A961                          mov *ar3, ar1
    1120              ;                       mov ar4, *ar6                           ; stack pointers fixed up
    1120 00023c CAE1                          mov ar2, *ar7
    1120 00023e C9C1                          mov ar1, *ar6
    1120              
    1120 000240 AF06                          mov mmap(ST1_55), ar7
         000242 98   
    1120 000243 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         000245 FFFF 
    1120 000247 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
    1120 000249 CF8D                          mov ar7, *ar4(#1)                       ; save in TCB
         00024b 0001 
    1120 00024d AF96                          mov mmap(ST2_55), ar7
         00024f 98   
    1120 000250 CF04                          mov ar7, *sp(#2)
    1120 000252 CF8D                          mov ar7, *ar4(#2)
         000254 0002 
    1120              
    1120 000256 449F                          mov ssp, ar7
    1120 000258 AE04                          mov mmap(ST0_55), ar6
         00025a 98   
    1120 00025b CEED                          mov ar6, *ar7(#2)
         00025d 0002 
    1120 00025f CE6D                          mov ar6, *ar3(#2)
         000261 0002 
    1120              
    1120                                      .endif
    1120              
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   36

    1120              ;                       mov #0, ssp     
    1120              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
    1120              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
    1120                                      ; 32-bit mode - will act on SP and SSP:
    1120              ;                       'fix-up' current SP and SSP - is this dangerous????
    1120              ;                       aadd #-3, sp
    1120              ;;                      mov *ar7, *sp
    1120              ;                       mov dbl (*ar7), ar6
    1120              ;                       mov ar6, *sp                            ; xsp contains our TCB now
    1120              ;                       mov *ar7(#2), *ssp                      
    1120              ;                       POP mmap(ST3_55)
    1120              ;                       pshboth xar7                            ; should increment both
    1120                                      .if 0
    1120                                      mov mmap(ST1_55), ar7
    1120                                      and #0xf7ff, ar7                        ; <here>#0800h
    1120                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
    1120                                      mov mmap(ST2_55), ar7
    1120                                      mov ar7, *sp(#2)
    1120              
    1120                                      mov ssp, ar7
    1120                                      mov mmap(ST0_55), ar6
    1120                                      mov ar6, *ar7(#2)
    1120              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
    1120              ;;                      mov ar6, *ar7(#1)
    1120                                      .endif
    1120                                      .if 0
    1120                                      mov dbl (*(#_pxCurrentTCB)), xar7
    1120              
    1120                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1120                                      mov dbl (*ar7(#2)), xssp        
    1120                                      .endif
    1120                                      .if 0
    1120                                      mov dbl (*(_xCompareTCB)), xar6
    1120              ; need to restore our return address
    1120                                      mov xar7, ac0
    1120                                          mov xar6, ac1
    1120                                          CMPU AC1 != AC0, TC1 ; |1393|
    1120                                          BCC $6,TC1 ; |1393|
    1120                                          amov #0x000000, xar7
    1120                                          amov #0x000000, xar6
    1120                                          mov  *(#_save_new_pxcode), ar7
    1120                                          mov ar7, *sp(#0)
    1120                                          mov *(#_save_new_pxlcode) , ar7
    1120                                          mov ssp, ar6
    1120                                          mov ar7, *ar6(#0)
    1120              
    1120                                          mov dbl (*(#_save_xar6)), xar6
    1120                                                              .endif
    1120 000263       $6_$3$:
    1120              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
    1120              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
    1120                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
    1120                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
    1120                                      mov xar6, dbl (*(#_save_xar6))
    1120              
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   37

    1120              ;; this is for debug
    1120                                      mov dbl(*ar7), xar6
    1120                                      mov dbl(*ar6), xar7
    1120                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
    1120                                      mov xssp, xar7
    1120                                      mov dbl(*ar7), xar6
    1120                                      mov dbl(*ar6), xar7
    1120                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
    1120                                      mov xssp, xar7
    1120                                      add #-2, ar7
    1120                                      mov dbl(*ar7), xar6
    1120                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
    1120                                      mov dbl (*(#_save_xar6)), xar6
    1120                                      
    1120                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
    1120                                      .endif
    1120              
    1120              ;                       mov mmap(ST0_55), *ssp(#1)
    1120              ;                       mov mmap(STO_55), *ssp(#2)
    1120              ;                       mov mmap(ST1_55), *sp(#1)
    1120              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
    1120              ;                       mov *ar7, t0
    1120              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
    1120              ;                       mov *ar7(#2), t0
    1120              ;                       mov t0, *ssp(#0)                        
    1120              
    1120              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
    1120              ; what about xssp?
    1120              ;                       mov xar6, xsp
    1120              ;                       mov xssp, xar7
    1120              ;                       add #1, ar7
    1120              ;                       mov xar7, xsp
    1120              ;                       mov sp, t0
    1120              ;                       mov ssp, t1
    1120              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
    1120              ;                       ar0 = *ar6
    1120              ;                       xssp = xar0
    1120              ;                       mov *xar6, xar0
    1120              ;                       mov xar0, xssp  ; stack now points to our TCB
    1120              ;;                      mov sp, *ar6
    1120              ;;                      mov sp, ar0
    1120              ;;                      mov sp, *_pxCurrentTCB
    1120              ;;                      clr ar0
    1120              ;;                      mov ar0, @xar6
    1120              ;;                      mov sp, AR0
    1120              ;;                      add sp, xar6
    1120              
    1120              ;;                      pshboth xar7
    1120              ;;                      pshboth xar6
    1120              ;;                      pshboth xar5
    1120              
    1120              ;;                      popboth xar5
    1120              ;;                      popboth xar6
    1120              ;;                      popboth xar7
    1120              
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   38

    1120              ;;;                     mov *sp(#1), ar7 
    1120              ;                       mov dbl(*sp(#1)), ar7
    1120              ;;;                     mov  ar7, mmap(ST1_55)
    1120 000263 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000265 FF00 
         000267 0000!
    1120 000269 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00026b 4F   
    1120 00026c EDED                          mov dbl (*ar7(#2)), xssp        
         00026e 5F00 
         000270 02   
    1120                                      .if 0
    1120                                      mov *sp(#2), ar7
    1120                                      mov ar7, mmap(ST2_55)
    1120                                      mov ssp, ar7
    1120                                      mov *ar7(#2), ar6
    1120                                      mov ar6, mmap(ST0_55)
    1120                                      .endif
    1120              ;                       mov *ar7(#2), ar6
    1120              ;                       mov ar6, *ssp(#2)
    1120              ;                       mov *ssp(#2), ar7
    1120              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
    1120              
    1120 000271 ED08                          mov dbl(*sp(#4)), xar7
         000273 FF   
    1120              ;                       mov *sp(#1), ar7
    1120 000274 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000276 F500 
         000278 0000!
    1120              
    1120 00027a ED0C                          mov dbl(*sp(#6)), xar6
         00027c EF   
    1120              ;                       mov *sp(#3), ar6
    1120              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
    1120 00027d EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         00027f E500 
         000281 0000!
    1120              
    1120              ;                       POP XT
    1120                              ;-- Comment these to save cycles ---
    1120 000283 ED10                          mov dbl(*sp(#8)), xar7
         000285 FF   
    1120 000286 AF0E                          mov *sp(#7), ar7
    1120              ;                       mov *sp(#5), ar7
    1120              ;                       mov dbl(*sp(#0)), hi(ar7)
    1120              ;                       mov (*sp(#0)), lo(ar7)
    1120 000288 ED14                          mov dbl(*sp(#10)), xar6
         00028a EF   
    1120 00028b AE12                          mov *sp(#9), ar6
    1120 00028d ED18                          mov dbl(*sp(#12)), xar5
         00028f DF   
    1120 000290 AD16                          mov *sp(#11), ar5
    1120              ;; pvPararmeters currently here - needs to be verified --- jcw
    1120 000292 ED1C                          mov dbl(*sp(#14)), xar4
         000294 CF   
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   39

    1120 000295 AC1A                          mov *sp(#13), ar4
    1120 000297 ED20                          mov dbl(*sp(#16)), xar3
         000299 BF   
    1120 00029a AB1E                          mov *sp(#15), ar3
    1120 00029c ED24                          mov dbl(*sp(#18)), xar2
         00029e AF   
    1120 00029f AA22                          mov *sp(#17), ar2
    1120 0002a1 ED28                          mov dbl(*sp(#20)), xar1
         0002a3 9F   
    1120 0002a4 A926                          mov *sp(#19), ar1
    1120 0002a6 ED2C                          mov dbl(*sp(#22)), xar0
         0002a8 8F   
    1120 0002a9 A82A                          mov *sp(#21), ar0
    1120              
    1120 0002ab A72E                          mov *sp(#23), t3
    1120 0002ad A630                          mov *sp(#24), t2
    1120 0002af A532                          mov *sp(#25), t1
    1120 0002b1 A434                          mov *sp(#26), t0
    1120              
    1120              ;                       mov dbl(*sp(#21)), *xssp(#0)
    1120              ;                       mov *sp(#21), *ssp
    1120              ;                       mov *sp(#21), RETA
    1120              ; need to move 23-16 to XSSP contents
    1120              ;                       mov xar0, dbl (*(#_save_xar7))
    1120              ;                       mov ssp, ar0
    1120              ;                       mov #0, ssp 
    1120              ;                       mov xssp, xar0
    1120              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
    1120              ;                       aadd #20, sp            ; this is ok - ssp also incremented
    1120                      ;               add #1, xssp            ; 32-bit return address pointer
    1120                      ;               amar *xssp+
    1120              ;                       mov sp, t0
    1120              ;                       add #1, t0
    1120              ;                       mov t0, ssp
    1120              ;                       incr ssp
    1120              ;                       asub #20, ar0
    1120              ;                       mov xar0, xssp
    1120              ;                       mov ar0, ssp
    1120              ;                       mov ar0, 
    1120              ;;                      mov *sp(#1), t0
    1120              ;;                      mov *sp(#3), t3         ; ST0
    1120              ;;                      mov *sp(#4), t2         ; DBSTAT
    1120              ;;                      mov t3, *ar0(#2)
    1120                      ;;              mov t2, *ar0(#1)
    1120              ;;                      mov t0, *ar0(#0)
    1120              
    1120              ;;                      mov *sp(#5), t0
    1120              ;;                      mov *sp(#6), t1
    1120              ;;                      mov *sp(#7), t2
    1120                      ;;              mov *sp(#8), t3
    1120              
    1120              ; restore ar0
    1120              ;                       mov dbl(*sp(#-2)), xar0
    1120              ;                       mov #-1, ar0
    1120              ;;                      mov dbl (*(#_save_xar7)), xar0
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   40

    1120              ;;
    1120              ;;                      mov sp, t0
    1120              ;;                      add #1, t0
    1120              ;;                      mov t0, ssp
    1120              
    1120              ;                       mov *sp(#3), *(#00004ch+#1)
    1120              
    1120              ;                       mov t3, *ssp(#1) 
    1120              ;                       mov t2, *ssp(#2)
    1120              
    1120              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
    1120              ;;                      mov t3, *(ssp(#0))
    1120              ;                       mov t3, *ssp
    1120              ;                       mov *sp(#3), t3 ; 
    1120              ;                       mov t3, *ssp(#1)
    1120              ;;                      mov *sp(#21), PC        
    1120              
    1120              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
    1120              ;                       mov dbl(xsp), dbl(lcrpc)
    1120              ;                       popboth XAR7
    1120              ;                       add #1, sp
    1120              ;                       add #1, ssp
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120              ;                       popboth XAR6
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120              ;                       popboth XAR5
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120                              ;-----------------------------------
    1120              ;                       popboth XAR4
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120              ;                       popboth XAR3
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120              ;                       popboth XAR2
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120              ;                       popboth XAR1
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   41

    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120              ;                       popboth XAR0
    1120              ;                       add #2, t0
    1120              ;                       add #2, t1
    1120              ;                       mov t0, sp
    1120              ;                       mov t1, ssp
    1120              ;                       EDIS
    1120              ;                       NASP    ; Un-align stack pointer
    1120              ;;                      pop mmap(ST3_55)
    1120              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
    1120              ;            BCC $2,TC1 ; |216|
    1120                                      .if 0
    1120                                      mov dbl (*(#_pxCurrentTCB)), xar7
    1120              
    1120                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1120                                      mov dbl (*ar7(#2)), xssp                
    1120                                      .endif
    1120              
    1120 0002b3 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         0002b5 4F00 
         0002b7 0000!
    1120 0002b9 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         0002bb 5F00 
         0002bd 0000!
    1120              
    1120                                      .if 0
    1120                                      mov dbl (*(_xCompareTCB)), xar6
    1120              ; need to restore our return address
    1120                                      mov xar7, ac0
    1120                          mov xar6, ac1
    1120                              CMPU AC1 != AC0, TC1 ; |1393|
    1120                          BCC $6,TC1 ; |1393|
    1120                          amov #0x000000, xar7
    1120                                      amov #0x000000, xar6
    1120                          mov  *(#_save_new_pxcode), ar7
    1120                                      mov ar7, *sp(#0)
    1120                          mov *(#_save_new_pxlcode) , ar7
    1120                          mov ssp, ar6
    1120                          mov ar7, *ar6(#0)
    1120              
    1120                          mov dbl (*(#_save_xar6)), xar6
    1120                                      .endif
    1120              
    1120 0002bf ED31                          mov dbl (*(#_save_xar7)), xar7
         0002c1 FF00 
         0002c3 0000!
    1120              
    1120              ;                       B $3
    1120              ;$2
    1120              ;            MOV #0, *(#_first_flag) ; |217|
    1120              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
    1120              ;                       mov dbl (*(#_first_save_xssp)), xssp
    1120              ;$3
    1120              ;                       aadd #-3, sp
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   42

    1120 0002c5 46B2                          bclr INTM               ; enable interrupts
    1120              ;                       aadd #1, sp
    1120 0002c7 4805                          RETI
    1120              ;                       mov #1860h, ssp
    1120 0002c9 20                            nop
    1120 0002ca 20                            nop
    1120              ;                       nop
    1121              
    1122              ; /*-----------------------------------------------------------*/
    1123              
    1124              
    1125              ;/*
    1126              ; * Manual context switch called by the portYIELD() macro.
    1127              ; */
    1128              
    1129              ; We are using the slow return model:
    1130              
    1131              ; System Stack (SSP)                    Data Stack (SP)
    1132              ; SSP = x - 3:  (Loop Bits):PC(23-16)   SP = y - 3: PC(15-0)  <<= Last pushed - first to POP
    1133              ; SSP = x - 2:  DBSTAT                  SP = y - 2: ST1_55
    1134              ; SSP = x - 1:  ST0_55                  SP = y - 1: ST2_55
    1135              ; SSP = x:      Previously saved data   SP = y:     Previously saved data
    1136              
    1137              
    1138 0002cb       _vPortYield:                                    ;; note - most testing done with preemptive kernel - so this 
    1139              
    1140 0002cb 4EFF                  aadd #-1, sp
    1141 0002cd F402                  AND #0x0010, mmap(@IFR0)
         0002cf 0010 
         0002d1 98   
    1142              ;                /* Mimic an interrupt by pushing the SR. */
    1143              
    1144              ;               /* SR is 16-bits in 430X architecture */
    1145              
    1146              ;;                pushx.w    SR
    1147              
    1148              ;                /* Now the SR is stacked we can disable interrupts. */
    1149              
    1150              ;                dint
    1151              
    1152 0002d2 46B3                    bset INTM             ; disable interrupts
    1153              
    1154              ;;                bicx.w #0xF000,0(r1)
    1155              ;;                swpbx.w +4(r1)
    1156              ;;                rlax.w +4(r1)
    1157              ;;                rlax.w +4(r1)
    1158              ;;                rlax.w +4(r1)
    1159              ;;                rlax.w +4(r1)
    1160              ;;                addx.w +4(r1),0(r1)
    1161              ;;                movx.w +2(r1),+4(r1)
    1162              ;;                movx.w 0(r1),+2(r1)
    1163              ;;                incdx.a r1
    1164              
    1165              ;                /* Save the context of the current task. */
    1166              ;;        psh mmap(ST3_55)
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   43

    1167 ****** MACRO         portSAVE_CONTEXT
    1167              ;                       ;CONTEXT_SAVE
    1167              ;                       ASP  ; Align Stack Pointer
    1167              ;                       CLRC       OVM,PAGE0
    1167              ;                       CLRC       AMODE
    1167              ;                       EALLOW
    1167              
    1167 0002d4 4652                          bclr C54CM      ; temp - until we figure out what is setting this
    1167              
    1167 0002d6 46B3                          bset INTM               ; disable interrupts
    1167              
    1167              ;;                      mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
    1167              ;;                      mov xssp, dbl (*(#_save_xssp))                  ; save xssp
    1167              
    1167              ;;                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
    1167              ;;                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***       
    1167                              
    1167              ;                       pshboth xar7
    1167              ;                       pshboth xar6
    1167              ;                       pshboth xar5
    1167              
    1167 0002d8 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         0002da F500 
         0002dc 0000!
    1167              ;                       .if configUSE_CONTEXT_DEBUG == 1
    1167 0002de EB31                          mov xar6, dbl (*(#_save_xar6))
         0002e0 E500 
         0002e2 0000!
    1167              ;                       .endif
    1167              
    1167 0002e4 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         0002e6 FF00 
         0002e8 0000!
    1167              ; does this *always* work?
    1167 0002ea EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         0002ec 4F   
    1167 0002ed EDED                          mov dbl (*ar7(#2)), xssp
         0002ef 5F00 
         0002f1 02   
    1167                                      .if 0
    1167                                      mov dbl (*(_xCompareTCB)), xar6                 ; need to restore our return address
    1167                                      mov xar7, ac0
    1167                                      mov xar6, ac1
    1167                                      CMPU AC1 != AC0, TC1 
    1167                                      BCC $5,TC1 
    1167                                      amov #0x000000, xar7
    1167                                      amov #0x000000, xar6
    1167                                          mov  *(#_save_new_pxcode), ar7
    1167                                          mov ar7, *sp(#0)
    1167                                          mov *(#_save_new_pxlcode) , ar7
    1167                                          mov ssp, ar6
    1167                                          mov ar7, *ar6(#0)
    1167                                          mov dbl (*(#_save_xar6)), xar6
    1167                                      .endif
    1167 0002f2       $5_$4$:
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   44

    1167              ;; what about xssp here?
    1167              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
    1167              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
    1167                                 .if configUSE_CONTEXT_DEBUG == 1
    1167              ;; save current PC (and possible loop bits values)
    1167              ;; for debug - to see if this is being corrupted
    1167                                      mov dbl(*ar7), xar6
    1167                                      mov dbl(*ar6), xar7
    1167                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
    1167                                      mov xssp, xar7
    1167                                      mov dbl(*ar7), xar6
    1167                                      mov dbl(*ar6), xar7
    1167                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
    1167                                      mov xssp, xar7
    1167                                      add #-2, ar7
    1167                                      mov dbl(*ar7), xar6
    1167                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
    1167                          mov dbl (*(#_save_xar6)), xar6
    1167              
    1167              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
    1167              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
    1167              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
    1167                                      .endif
    1167                                      ; save context in our stack(s) frame
    1167 0002f2 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         0002f4 FF00 
         0002f6 0000!
    1167 0002f8 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         0002fa 4F   
    1167 0002fb EDED                          mov dbl (*ar7(#2)), xssp
         0002fd 5F00 
         0002ff 02   
    1167              
    1167 000300 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000302 FF00 
         000304 0000!
    1167              
    1167 000306 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         000308 F5   
    1167 000309 CF0E                          mov ar7, *sp(#7)
    1167              
    1167 00030b EB14                          mov xar6, dbl(*sp(#10))
         00030d E5   
    1167 00030e CE12                          mov ar6, *sp(#9)
    1167              
    1167 000310 EB18                          mov xar5, dbl(*sp(#12))
         000312 D5   
    1167 000313 CD16                          mov ar5, *sp(#11)
    1167              
    1167 000315 EB1C                          mov xar4, dbl(*sp(#14))
         000317 C5   
    1167 000318 CC1A                          mov ar4, *sp(#13)
    1167              
    1167 00031a EB20                          mov xar3, dbl(*sp(#16))
         00031c B5   
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   45

    1167 00031d CB1E                          mov ar3, *sp(#15)
    1167              
    1167 00031f EB24                          mov xar2, dbl(*sp(#18))
         000321 A5   
    1167 000322 CA22                          mov ar2, *sp(#17)
    1167              
    1167 000324 EB28                          mov xar1, dbl(*sp(#20))
         000326 95   
    1167 000327 C926                          mov ar1, *sp(#19)
    1167              
    1167 000329 EB2C                          mov xar0, dbl(*sp(#22))
         00032b 85   
    1167 00032c C82A                          mov ar0, *sp(#21)
    1167              
    1167 00032e C72E                          mov t3, *sp(#23)
    1167 000330 C630                          mov t2, *sp(#24)
    1167 000332 C532                          mov t1, *sp(#25)
    1167 000334 C434                          mov t0, *sp(#26)
    1167              
    1167              ;;                      mov mmap(ST0_55), t0
    1167              ; - this is ok - we are not pushing - it's a relative stack frame
    1167              ;                       mov t0, *sp(#25)
    1167              ;;                      mov t0, *sp(#23)
    1167              ;;                      mov mmap(ST1_55), t1
    1167              ;                       mov t1, *sp(#26)                ; stomping on own mem
    1167              ;;                      mov t1, *sp(#21)                ; stomping on own mem
    1167              ;;                      mov mmap(ST2_55), t2
    1167              ;;                      mov t2, *sp(#22)
    1167              ;                       mov t2, *sp(#27)
    1167              ;;                      mov mmap(ST2_55), t3
    1167              ;                       mov t3, *sp(#28)
    1167              ;;                      mov t3, *sp(#24)
    1167              
    1167              ;                       PSH dbl(AR0) ; 32-bit
    1167              ;                       PSH dbl(AR1) 
    1167              ;                       PSH dbl(AR2) ; 32-bit
    1167              ;                       PUSH XAR3 ; 32-bit
    1167              ;                       PUSH XAR4 ; 32-bit
    1167                              ;-- Comment these to save cycles --------
    1167              ;                       PUSH XAR5 ; 32-bit
    1167              ;                       PUSH XAR6 ; 32-bit
    1167              ;                       PUSH XAR7 ; 32-bit
    1167                              ;----------------------------------------
    1167              
    1167              ;                       PUSH XT   ; 32-bit
    1167              
    1167              ;                       movl xar6, @_portFLAGS_INT_ENABLED
    1167              ;                       push xar6 ; portFLAGS_INT_ENABLED
    1167              
    1167 000336 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         000338 EF00 
         00033a 0000!
    1167 00033c EB0C                          mov xar6, dbl(*sp(#6))
         00033e E5   
    1167                                      
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   46

    1167              
    1167              ;                       movl xar7, @_usCriticalNesting
    1167              ;                       push xar7
    1167 00033f ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         000341 FF00 
         000343 0000!
    1167 000345 EB08                          mov xar7, dbl(*sp(#4))
         000347 F5   
    1167              
    1167 000348 AF06                          mov mmap(ST1_55), ar7
         00034a 98   
    1167 00034b CF02                          mov ar7, *sp(#1)
    1167 00034d AF96                          mov  mmap(ST2_55), ar7
         00034f 98   
    1167 000350 CF04                          mov ar7, *sp(#2)
    1167              
    1167 000352 449F                          mov ssp, ar7
    1167 000354 AE04                          mov mmap(ST0_55), ar6
         000356 98   
    1167 000357 CEED                          mov ar6, *ar7(#2)
         000359 0002 
    1167              
    1167              ;                       mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
    1167              ;                       mov dbl (*(#_save_xssp)), xssp          
    1167              
    1167              
    1167              
    1167              
    1167              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
    1167              ;;;                     mov ar6, *ar7(#2)
    1167              ;                       mov ar7, mmap(ST0_55)
    1167              ;                       mov *ssp(#2), ar7
    1167              
    1167              ; fix up
    1167              ;                       aadd #20, sp
    1167              ;                       mov sp, t0
    1167              ;                       sub #1, t0
    1167              ;                       mov t0, ssp
    1167              
    1167                                      ; move contents of SP into address of current TCB
    1167              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
    1167              
    1167              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
    1167              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
    1167              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1167              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1167              ;                       mov dbl (*ar7+), xssp
    1167              
    1167              ;                       mov sp, t0              ; we've already saved t0
    1167              ;                       add #1, t0
    1167              ;                       mov t0, ssp
    1167              ; ??
    1167              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
    1167              
    1167              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   47

    1167              ;                       mov al, @sp
    1167              ;                       movl  *xar6, acc        
    1167              ;;                      mov  ar0, @sp
    1167              ;;                      mov  @ar6, alxd
    1167              ;;                      mov  ar0, @sp
    1167              ;;                      movl 0(xar6), sp
    1167              ;                       EDIS
    1167              ;                       NASP
    1167              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
    1167              ;                       NOP
    1167 00035b ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
         00035d 4F00 
         00035f 0000!
    1167 000361 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000363 5F00 
         000365 0000!
    1167 000367 20                            nop
    1167 000368 20                            nop
    1167 000369 20                            nop
    1168              
    1169              ;        /* Switch to the highest priority task that is ready to run. */
    1170 00036a 6C00          call    #_vTaskSwitchContext
         00036c 0000!
    1171 00036e E651          mov #1, *port(#6166) ; |127|
         000370 0118 
         000372 16   
    1172 000373 F551                  or #0x0001, *port(#7188) ; |130|
         000375 0001 
         000377 1C14 
    1173 000379 4E01                  aadd #1, sp
    1174 ****** MACRO         portRESTORE_CONTEXT
    1174                                      .C54CM_off
    1174              ;                       .CPL_off
    1174                                      .ARMS_off
    1174                                      .align 4
    1174              
    1174              ; Restore context & return
    1174                                      ;CONTEXT_RESTORE
    1174              ;                       ASP
    1174              ;                       EALLOW
    1174              ;                       nop
    1174              ;                       nop
    1174              ;                       nop
    1174              ;                       nop
    1174 00037c 4652                          bclr C54CM    
    1174              ;               xssp = dbl(*(#_pxCurrentTCB))
    1174              ;               xsp  = dbl(*(#_pxCurrentTCB))
    1174 00037e EB31                          mov xar7, dbl (*(#_save_xar7))  
         000380 F500 
         000382 0000!
    1174              
    1174 000384 4EFD                          aadd #-3, sp
    1174              ;            aadd #-3, xsp
    1174              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
    1174              ;            BCC $1,TC1 ; |216|
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   48

    1174 000386 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         000388 4F00 
         00038a 0000!
    1174 00038c ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         00038e 5F00 
         000390 0000!
    1174              ;            B $4
    1174              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
    1174              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
    1174              
    1174              ;                       aadd #-3, sp
    1174              ;$1
    1174              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
    1174              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
    1174              ;$4
    1174                                      .if 1
    1174 000392 904F                          mov xsp, xar7
    1174 000394 905E                          mov xssp, xar6
    1174 000396 EC31                          amov #0x000000, xar2
         000398 AE00 
         00039a 0000 
    1174 00039c EC31                          amov #0x000000, xar1
         00039e 9E00 
         0003a0 0000 
    1174 0003a2 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         0003a4 DF00 
         0003a6 0000!
    1174              
    1174 0003a8 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         0003aa CF   
    1174 0003ab EDAD                          mov dbl (*ar5(#2)), xar3                        
         0003ad BF00 
         0003af 02   
    1174                                      
    1174 0003b0 AA81                          mov *ar4, ar2
    1174 0003b2 A961                          mov *ar3, ar1
    1174              ;                       mov ar4, *ar6                           ; stack pointers fixed up
    1174 0003b4 CAE1                          mov ar2, *ar7
    1174 0003b6 C9C1                          mov ar1, *ar6
    1174              
    1174 0003b8 AF06                          mov mmap(ST1_55), ar7
         0003ba 98   
    1174 0003bb 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         0003bd FFFF 
    1174 0003bf CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
    1174 0003c1 CF8D                          mov ar7, *ar4(#1)                       ; save in TCB
         0003c3 0001 
    1174 0003c5 AF96                          mov mmap(ST2_55), ar7
         0003c7 98   
    1174 0003c8 CF04                          mov ar7, *sp(#2)
    1174 0003ca CF8D                          mov ar7, *ar4(#2)
         0003cc 0002 
    1174              
    1174 0003ce 449F                          mov ssp, ar7
    1174 0003d0 AE04                          mov mmap(ST0_55), ar6
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   49

         0003d2 98   
    1174 0003d3 CEED                          mov ar6, *ar7(#2)
         0003d5 0002 
    1174 0003d7 CE6D                          mov ar6, *ar3(#2)
         0003d9 0002 
    1174              
    1174                                      .endif
    1174              
    1174              ;                       mov #0, ssp     
    1174              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
    1174              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
    1174                                      ; 32-bit mode - will act on SP and SSP:
    1174              ;                       'fix-up' current SP and SSP - is this dangerous????
    1174              ;                       aadd #-3, sp
    1174              ;;                      mov *ar7, *sp
    1174              ;                       mov dbl (*ar7), ar6
    1174              ;                       mov ar6, *sp                            ; xsp contains our TCB now
    1174              ;                       mov *ar7(#2), *ssp                      
    1174              ;                       POP mmap(ST3_55)
    1174              ;                       pshboth xar7                            ; should increment both
    1174                                      .if 0
    1174                                      mov mmap(ST1_55), ar7
    1174                                      and #0xf7ff, ar7                        ; <here>#0800h
    1174                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
    1174                                      mov mmap(ST2_55), ar7
    1174                                      mov ar7, *sp(#2)
    1174              
    1174                                      mov ssp, ar7
    1174                                      mov mmap(ST0_55), ar6
    1174                                      mov ar6, *ar7(#2)
    1174              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
    1174              ;;                      mov ar6, *ar7(#1)
    1174                                      .endif
    1174                                      .if 0
    1174                                      mov dbl (*(#_pxCurrentTCB)), xar7
    1174              
    1174                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1174                                      mov dbl (*ar7(#2)), xssp        
    1174                                      .endif
    1174                                      .if 0
    1174                                      mov dbl (*(_xCompareTCB)), xar6
    1174              ; need to restore our return address
    1174                                      mov xar7, ac0
    1174                                          mov xar6, ac1
    1174                                          CMPU AC1 != AC0, TC1 ; |1393|
    1174                                          BCC $6,TC1 ; |1393|
    1174                                          amov #0x000000, xar7
    1174                                          amov #0x000000, xar6
    1174                                          mov  *(#_save_new_pxcode), ar7
    1174                                          mov ar7, *sp(#0)
    1174                                          mov *(#_save_new_pxlcode) , ar7
    1174                                          mov ssp, ar6
    1174                                          mov ar7, *ar6(#0)
    1174              
    1174                                          mov dbl (*(#_save_xar6)), xar6
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   50

    1174                                                              .endif
    1174 0003db       $6_$5$:
    1174              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
    1174              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
    1174                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
    1174                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
    1174                                      mov xar6, dbl (*(#_save_xar6))
    1174              
    1174              ;; this is for debug
    1174                                      mov dbl(*ar7), xar6
    1174                                      mov dbl(*ar6), xar7
    1174                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
    1174                                      mov xssp, xar7
    1174                                      mov dbl(*ar7), xar6
    1174                                      mov dbl(*ar6), xar7
    1174                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
    1174                                      mov xssp, xar7
    1174                                      add #-2, ar7
    1174                                      mov dbl(*ar7), xar6
    1174                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
    1174                                      mov dbl (*(#_save_xar6)), xar6
    1174                                      
    1174                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
    1174                                      .endif
    1174              
    1174              ;                       mov mmap(ST0_55), *ssp(#1)
    1174              ;                       mov mmap(STO_55), *ssp(#2)
    1174              ;                       mov mmap(ST1_55), *sp(#1)
    1174              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
    1174              ;                       mov *ar7, t0
    1174              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
    1174              ;                       mov *ar7(#2), t0
    1174              ;                       mov t0, *ssp(#0)                        
    1174              
    1174              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
    1174              ; what about xssp?
    1174              ;                       mov xar6, xsp
    1174              ;                       mov xssp, xar7
    1174              ;                       add #1, ar7
    1174              ;                       mov xar7, xsp
    1174              ;                       mov sp, t0
    1174              ;                       mov ssp, t1
    1174              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
    1174              ;                       ar0 = *ar6
    1174              ;                       xssp = xar0
    1174              ;                       mov *xar6, xar0
    1174              ;                       mov xar0, xssp  ; stack now points to our TCB
    1174              ;;                      mov sp, *ar6
    1174              ;;                      mov sp, ar0
    1174              ;;                      mov sp, *_pxCurrentTCB
    1174              ;;                      clr ar0
    1174              ;;                      mov ar0, @xar6
    1174              ;;                      mov sp, AR0
    1174              ;;                      add sp, xar6
    1174              
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   51

    1174              ;;                      pshboth xar7
    1174              ;;                      pshboth xar6
    1174              ;;                      pshboth xar5
    1174              
    1174              ;;                      popboth xar5
    1174              ;;                      popboth xar6
    1174              ;;                      popboth xar7
    1174              
    1174              ;;;                     mov *sp(#1), ar7 
    1174              ;                       mov dbl(*sp(#1)), ar7
    1174              ;;;                     mov  ar7, mmap(ST1_55)
    1174 0003db ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         0003dd FF00 
         0003df 0000!
    1174 0003e1 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         0003e3 4F   
    1174 0003e4 EDED                          mov dbl (*ar7(#2)), xssp        
         0003e6 5F00 
         0003e8 02   
    1174                                      .if 0
    1174                                      mov *sp(#2), ar7
    1174                                      mov ar7, mmap(ST2_55)
    1174                                      mov ssp, ar7
    1174                                      mov *ar7(#2), ar6
    1174                                      mov ar6, mmap(ST0_55)
    1174                                      .endif
    1174              ;                       mov *ar7(#2), ar6
    1174              ;                       mov ar6, *ssp(#2)
    1174              ;                       mov *ssp(#2), ar7
    1174              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
    1174              
    1174 0003e9 ED08                          mov dbl(*sp(#4)), xar7
         0003eb FF   
    1174              ;                       mov *sp(#1), ar7
    1174 0003ec EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0003ee F500 
         0003f0 0000!
    1174              
    1174 0003f2 ED0C                          mov dbl(*sp(#6)), xar6
         0003f4 EF   
    1174              ;                       mov *sp(#3), ar6
    1174              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
    1174 0003f5 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0003f7 E500 
         0003f9 0000!
    1174              
    1174              ;                       POP XT
    1174                              ;-- Comment these to save cycles ---
    1174 0003fb ED10                          mov dbl(*sp(#8)), xar7
         0003fd FF   
    1174 0003fe AF0E                          mov *sp(#7), ar7
    1174              ;                       mov *sp(#5), ar7
    1174              ;                       mov dbl(*sp(#0)), hi(ar7)
    1174              ;                       mov (*sp(#0)), lo(ar7)
    1174 000400 ED14                          mov dbl(*sp(#10)), xar6
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   52

         000402 EF   
    1174 000403 AE12                          mov *sp(#9), ar6
    1174 000405 ED18                          mov dbl(*sp(#12)), xar5
         000407 DF   
    1174 000408 AD16                          mov *sp(#11), ar5
    1174              ;; pvPararmeters currently here - needs to be verified --- jcw
    1174 00040a ED1C                          mov dbl(*sp(#14)), xar4
         00040c CF   
    1174 00040d AC1A                          mov *sp(#13), ar4
    1174 00040f ED20                          mov dbl(*sp(#16)), xar3
         000411 BF   
    1174 000412 AB1E                          mov *sp(#15), ar3
    1174 000414 ED24                          mov dbl(*sp(#18)), xar2
         000416 AF   
    1174 000417 AA22                          mov *sp(#17), ar2
    1174 000419 ED28                          mov dbl(*sp(#20)), xar1
         00041b 9F   
    1174 00041c A926                          mov *sp(#19), ar1
    1174 00041e ED2C                          mov dbl(*sp(#22)), xar0
         000420 8F   
    1174 000421 A82A                          mov *sp(#21), ar0
    1174              
    1174 000423 A72E                          mov *sp(#23), t3
    1174 000425 A630                          mov *sp(#24), t2
    1174 000427 A532                          mov *sp(#25), t1
    1174 000429 A434                          mov *sp(#26), t0
    1174              
    1174              ;                       mov dbl(*sp(#21)), *xssp(#0)
    1174              ;                       mov *sp(#21), *ssp
    1174              ;                       mov *sp(#21), RETA
    1174              ; need to move 23-16 to XSSP contents
    1174              ;                       mov xar0, dbl (*(#_save_xar7))
    1174              ;                       mov ssp, ar0
    1174              ;                       mov #0, ssp 
    1174              ;                       mov xssp, xar0
    1174              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
    1174              ;                       aadd #20, sp            ; this is ok - ssp also incremented
    1174                      ;               add #1, xssp            ; 32-bit return address pointer
    1174                      ;               amar *xssp+
    1174              ;                       mov sp, t0
    1174              ;                       add #1, t0
    1174              ;                       mov t0, ssp
    1174              ;                       incr ssp
    1174              ;                       asub #20, ar0
    1174              ;                       mov xar0, xssp
    1174              ;                       mov ar0, ssp
    1174              ;                       mov ar0, 
    1174              ;;                      mov *sp(#1), t0
    1174              ;;                      mov *sp(#3), t3         ; ST0
    1174              ;;                      mov *sp(#4), t2         ; DBSTAT
    1174              ;;                      mov t3, *ar0(#2)
    1174                      ;;              mov t2, *ar0(#1)
    1174              ;;                      mov t0, *ar0(#0)
    1174              
    1174              ;;                      mov *sp(#5), t0
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   53

    1174              ;;                      mov *sp(#6), t1
    1174              ;;                      mov *sp(#7), t2
    1174                      ;;              mov *sp(#8), t3
    1174              
    1174              ; restore ar0
    1174              ;                       mov dbl(*sp(#-2)), xar0
    1174              ;                       mov #-1, ar0
    1174              ;;                      mov dbl (*(#_save_xar7)), xar0
    1174              ;;
    1174              ;;                      mov sp, t0
    1174              ;;                      add #1, t0
    1174              ;;                      mov t0, ssp
    1174              
    1174              ;                       mov *sp(#3), *(#00004ch+#1)
    1174              
    1174              ;                       mov t3, *ssp(#1) 
    1174              ;                       mov t2, *ssp(#2)
    1174              
    1174              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
    1174              ;;                      mov t3, *(ssp(#0))
    1174              ;                       mov t3, *ssp
    1174              ;                       mov *sp(#3), t3 ; 
    1174              ;                       mov t3, *ssp(#1)
    1174              ;;                      mov *sp(#21), PC        
    1174              
    1174              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
    1174              ;                       mov dbl(xsp), dbl(lcrpc)
    1174              ;                       popboth XAR7
    1174              ;                       add #1, sp
    1174              ;                       add #1, ssp
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
    1174              ;                       popboth XAR6
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
    1174              ;                       popboth XAR5
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
    1174                              ;-----------------------------------
    1174              ;                       popboth XAR4
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
    1174              ;                       popboth XAR3
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   54

    1174              ;                       popboth XAR2
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
    1174              ;                       popboth XAR1
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
    1174              ;                       popboth XAR0
    1174              ;                       add #2, t0
    1174              ;                       add #2, t1
    1174              ;                       mov t0, sp
    1174              ;                       mov t1, ssp
    1174              ;                       EDIS
    1174              ;                       NASP    ; Un-align stack pointer
    1174              ;;                      pop mmap(ST3_55)
    1174              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
    1174              ;            BCC $2,TC1 ; |216|
    1174                                      .if 0
    1174                                      mov dbl (*(#_pxCurrentTCB)), xar7
    1174              
    1174                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
    1174                                      mov dbl (*ar7(#2)), xssp                
    1174                                      .endif
    1174              
    1174 00042b ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         00042d 4F00 
         00042f 0000!
    1174 000431 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         000433 5F00 
         000435 0000!
    1174              
    1174                                      .if 0
    1174                                      mov dbl (*(_xCompareTCB)), xar6
    1174              ; need to restore our return address
    1174                                      mov xar7, ac0
    1174                          mov xar6, ac1
    1174                              CMPU AC1 != AC0, TC1 ; |1393|
    1174                          BCC $6,TC1 ; |1393|
    1174                          amov #0x000000, xar7
    1174                                      amov #0x000000, xar6
    1174                          mov  *(#_save_new_pxcode), ar7
    1174                                      mov ar7, *sp(#0)
    1174                          mov *(#_save_new_pxlcode) , ar7
    1174                          mov ssp, ar6
    1174                          mov ar7, *ar6(#0)
    1174              
    1174                          mov dbl (*(#_save_xar6)), xar6
    1174                                      .endif
    1174              
    1174 000437 ED31                          mov dbl (*(#_save_xar7)), xar7
         000439 FF00 
         00043b 0000!
TMS320C55x Assembler PC v4.4.1 Thu Sep 20 02:40:01 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   55

    1174              
    1174              ;                       B $3
    1174              ;$2
    1174              ;            MOV #0, *(#_first_flag) ; |217|
    1174              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
    1174              ;                       mov dbl (*(#_first_save_xssp)), xssp
    1174              ;$3
    1174              ;                       aadd #-3, sp
    1174 00043d 46B2                          bclr INTM               ; enable interrupts
    1174              ;                       aadd #1, sp
    1174 00043f 4805                          RETI
    1174              ;                       mov #1860h, ssp
    1174 000441 20                            nop
    1174 000442 20                            nop
    1174              ;                       nop
    1175              
    1176              ;;;
    1177              
    1178              ;                /* Place the tick ISR in the correct vector. */
    1179              
    1180              ;;;                .sect ".int49"                       ; TIMER1_A0_VECTOR
    1181              ;;                .sect ".int14"                        ; CPUTIMER2
    1182              ;                 .sect ".text"                 ; CPUTIMER2
    1183              ;;;;             .sect ".INT14_ISR"
    1184              ;               .global _INT14_ISR
    1185              ;;;; _INT14_ISR:
    1186              ;;;;                .short   _vTickISR
    1187              ;;;;            LCR #_vTickISR
    1188                                      .end

No Assembly Errors, No Assembly Warnings
