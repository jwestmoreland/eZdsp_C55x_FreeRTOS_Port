TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    1

     684              ; Temporary Registers Used: None
       1              ; .cdecls C, LIST, "FreeRTOSConfig.h"
       2              ;  .include "FreeRTOSConfig.h"
       3              ; 32-bit stack slow mode
       4                      .mmregs
       5                       .C54CM_off
       6              ;     .CPL_off
       7                    .ARMS_off
       8                       .align 4
       9              ;       .c28_amode
      10              
      11                        .global _usCriticalNesting
      12                           .global _save_xsp
      13                           .global _save_xssp
      14                           .global _first_save_xsp
      15                           .global _first_save_xssp
      16                           .global _first_flag
      17                           .global _save_xar7
      18                           .global _tZero
      19                           .global _save_xar6
      20                        .global _pxCurrentTCB
      21                           .global _xTaskIncrementTick
      22                           .ref    _xTaskIncrementTick
      23                           .global _vTaskSwitchContext
      24                           .global _prvSetupTimerInterrupt
      25                                       .global _tickIRQctr
      26              
      27              ;                         .ref configUSE_TICK_CTR
      28              ;                         .ref configUSE_PREEMPTION
      29              
      30                           .def _vPortYield
      31                           .def _xPortStartScheduler
      32                           .def _vTickISR
      33                           .global _vPortYield
      34                           .global _xPortStartScheduler
      35                           .global _vTickISR
      36                           .global _INT14_ISR
      37                           .global _portFLAGS_INT_ENABLED
      38                           .global _portFLAGS_INT_ENABLED_POPPED
      39                           .global _DBSTAT_SAVE
      40                           .global _DBSTAT_RESTORE
      41                           .global _STATUS0_LOW
      42                           .global _STATUS0_HIGH
      43                           .global _STATUS1_LOW
      44                           .global _STATUS1_HIGH
      45                           .global _STATUS2_LOW
      46                           .global _STATUS2_HIGH
      47                           .global _PC_REG_HIGH_SAVE
      48                           .global _PC_REG_LOW_SAVE
      49                           .global _PC_REG_HIGH_RESTORE
      50                           .global _PC_REG_LOW_RESTORE
      51              ;            .cdecls C,NOLIST,"portmacro.h"
      52              ;            .cdecls C,LIST,"FreeRTOSConfig.h"
      53              ;                       CLRC AMODE
      54              ;       System Stack
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    2

      55 000000               .text
      56              portSAVE_CONTEXT .macro 
      57              ;                       ;CONTEXT_SAVE
      58              ;                       ASP  ; Align Stack Pointer
      59              ;                       CLRC       OVM,PAGE0
      60              ;                       CLRC       AMODE
      61              ;                       EALLOW
      62              
      63                                      bclr C54CM      ; temp - until we figure out what is setting this
      64              
      65                                      bset INTM               ; disable interrupts
      66              
      67              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
      68              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
      69                                      
      70              ;                       pshboth xar7
      71              ;                       pshboth xar6
      72              ;                       pshboth xar5
      73              
      74                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
      75                                      .if configUSE_CONTEXT_DEBUG == 1
      76                                      mov xar6, dbl (*(#_save_xar6))
      77                                      .endif
      78              
      79                                      mov dbl (*(#_pxCurrentTCB)), xar7
      80              ; does this *always* work?
      81                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
      82                                      mov dbl (*ar7(#2)), xssp                        
      83              ;; what about xssp here?
      84              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
      85              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
      86                                 .if configUSE_CONTEXT_DEBUG == 1
      87              ;; save current PC (and possible loop bits values)
      88              ;; for debug - to see if this is being corrupted
      89                                      mov dbl(*ar7), xar6
      90                                      mov dbl(*ar6), xar7
      91                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
      92                                      mov xssp, xar7
      93                                      mov dbl(*ar7), xar6
      94                                      mov dbl(*ar6), xar7
      95                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
      96                                      mov xssp, xar7
      97                                      add #-2, ar7
      98                                      mov dbl(*ar7), xar6
      99                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
     100                          mov dbl (*(#_save_xar6)), xar6
     101              
     102              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     103              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     104              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     105                                      .endif
     106              
     107                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     108              
     109                                      mov xar7, dbl(*sp(#8))                          ; save xar7
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    3

     110                                      mov ar7, *sp(#7)
     111              
     112                                      mov xar6, dbl(*sp(#10))
     113                                      mov ar6, *sp(#9)
     114              
     115                                      mov xar5, dbl(*sp(#12))
     116                                      mov ar5, *sp(#11)
     117              
     118                                      mov xar4, dbl(*sp(#14))
     119                                      mov ar4, *sp(#13)
     120              
     121                                      mov xar3, dbl(*sp(#16))
     122                                      mov ar3, *sp(#15)
     123              
     124                                      mov xar2, dbl(*sp(#18))
     125                                      mov ar2, *sp(#17)
     126              
     127                                      mov xar1, dbl(*sp(#20))
     128                                      mov ar1, *sp(#19)
     129              
     130                                      mov xar0, dbl(*sp(#22))
     131                                      mov ar0, *sp(#21)
     132              
     133                                      mov t3, *sp(#23)
     134                                      mov t2, *sp(#24)
     135                                      mov t1, *sp(#25)
     136                                      mov t0, *sp(#26)
     137              
     138              ;;                      mov mmap(ST0_55), t0
     139              ; - this is ok - we are not pushing - it's a relative stack frame
     140              ;                       mov t0, *sp(#25)
     141              ;;                      mov t0, *sp(#23)
     142              ;;                      mov mmap(ST1_55), t1
     143              ;                       mov t1, *sp(#26)                ; stomping on own mem
     144              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     145              ;;                      mov mmap(ST2_55), t2
     146              ;;                      mov t2, *sp(#22)
     147              ;                       mov t2, *sp(#27)
     148              ;;                      mov mmap(ST2_55), t3
     149              ;                       mov t3, *sp(#28)
     150              ;;                      mov t3, *sp(#24)
     151              
     152              ;                       PSH dbl(AR0) ; 32-bit
     153              ;                       PSH dbl(AR1) 
     154              ;                       PSH dbl(AR2) ; 32-bit
     155              ;                       PUSH XAR3 ; 32-bit
     156              ;                       PUSH XAR4 ; 32-bit
     157                              ;-- Comment these to save cycles --------
     158              ;                       PUSH XAR5 ; 32-bit
     159              ;                       PUSH XAR6 ; 32-bit
     160              ;                       PUSH XAR7 ; 32-bit
     161                              ;----------------------------------------
     162              
     163              ;                       PUSH XT   ; 32-bit
     164              
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    4

     165              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     166              ;                       push xar6 ; portFLAGS_INT_ENABLED
     167              
     168                                      mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
     169                                      mov xar6, dbl(*sp(#6))
     170                                      
     171              
     172              ;                       movl xar7, @_usCriticalNesting
     173              ;                       push xar7
     174                                      mov dbl (*(#_usCriticalNesting)), xar7
     175                                      mov xar7, dbl(*sp(#4))
     176              
     177                                      mov mmap(ST1_55), ar7
     178                                      mov ar7, *sp(#1)
     179                                      mov  mmap(ST2_55), ar7
     180                                      mov ar7, *sp(#2)
     181              
     182                                      mov ssp, ar7
     183                                      mov mmap(ST0_55), ar6
     184                                      mov ar6, *ar7(#2)
     185              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     186              ;;;                     mov ar6, *ar7(#2)
     187              ;                       mov ar7, mmap(ST0_55)
     188              ;                       mov *ssp(#2), ar7
     189              
     190              ; fix up
     191              ;                       aadd #20, sp
     192              ;                       mov sp, t0
     193              ;                       sub #1, t0
     194              ;                       mov t0, ssp
     195              
     196                                      ; move contents of SP into address of current TCB
     197              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     198              
     199              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     200              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     201              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     202              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     203              ;                       mov dbl (*ar7+), xssp
     204              
     205              ;                       mov sp, t0              ; we've already saved t0
     206              ;                       add #1, t0
     207              ;                       mov t0, ssp
     208              ; ??
     209              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     210              
     211              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     212              ;                       mov al, @sp
     213              ;                       movl  *xar6, acc        
     214              ;;                      mov  ar0, @sp
     215              ;;                      mov  @ar6, alxd
     216              ;;                      mov  ar0, @sp
     217              ;;                      movl 0(xar6), sp
     218              ;                       EDIS
     219              ;                       NASP
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    5

     220              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     221              ;                       NOP
     222                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     223                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     224                                      nop
     225                                      nop
     226                                      nop
     227                                      .endm
     228              
     229              portRESTORE_CONTEXT .macro
     230                                      .C54CM_off
     231              ;                       .CPL_off
     232                                      .ARMS_off
     233                                      .align 4
     234              
     235              ; Restore context & return
     236                                      ;CONTEXT_RESTORE
     237              ;                       ASP
     238              ;                       EALLOW
     239              ;                       nop
     240              ;                       nop
     241              ;                       nop
     242              ;                       nop
     243                                      bclr C54CM    
     244              ;               xssp = dbl(*(#_pxCurrentTCB))
     245              ;               xsp  = dbl(*(#_pxCurrentTCB))
     246                                      mov xar7, dbl (*(#_save_xar7))  
     247              
     248                                      aadd #-3, sp
     249              ;            aadd #-3, xsp
     250              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     251              ;            BCC $1,TC1 ; |216|
     252                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     253                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     254              ;            B $4
     255              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     256              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     257              
     258              ;                       aadd #-3, sp
     259              ;$1
     260              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     261              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     262              ;$4
     263                                      mov xsp, xar7
     264                                      mov xssp, xar6
     265              
     266                                      mov dbl (*(#_pxCurrentTCB)), xar5                       
     267              
     268                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     269                                      mov dbl (*ar5(#2)), xar3                        
     270                                      
     271                                      mov *ar4, ar2
     272                                      mov *ar3, ar1
     273              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     274                                      mov ar2, *ar7
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    6

     275                                      mov ar1, *ar6
     276              
     277              
     278              ;                       mov #0, ssp     
     279              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     280              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     281                                      ; 32-bit mode - will act on SP and SSP:
     282              ;                       'fix-up' current SP and SSP - is this dangerous????
     283              ;                       aadd #-3, sp
     284              ;;                      mov *ar7, *sp
     285              ;                       mov dbl (*ar7), ar6
     286              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     287              ;                       mov *ar7(#2), *ssp                      
     288              ;                       POP mmap(ST3_55)
     289              ;                       pshboth xar7                            ; should increment both
     290                                      mov mmap(ST1_55), ar7
     291                                      and #0xf7ff, ar7                        ; <here>#0800h
     292                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     293                                      mov mmap(ST2_55), ar7
     294                                      mov ar7, *sp(#2)
     295              
     296                                      mov ssp, ar7
     297                                      mov mmap(ST0_55), ar6
     298                                      mov ar6, *ar7(#2)
     299              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     300              ;;                      mov ar6, *ar7(#1)
     301              
     302                                      mov dbl (*(#_pxCurrentTCB)), xar7
     303              
     304                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     305                                      mov dbl (*ar7(#2)), xssp                        
     306              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     307              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     308                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     309                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     310                                      mov xar6, dbl (*(#_save_xar6))
     311              
     312              ;; this is for debug
     313                                      mov dbl(*ar7), xar6
     314                                      mov dbl(*ar6), xar7
     315                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     316                                      mov xssp, xar7
     317                                      mov dbl(*ar7), xar6
     318                                      mov dbl(*ar6), xar7
     319                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     320                                      mov xssp, xar7
     321                                      add #-2, ar7
     322                                      mov dbl(*ar7), xar6
     323                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     324                                      mov dbl (*(#_save_xar6)), xar6
     325                                      
     326                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     327                                      .endif
     328              
     329              ;                       mov mmap(ST0_55), *ssp(#1)
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    7

     330              ;                       mov mmap(STO_55), *ssp(#2)
     331              ;                       mov mmap(ST1_55), *sp(#1)
     332              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     333              ;                       mov *ar7, t0
     334              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     335              ;                       mov *ar7(#2), t0
     336              ;                       mov t0, *ssp(#0)                        
     337              
     338              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     339              ; what about xssp?
     340              ;                       mov xar6, xsp
     341              ;                       mov xssp, xar7
     342              ;                       add #1, ar7
     343              ;                       mov xar7, xsp
     344              ;                       mov sp, t0
     345              ;                       mov ssp, t1
     346              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     347              ;                       ar0 = *ar6
     348              ;                       xssp = xar0
     349              ;                       mov *xar6, xar0
     350              ;                       mov xar0, xssp  ; stack now points to our TCB
     351              ;;                      mov sp, *ar6
     352              ;;                      mov sp, ar0
     353              ;;                      mov sp, *_pxCurrentTCB
     354              ;;                      clr ar0
     355              ;;                      mov ar0, @xar6
     356              ;;                      mov sp, AR0
     357              ;;                      add sp, xar6
     358              
     359              ;;                      pshboth xar7
     360              ;;                      pshboth xar6
     361              ;;                      pshboth xar5
     362              
     363              ;;                      popboth xar5
     364              ;;                      popboth xar6
     365              ;;                      popboth xar7
     366              
     367              ;;;                     mov *sp(#1), ar7 
     368              ;                       mov dbl(*sp(#1)), ar7
     369              ;;;                     mov  ar7, mmap(ST1_55)
     370                                      mov *sp(#2), ar7
     371                                      mov ar7, mmap(ST2_55)
     372                                      mov ssp, ar7
     373                                      mov *ar7(#2), ar6
     374                                      mov ar6, mmap(ST0_55)
     375              ;                       mov *ar7(#2), ar6
     376              ;                       mov ar6, *ssp(#2)
     377              ;                       mov *ssp(#2), ar7
     378              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     379              
     380                                      mov dbl(*sp(#4)), xar7
     381              ;                       mov *sp(#1), ar7
     382                                      mov xar7, dbl(*(#_usCriticalNesting))   
     383              
     384                                      mov dbl(*sp(#6)), xar6
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    8

     385              ;                       mov *sp(#3), ar6
     386              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     387                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     388              
     389              ;                       POP XT
     390                              ;-- Comment these to save cycles ---
     391                                      mov dbl(*sp(#8)), xar7
     392                                      mov *sp(#7), ar7
     393              ;                       mov *sp(#5), ar7
     394              ;                       mov dbl(*sp(#0)), hi(ar7)
     395              ;                       mov (*sp(#0)), lo(ar7)
     396                                      mov dbl(*sp(#10)), xar6
     397                                      mov *sp(#9), ar6
     398                                      mov dbl(*sp(#12)), xar5
     399                                      mov *sp(#11), ar5
     400              ;; pvPararmeters currently here - needs to be verified --- jcw
     401                                      mov dbl(*sp(#14)), xar4
     402                                      mov *sp(#13), ar4
     403                                      mov dbl(*sp(#16)), xar3
     404                                      mov *sp(#15), ar3
     405                                      mov dbl(*sp(#18)), xar2
     406                                      mov *sp(#17), ar2
     407                                      mov dbl(*sp(#20)), xar1
     408                                      mov *sp(#19), ar1
     409                                      mov dbl(*sp(#22)), xar0
     410                                      mov *sp(#21), ar0
     411              
     412                                      mov *sp(#23), t3
     413                                      mov *sp(#24), t2
     414                                      mov *sp(#25), t1
     415                                      mov *sp(#26), t0
     416              
     417              ;                       mov dbl(*sp(#21)), *xssp(#0)
     418              ;                       mov *sp(#21), *ssp
     419              ;                       mov *sp(#21), RETA
     420              ; need to move 23-16 to XSSP contents
     421              ;                       mov xar0, dbl (*(#_save_xar7))
     422              ;                       mov ssp, ar0
     423              ;                       mov #0, ssp 
     424              ;                       mov xssp, xar0
     425              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     426              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     427                      ;               add #1, xssp            ; 32-bit return address pointer
     428                      ;               amar *xssp+
     429              ;                       mov sp, t0
     430              ;                       add #1, t0
     431              ;                       mov t0, ssp
     432              ;                       incr ssp
     433              ;                       asub #20, ar0
     434              ;                       mov xar0, xssp
     435              ;                       mov ar0, ssp
     436              ;                       mov ar0, 
     437              ;;                      mov *sp(#1), t0
     438              ;;                      mov *sp(#3), t3         ; ST0
     439              ;;                      mov *sp(#4), t2         ; DBSTAT
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    9

     440              ;;                      mov t3, *ar0(#2)
     441                      ;;              mov t2, *ar0(#1)
     442              ;;                      mov t0, *ar0(#0)
     443              
     444              ;;                      mov *sp(#5), t0
     445              ;;                      mov *sp(#6), t1
     446              ;;                      mov *sp(#7), t2
     447                      ;;              mov *sp(#8), t3
     448              
     449              
     450              
     451              ; restore ar0
     452              ;                       mov dbl(*sp(#-2)), xar0
     453              ;                       mov #-1, ar0
     454              ;;                      mov dbl (*(#_save_xar7)), xar0
     455              ;;
     456              ;;                      mov sp, t0
     457              ;;                      add #1, t0
     458              ;;                      mov t0, ssp
     459              
     460              ;                       mov *sp(#3), *(#00004ch+#1)
     461              
     462              ;                       mov t3, *ssp(#1) 
     463              ;                       mov t2, *ssp(#2)
     464              
     465              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     466              ;;                      mov t3, *(ssp(#0))
     467              ;                       mov t3, *ssp
     468              ;                       mov *sp(#3), t3 ; 
     469              ;                       mov t3, *ssp(#1)
     470              ;;                      mov *sp(#21), PC        
     471              
     472              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     473              ;                       mov dbl(xsp), dbl(lcrpc)
     474              ;                       popboth XAR7
     475              ;                       add #1, sp
     476              ;                       add #1, ssp
     477              ;                       add #2, t0
     478              ;                       add #2, t1
     479              ;                       mov t0, sp
     480              ;                       mov t1, ssp
     481              ;                       popboth XAR6
     482              ;                       add #2, t0
     483              ;                       add #2, t1
     484              ;                       mov t0, sp
     485              ;                       mov t1, ssp
     486              ;                       popboth XAR5
     487              ;                       add #2, t0
     488              ;                       add #2, t1
     489              ;                       mov t0, sp
     490              ;                       mov t1, ssp
     491                              ;-----------------------------------
     492              ;                       popboth XAR4
     493              ;                       add #2, t0
     494              ;                       add #2, t1
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   10

     495              ;                       mov t0, sp
     496              ;                       mov t1, ssp
     497              ;                       popboth XAR3
     498              ;                       add #2, t0
     499              ;                       add #2, t1
     500              ;                       mov t0, sp
     501              ;                       mov t1, ssp
     502              ;                       popboth XAR2
     503              ;                       add #2, t0
     504              ;                       add #2, t1
     505              ;                       mov t0, sp
     506              ;                       mov t1, ssp
     507              ;                       popboth XAR1
     508              ;                       add #2, t0
     509              ;                       add #2, t1
     510              ;                       mov t0, sp
     511              ;                       mov t1, ssp
     512              ;                       popboth XAR0
     513              ;                       add #2, t0
     514              ;                       add #2, t1
     515              ;                       mov t0, sp
     516              ;                       mov t1, ssp
     517              ;                       EDIS
     518              ;                       NASP    ; Un-align stack pointer
     519              ;;                      pop mmap(ST3_55)
     520              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     521              ;            BCC $2,TC1 ; |216|
     522                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     523                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     524              ;                       B $3
     525              ;$2
     526              ;            MOV #0, *(#_first_flag) ; |217|
     527              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     528              ;                       mov dbl (*(#_first_save_xssp)), xssp
     529              ;$3
     530              ;                       aadd #-3, sp
     531                                      bclr INTM               ; enable interrupts
     532              ;                       aadd #1, sp
     533                                      RETI
     534              ;                       mov #1860h, ssp
     535                                      nop
     536                                      nop
     537              ;                       nop
     538                                      .endm
     539              ; /*-----------------------------------------------------------*/
     540              
     541              ; /*
     542              ; * The RTOS tick ISR.
     543              ; *
     544              ; * If the cooperative scheduler is in use this simply increments the tick
     545              ; * count.
     546              ; *
     547              ; * If the preemptive scheduler is in use a context switch can also occur.
     548              ; */
     549              
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   11

     550              
     551 000000       _xPortStartScheduler:
     552              
     553              ;                /* Setup the hardware to generate the tick.  Interrupts are disabled
     554              ;                when this function is called. */
     555 000000 4EFF                 aadd #-1, sp
     556 000002 6C00                 call    #_prvSetupTimerInterrupt
         000004 0000!
     557              
     558              ;                /* Restore the context of the first task that is going to run. */
     559              
     560              ;;              INTR INT14      ; force interrupt - just for debug purposes.
     561              
     562              ;;            psh mmap(ST3_55)
     563 000006 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000008 F500 
         00000a 0000!
     564 00000c EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save xar6 
         00000e E500 
         000010 0000!
     565              
     566 000012 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000014 FF00 
         000016 0000!
     567              ; does this *always* work?
     568 000018 EDE1                          mov dbl (*ar7), xar6
         00001a EF   
     569              ;                       mov xsp, dbl (*(#_first_save_xsp))              ; (init) xsp contains our TCB now
     570 00001b EB31                          mov xsp, dbl (*(#_save_xsp))            ; (init) xsp contains our TCB now
         00001d 4500 
         00001f 0000!
     571 000021 EDE3                          mov dbl (*ar7+), xar6
         000023 EF   
     572              ;                       mov xssp, dbl (*(#_first_save_xssp))
     573 000024 EB31                          mov xssp, dbl (*(#_save_xssp))
         000026 5500 
         000028 0000!
     574              ;                       mov #1, *(#_first_flag)
     575              
     576              ; what about xssp here?
     577 00002a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00002c FF00 
         00002e 0000!
     578 000030 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000032 EF00 
         000034 0000!
     579 000036 4E01                          aadd #1, sp
     580 ****** MACRO             portRESTORE_CONTEXT
     580                                      .C54CM_off
     580              ;                       .CPL_off
     580                                      .ARMS_off
     580                                      .align 4
     580              
     580              ; Restore context & return
     580                                      ;CONTEXT_RESTORE
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   12

     580              ;                       ASP
     580              ;                       EALLOW
     580              ;                       nop
     580              ;                       nop
     580              ;                       nop
     580              ;                       nop
     580 000038 4652                          bclr C54CM    
     580              ;               xssp = dbl(*(#_pxCurrentTCB))
     580              ;               xsp  = dbl(*(#_pxCurrentTCB))
     580 00003a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00003c F500 
         00003e 0000!
     580              
     580 000040 4EFD                          aadd #-3, sp
     580              ;            aadd #-3, xsp
     580              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     580              ;            BCC $1,TC1 ; |216|
     580 000042 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000044 4F00 
         000046 0000!
     580 000048 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00004a 5F00 
         00004c 0000!
     580              ;            B $4
     580              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     580              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     580              
     580              ;                       aadd #-3, sp
     580              ;$1
     580              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     580              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     580              ;$4
     580 00004e 904F                          mov xsp, xar7
     580 000050 905E                          mov xssp, xar6
     580              
     580 000052 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000054 DF00 
         000056 0000!
     580              
     580 000058 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00005a CF   
     580 00005b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00005d BF00 
         00005f 02   
     580                                      
     580 000060 AA81                          mov *ar4, ar2
     580 000062 A961                          mov *ar3, ar1
     580              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     580 000064 CAE1                          mov ar2, *ar7
     580 000066 C9C1                          mov ar1, *ar6
     580              
     580              
     580              ;                       mov #0, ssp     
     580              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     580              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   13

     580                                      ; 32-bit mode - will act on SP and SSP:
     580              ;                       'fix-up' current SP and SSP - is this dangerous????
     580              ;                       aadd #-3, sp
     580              ;;                      mov *ar7, *sp
     580              ;                       mov dbl (*ar7), ar6
     580              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     580              ;                       mov *ar7(#2), *ssp                      
     580              ;                       POP mmap(ST3_55)
     580              ;                       pshboth xar7                            ; should increment both
     580 000068 AF06                          mov mmap(ST1_55), ar7
         00006a 98   
     580 00006b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00006d FFFF 
     580 00006f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     580 000071 AF96                          mov mmap(ST2_55), ar7
         000073 98   
     580 000074 CF04                          mov ar7, *sp(#2)
     580              
     580 000076 449F                          mov ssp, ar7
     580 000078 AE04                          mov mmap(ST0_55), ar6
         00007a 98   
     580 00007b CEED                          mov ar6, *ar7(#2)
         00007d 0002 
     580              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     580              ;;                      mov ar6, *ar7(#1)
     580              
     580 00007f ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000081 FF00 
         000083 0000!
     580              
     580 000085 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000087 4F   
     580 000088 EDED                          mov dbl (*ar7(#2)), xssp                        
         00008a 5F00 
         00008c 02   
     580              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     580              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     580                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     580                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     580                                      mov xar6, dbl (*(#_save_xar6))
     580              
     580              ;; this is for debug
     580                                      mov dbl(*ar7), xar6
     580                                      mov dbl(*ar6), xar7
     580                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     580                                      mov xssp, xar7
     580                                      mov dbl(*ar7), xar6
     580                                      mov dbl(*ar6), xar7
     580                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     580                                      mov xssp, xar7
     580                                      add #-2, ar7
     580                                      mov dbl(*ar7), xar6
     580                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     580                                      mov dbl (*(#_save_xar6)), xar6
     580                                      
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   14

     580                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     580                                      .endif
     580              
     580              ;                       mov mmap(ST0_55), *ssp(#1)
     580              ;                       mov mmap(STO_55), *ssp(#2)
     580              ;                       mov mmap(ST1_55), *sp(#1)
     580              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     580              ;                       mov *ar7, t0
     580              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     580              ;                       mov *ar7(#2), t0
     580              ;                       mov t0, *ssp(#0)                        
     580              
     580              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     580              ; what about xssp?
     580              ;                       mov xar6, xsp
     580              ;                       mov xssp, xar7
     580              ;                       add #1, ar7
     580              ;                       mov xar7, xsp
     580              ;                       mov sp, t0
     580              ;                       mov ssp, t1
     580              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     580              ;                       ar0 = *ar6
     580              ;                       xssp = xar0
     580              ;                       mov *xar6, xar0
     580              ;                       mov xar0, xssp  ; stack now points to our TCB
     580              ;;                      mov sp, *ar6
     580              ;;                      mov sp, ar0
     580              ;;                      mov sp, *_pxCurrentTCB
     580              ;;                      clr ar0
     580              ;;                      mov ar0, @xar6
     580              ;;                      mov sp, AR0
     580              ;;                      add sp, xar6
     580              
     580              ;;                      pshboth xar7
     580              ;;                      pshboth xar6
     580              ;;                      pshboth xar5
     580              
     580              ;;                      popboth xar5
     580              ;;                      popboth xar6
     580              ;;                      popboth xar7
     580              
     580              ;;;                     mov *sp(#1), ar7 
     580              ;                       mov dbl(*sp(#1)), ar7
     580              ;;;                     mov  ar7, mmap(ST1_55)
     580 00008d AF04                          mov *sp(#2), ar7
     580 00008f CF96                          mov ar7, mmap(ST2_55)
         000091 98   
     580 000092 449F                          mov ssp, ar7
     580 000094 AEED                          mov *ar7(#2), ar6
         000096 0002 
     580 000098 CE04                          mov ar6, mmap(ST0_55)
         00009a 98   
     580              ;                       mov *ar7(#2), ar6
     580              ;                       mov ar6, *ssp(#2)
     580              ;                       mov *ssp(#2), ar7
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   15

     580              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     580              
     580 00009b ED08                          mov dbl(*sp(#4)), xar7
         00009d FF   
     580              ;                       mov *sp(#1), ar7
     580 00009e EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0000a0 F500 
         0000a2 0000!
     580              
     580 0000a4 ED0C                          mov dbl(*sp(#6)), xar6
         0000a6 EF   
     580              ;                       mov *sp(#3), ar6
     580              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     580 0000a7 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0000a9 E500 
         0000ab 0000!
     580              
     580              ;                       POP XT
     580                              ;-- Comment these to save cycles ---
     580 0000ad ED10                          mov dbl(*sp(#8)), xar7
         0000af FF   
     580 0000b0 AF0E                          mov *sp(#7), ar7
     580              ;                       mov *sp(#5), ar7
     580              ;                       mov dbl(*sp(#0)), hi(ar7)
     580              ;                       mov (*sp(#0)), lo(ar7)
     580 0000b2 ED14                          mov dbl(*sp(#10)), xar6
         0000b4 EF   
     580 0000b5 AE12                          mov *sp(#9), ar6
     580 0000b7 ED18                          mov dbl(*sp(#12)), xar5
         0000b9 DF   
     580 0000ba AD16                          mov *sp(#11), ar5
     580              ;; pvPararmeters currently here - needs to be verified --- jcw
     580 0000bc ED1C                          mov dbl(*sp(#14)), xar4
         0000be CF   
     580 0000bf AC1A                          mov *sp(#13), ar4
     580 0000c1 ED20                          mov dbl(*sp(#16)), xar3
         0000c3 BF   
     580 0000c4 AB1E                          mov *sp(#15), ar3
     580 0000c6 ED24                          mov dbl(*sp(#18)), xar2
         0000c8 AF   
     580 0000c9 AA22                          mov *sp(#17), ar2
     580 0000cb ED28                          mov dbl(*sp(#20)), xar1
         0000cd 9F   
     580 0000ce A926                          mov *sp(#19), ar1
     580 0000d0 ED2C                          mov dbl(*sp(#22)), xar0
         0000d2 8F   
     580 0000d3 A82A                          mov *sp(#21), ar0
     580              
     580 0000d5 A72E                          mov *sp(#23), t3
     580 0000d7 A630                          mov *sp(#24), t2
     580 0000d9 A532                          mov *sp(#25), t1
     580 0000db A434                          mov *sp(#26), t0
     580              
     580              ;                       mov dbl(*sp(#21)), *xssp(#0)
     580              ;                       mov *sp(#21), *ssp
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   16

     580              ;                       mov *sp(#21), RETA
     580              ; need to move 23-16 to XSSP contents
     580              ;                       mov xar0, dbl (*(#_save_xar7))
     580              ;                       mov ssp, ar0
     580              ;                       mov #0, ssp 
     580              ;                       mov xssp, xar0
     580              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     580              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     580                      ;               add #1, xssp            ; 32-bit return address pointer
     580                      ;               amar *xssp+
     580              ;                       mov sp, t0
     580              ;                       add #1, t0
     580              ;                       mov t0, ssp
     580              ;                       incr ssp
     580              ;                       asub #20, ar0
     580              ;                       mov xar0, xssp
     580              ;                       mov ar0, ssp
     580              ;                       mov ar0, 
     580              ;;                      mov *sp(#1), t0
     580              ;;                      mov *sp(#3), t3         ; ST0
     580              ;;                      mov *sp(#4), t2         ; DBSTAT
     580              ;;                      mov t3, *ar0(#2)
     580                      ;;              mov t2, *ar0(#1)
     580              ;;                      mov t0, *ar0(#0)
     580              
     580              ;;                      mov *sp(#5), t0
     580              ;;                      mov *sp(#6), t1
     580              ;;                      mov *sp(#7), t2
     580                      ;;              mov *sp(#8), t3
     580              
     580              
     580              
     580              ; restore ar0
     580              ;                       mov dbl(*sp(#-2)), xar0
     580              ;                       mov #-1, ar0
     580              ;;                      mov dbl (*(#_save_xar7)), xar0
     580              ;;
     580              ;;                      mov sp, t0
     580              ;;                      add #1, t0
     580              ;;                      mov t0, ssp
     580              
     580              ;                       mov *sp(#3), *(#00004ch+#1)
     580              
     580              ;                       mov t3, *ssp(#1) 
     580              ;                       mov t2, *ssp(#2)
     580              
     580              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     580              ;;                      mov t3, *(ssp(#0))
     580              ;                       mov t3, *ssp
     580              ;                       mov *sp(#3), t3 ; 
     580              ;                       mov t3, *ssp(#1)
     580              ;;                      mov *sp(#21), PC        
     580              
     580              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     580              ;                       mov dbl(xsp), dbl(lcrpc)
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   17

     580              ;                       popboth XAR7
     580              ;                       add #1, sp
     580              ;                       add #1, ssp
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580              ;                       popboth XAR6
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580              ;                       popboth XAR5
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580                              ;-----------------------------------
     580              ;                       popboth XAR4
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580              ;                       popboth XAR3
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580              ;                       popboth XAR2
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580              ;                       popboth XAR1
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580              ;                       popboth XAR0
     580              ;                       add #2, t0
     580              ;                       add #2, t1
     580              ;                       mov t0, sp
     580              ;                       mov t1, ssp
     580              ;                       EDIS
     580              ;                       NASP    ; Un-align stack pointer
     580              ;;                      pop mmap(ST3_55)
     580              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     580              ;            BCC $2,TC1 ; |216|
     580 0000dd ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0000df 4F00 
         0000e1 0000!
     580 0000e3 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0000e5 5F00 
         0000e7 0000!
     580              ;                       B $3
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   18

     580              ;$2
     580              ;            MOV #0, *(#_first_flag) ; |217|
     580              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     580              ;                       mov dbl (*(#_first_save_xssp)), xssp
     580              ;$3
     580              ;                       aadd #-3, sp
     580 0000e9 46B2                          bclr INTM               ; enable interrupts
     580              ;                       aadd #1, sp
     580 0000eb 4805                          RETI
     580              ;                       mov #1860h, ssp
     580 0000ed 20                            nop
     580 0000ee 20                            nop
     580              ;                       nop
     581              
     582              
     583 0000ef       _vTickISR:              ; the timer ISR is aggregated for this processor architecture
     584               ;               bclr IFR0.IF4          ; enable interrupts
     585                              
     586 0000ef 4EFF                  aadd #-1, sp
     587 0000f1 E651                  MOV #0, *port(#6166) ; |119|
         0000f3 0018 
         0000f5 16   
     588 0000f6 F402                  AND #0x0010, mmap(@IFR0)
         0000f8 0010 
         0000fa 98   
     589 0000fb 46B3                  bset INTM
     590              ;           MOV *port(#7188), AR1 ; |68|                ;; TIMER0 is only timer that is active
     591              ;        BSET @#0, AR1 ; |68|
     592              ;        BCC $1,AR1 == #0 ; |68|
     593              ;        AND #0x0010, *(#1)
     594              
     595              ;               bset INTM               ; disable interrupts
     596                              .if configUSE_TICK_CTR == 1
     597 0000fd F731                  add #1, *(#_tickIRQctr)
         0000ff 0001 
         000101 0000 
         000103 00!  
     598                              .endif
     599              ;;              psh mmap(ST3_55)
     600 ****** MACRO         portSAVE_CONTEXT
     600              ;                       ;CONTEXT_SAVE
     600              ;                       ASP  ; Align Stack Pointer
     600              ;                       CLRC       OVM,PAGE0
     600              ;                       CLRC       AMODE
     600              ;                       EALLOW
     600              
     600 000104 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     600              
     600 000106 46B3                          bset INTM               ; disable interrupts
     600              
     600              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     600              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     600                                      
     600              ;                       pshboth xar7
     600              ;                       pshboth xar6
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   19

     600              ;                       pshboth xar5
     600              
     600 000108 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         00010a F500 
         00010c 0000!
     600                                      .if configUSE_CONTEXT_DEBUG == 1
     600                                      mov xar6, dbl (*(#_save_xar6))
     600                                      .endif
     600              
     600 00010e ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000110 FF00 
         000112 0000!
     600              ; does this *always* work?
     600 000114 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000116 4F   
     600 000117 EDED                          mov dbl (*ar7(#2)), xssp                        
         000119 5F00 
         00011b 02   
     600              ;; what about xssp here?
     600              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     600              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     600                                 .if configUSE_CONTEXT_DEBUG == 1
     600              ;; save current PC (and possible loop bits values)
     600              ;; for debug - to see if this is being corrupted
     600                                      mov dbl(*ar7), xar6
     600                                      mov dbl(*ar6), xar7
     600                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
     600                                      mov xssp, xar7
     600                                      mov dbl(*ar7), xar6
     600                                      mov dbl(*ar6), xar7
     600                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
     600                                      mov xssp, xar7
     600                                      add #-2, ar7
     600                                      mov dbl(*ar7), xar6
     600                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
     600                          mov dbl (*(#_save_xar6)), xar6
     600              
     600              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     600              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     600              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     600                                      .endif
     600              
     600 00011c ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00011e FF00 
         000120 0000!
     600              
     600 000122 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         000124 F5   
     600 000125 CF0E                          mov ar7, *sp(#7)
     600              
     600 000127 EB14                          mov xar6, dbl(*sp(#10))
         000129 E5   
     600 00012a CE12                          mov ar6, *sp(#9)
     600              
     600 00012c EB18                          mov xar5, dbl(*sp(#12))
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   20

         00012e D5   
     600 00012f CD16                          mov ar5, *sp(#11)
     600              
     600 000131 EB1C                          mov xar4, dbl(*sp(#14))
         000133 C5   
     600 000134 CC1A                          mov ar4, *sp(#13)
     600              
     600 000136 EB20                          mov xar3, dbl(*sp(#16))
         000138 B5   
     600 000139 CB1E                          mov ar3, *sp(#15)
     600              
     600 00013b EB24                          mov xar2, dbl(*sp(#18))
         00013d A5   
     600 00013e CA22                          mov ar2, *sp(#17)
     600              
     600 000140 EB28                          mov xar1, dbl(*sp(#20))
         000142 95   
     600 000143 C926                          mov ar1, *sp(#19)
     600              
     600 000145 EB2C                          mov xar0, dbl(*sp(#22))
         000147 85   
     600 000148 C82A                          mov ar0, *sp(#21)
     600              
     600 00014a C72E                          mov t3, *sp(#23)
     600 00014c C630                          mov t2, *sp(#24)
     600 00014e C532                          mov t1, *sp(#25)
     600 000150 C434                          mov t0, *sp(#26)
     600              
     600              ;;                      mov mmap(ST0_55), t0
     600              ; - this is ok - we are not pushing - it's a relative stack frame
     600              ;                       mov t0, *sp(#25)
     600              ;;                      mov t0, *sp(#23)
     600              ;;                      mov mmap(ST1_55), t1
     600              ;                       mov t1, *sp(#26)                ; stomping on own mem
     600              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     600              ;;                      mov mmap(ST2_55), t2
     600              ;;                      mov t2, *sp(#22)
     600              ;                       mov t2, *sp(#27)
     600              ;;                      mov mmap(ST2_55), t3
     600              ;                       mov t3, *sp(#28)
     600              ;;                      mov t3, *sp(#24)
     600              
     600              ;                       PSH dbl(AR0) ; 32-bit
     600              ;                       PSH dbl(AR1) 
     600              ;                       PSH dbl(AR2) ; 32-bit
     600              ;                       PUSH XAR3 ; 32-bit
     600              ;                       PUSH XAR4 ; 32-bit
     600                              ;-- Comment these to save cycles --------
     600              ;                       PUSH XAR5 ; 32-bit
     600              ;                       PUSH XAR6 ; 32-bit
     600              ;                       PUSH XAR7 ; 32-bit
     600                              ;----------------------------------------
     600              
     600              ;                       PUSH XT   ; 32-bit
     600              
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   21

     600              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     600              ;                       push xar6 ; portFLAGS_INT_ENABLED
     600              
     600 000152 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         000154 EF00 
         000156 0000!
     600 000158 EB0C                          mov xar6, dbl(*sp(#6))
         00015a E5   
     600                                      
     600              
     600              ;                       movl xar7, @_usCriticalNesting
     600              ;                       push xar7
     600 00015b ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         00015d FF00 
         00015f 0000!
     600 000161 EB08                          mov xar7, dbl(*sp(#4))
         000163 F5   
     600              
     600 000164 AF06                          mov mmap(ST1_55), ar7
         000166 98   
     600 000167 CF02                          mov ar7, *sp(#1)
     600 000169 AF96                          mov  mmap(ST2_55), ar7
         00016b 98   
     600 00016c CF04                          mov ar7, *sp(#2)
     600              
     600 00016e 449F                          mov ssp, ar7
     600 000170 AE04                          mov mmap(ST0_55), ar6
         000172 98   
     600 000173 CEED                          mov ar6, *ar7(#2)
         000175 0002 
     600              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     600              ;;;                     mov ar6, *ar7(#2)
     600              ;                       mov ar7, mmap(ST0_55)
     600              ;                       mov *ssp(#2), ar7
     600              
     600              ; fix up
     600              ;                       aadd #20, sp
     600              ;                       mov sp, t0
     600              ;                       sub #1, t0
     600              ;                       mov t0, ssp
     600              
     600                                      ; move contents of SP into address of current TCB
     600              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     600              
     600              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     600              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     600              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     600              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     600              ;                       mov dbl (*ar7+), xssp
     600              
     600              ;                       mov sp, t0              ; we've already saved t0
     600              ;                       add #1, t0
     600              ;                       mov t0, ssp
     600              ; ??
     600              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   22

     600              
     600              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     600              ;                       mov al, @sp
     600              ;                       movl  *xar6, acc        
     600              ;;                      mov  ar0, @sp
     600              ;;                      mov  @ar6, alxd
     600              ;;                      mov  ar0, @sp
     600              ;;                      movl 0(xar6), sp
     600              ;                       EDIS
     600              ;                       NASP
     600              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     600              ;                       NOP
     600 000177 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000179 4F00 
         00017b 0000!
     600 00017d ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00017f 5F00 
         000181 0000!
     600 000183 20                            nop
     600 000184 20                            nop
     600 000185 20                            nop
     601              
     602 000186 6C00          call     #_xTaskIncrementTick
         000188 0000!
     603              
     604                      .if configUSE_PREEMPTION == 1
     605              ;        mov xsp, dbl (*(#_save_xsp))                   ; save xsp
     606              ;           mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     607 00018a 6C00          call    #_vTaskSwitchContext
         00018c 0000!
     608                      .endif
     609              ;$1:
     610              ;               bclr INTM
     611 00018e E651                  mov #1, *port(#6166) ; |127|
         000190 0118 
         000192 16   
     612              ;               MOV #0, *port(#6294) ; |92|
     613 000193 F551                  or #0x0001, *port(#7188) ; |130|
         000195 0001 
         000197 1C14 
     614               ;       OR #0x0007, *port(#7188) ; |100|
     615 000199 4E01                  aadd #1, sp
     616 ****** MACRO         portRESTORE_CONTEXT
     616                                      .C54CM_off
     616              ;                       .CPL_off
     616                                      .ARMS_off
     616                                      .align 4
     616              
     616              ; Restore context & return
     616                                      ;CONTEXT_RESTORE
     616              ;                       ASP
     616              ;                       EALLOW
     616              ;                       nop
     616              ;                       nop
     616              ;                       nop
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   23

     616              ;                       nop
     616 00019c 4652                          bclr C54CM    
     616              ;               xssp = dbl(*(#_pxCurrentTCB))
     616              ;               xsp  = dbl(*(#_pxCurrentTCB))
     616 00019e EB31                          mov xar7, dbl (*(#_save_xar7))  
         0001a0 F500 
         0001a2 0000!
     616              
     616 0001a4 4EFD                          aadd #-3, sp
     616              ;            aadd #-3, xsp
     616              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     616              ;            BCC $1,TC1 ; |216|
     616 0001a6 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0001a8 4F00 
         0001aa 0000!
     616 0001ac ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0001ae 5F00 
         0001b0 0000!
     616              ;            B $4
     616              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     616              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     616              
     616              ;                       aadd #-3, sp
     616              ;$1
     616              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     616              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     616              ;$4
     616 0001b2 904F                          mov xsp, xar7
     616 0001b4 905E                          mov xssp, xar6
     616              
     616 0001b6 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         0001b8 DF00 
         0001ba 0000!
     616              
     616 0001bc EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         0001be CF   
     616 0001bf EDAD                          mov dbl (*ar5(#2)), xar3                        
         0001c1 BF00 
         0001c3 02   
     616                                      
     616 0001c4 AA81                          mov *ar4, ar2
     616 0001c6 A961                          mov *ar3, ar1
     616              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     616 0001c8 CAE1                          mov ar2, *ar7
     616 0001ca C9C1                          mov ar1, *ar6
     616              
     616              
     616              ;                       mov #0, ssp     
     616              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     616              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     616                                      ; 32-bit mode - will act on SP and SSP:
     616              ;                       'fix-up' current SP and SSP - is this dangerous????
     616              ;                       aadd #-3, sp
     616              ;;                      mov *ar7, *sp
     616              ;                       mov dbl (*ar7), ar6
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   24

     616              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     616              ;                       mov *ar7(#2), *ssp                      
     616              ;                       POP mmap(ST3_55)
     616              ;                       pshboth xar7                            ; should increment both
     616 0001cc AF06                          mov mmap(ST1_55), ar7
         0001ce 98   
     616 0001cf 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         0001d1 FFFF 
     616 0001d3 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     616 0001d5 AF96                          mov mmap(ST2_55), ar7
         0001d7 98   
     616 0001d8 CF04                          mov ar7, *sp(#2)
     616              
     616 0001da 449F                          mov ssp, ar7
     616 0001dc AE04                          mov mmap(ST0_55), ar6
         0001de 98   
     616 0001df CEED                          mov ar6, *ar7(#2)
         0001e1 0002 
     616              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     616              ;;                      mov ar6, *ar7(#1)
     616              
     616 0001e3 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         0001e5 FF00 
         0001e7 0000!
     616              
     616 0001e9 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         0001eb 4F   
     616 0001ec EDED                          mov dbl (*ar7(#2)), xssp                        
         0001ee 5F00 
         0001f0 02   
     616              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     616              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     616                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     616                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     616                                      mov xar6, dbl (*(#_save_xar6))
     616              
     616              ;; this is for debug
     616                                      mov dbl(*ar7), xar6
     616                                      mov dbl(*ar6), xar7
     616                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     616                                      mov xssp, xar7
     616                                      mov dbl(*ar7), xar6
     616                                      mov dbl(*ar6), xar7
     616                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     616                                      mov xssp, xar7
     616                                      add #-2, ar7
     616                                      mov dbl(*ar7), xar6
     616                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     616                                      mov dbl (*(#_save_xar6)), xar6
     616                                      
     616                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     616                                      .endif
     616              
     616              ;                       mov mmap(ST0_55), *ssp(#1)
     616              ;                       mov mmap(STO_55), *ssp(#2)
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   25

     616              ;                       mov mmap(ST1_55), *sp(#1)
     616              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     616              ;                       mov *ar7, t0
     616              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     616              ;                       mov *ar7(#2), t0
     616              ;                       mov t0, *ssp(#0)                        
     616              
     616              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     616              ; what about xssp?
     616              ;                       mov xar6, xsp
     616              ;                       mov xssp, xar7
     616              ;                       add #1, ar7
     616              ;                       mov xar7, xsp
     616              ;                       mov sp, t0
     616              ;                       mov ssp, t1
     616              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     616              ;                       ar0 = *ar6
     616              ;                       xssp = xar0
     616              ;                       mov *xar6, xar0
     616              ;                       mov xar0, xssp  ; stack now points to our TCB
     616              ;;                      mov sp, *ar6
     616              ;;                      mov sp, ar0
     616              ;;                      mov sp, *_pxCurrentTCB
     616              ;;                      clr ar0
     616              ;;                      mov ar0, @xar6
     616              ;;                      mov sp, AR0
     616              ;;                      add sp, xar6
     616              
     616              ;;                      pshboth xar7
     616              ;;                      pshboth xar6
     616              ;;                      pshboth xar5
     616              
     616              ;;                      popboth xar5
     616              ;;                      popboth xar6
     616              ;;                      popboth xar7
     616              
     616              ;;;                     mov *sp(#1), ar7 
     616              ;                       mov dbl(*sp(#1)), ar7
     616              ;;;                     mov  ar7, mmap(ST1_55)
     616 0001f1 AF04                          mov *sp(#2), ar7
     616 0001f3 CF96                          mov ar7, mmap(ST2_55)
         0001f5 98   
     616 0001f6 449F                          mov ssp, ar7
     616 0001f8 AEED                          mov *ar7(#2), ar6
         0001fa 0002 
     616 0001fc CE04                          mov ar6, mmap(ST0_55)
         0001fe 98   
     616              ;                       mov *ar7(#2), ar6
     616              ;                       mov ar6, *ssp(#2)
     616              ;                       mov *ssp(#2), ar7
     616              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     616              
     616 0001ff ED08                          mov dbl(*sp(#4)), xar7
         000201 FF   
     616              ;                       mov *sp(#1), ar7
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   26

     616 000202 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000204 F500 
         000206 0000!
     616              
     616 000208 ED0C                          mov dbl(*sp(#6)), xar6
         00020a EF   
     616              ;                       mov *sp(#3), ar6
     616              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     616 00020b EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         00020d E500 
         00020f 0000!
     616              
     616              ;                       POP XT
     616                              ;-- Comment these to save cycles ---
     616 000211 ED10                          mov dbl(*sp(#8)), xar7
         000213 FF   
     616 000214 AF0E                          mov *sp(#7), ar7
     616              ;                       mov *sp(#5), ar7
     616              ;                       mov dbl(*sp(#0)), hi(ar7)
     616              ;                       mov (*sp(#0)), lo(ar7)
     616 000216 ED14                          mov dbl(*sp(#10)), xar6
         000218 EF   
     616 000219 AE12                          mov *sp(#9), ar6
     616 00021b ED18                          mov dbl(*sp(#12)), xar5
         00021d DF   
     616 00021e AD16                          mov *sp(#11), ar5
     616              ;; pvPararmeters currently here - needs to be verified --- jcw
     616 000220 ED1C                          mov dbl(*sp(#14)), xar4
         000222 CF   
     616 000223 AC1A                          mov *sp(#13), ar4
     616 000225 ED20                          mov dbl(*sp(#16)), xar3
         000227 BF   
     616 000228 AB1E                          mov *sp(#15), ar3
     616 00022a ED24                          mov dbl(*sp(#18)), xar2
         00022c AF   
     616 00022d AA22                          mov *sp(#17), ar2
     616 00022f ED28                          mov dbl(*sp(#20)), xar1
         000231 9F   
     616 000232 A926                          mov *sp(#19), ar1
     616 000234 ED2C                          mov dbl(*sp(#22)), xar0
         000236 8F   
     616 000237 A82A                          mov *sp(#21), ar0
     616              
     616 000239 A72E                          mov *sp(#23), t3
     616 00023b A630                          mov *sp(#24), t2
     616 00023d A532                          mov *sp(#25), t1
     616 00023f A434                          mov *sp(#26), t0
     616              
     616              ;                       mov dbl(*sp(#21)), *xssp(#0)
     616              ;                       mov *sp(#21), *ssp
     616              ;                       mov *sp(#21), RETA
     616              ; need to move 23-16 to XSSP contents
     616              ;                       mov xar0, dbl (*(#_save_xar7))
     616              ;                       mov ssp, ar0
     616              ;                       mov #0, ssp 
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   27

     616              ;                       mov xssp, xar0
     616              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     616              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     616                      ;               add #1, xssp            ; 32-bit return address pointer
     616                      ;               amar *xssp+
     616              ;                       mov sp, t0
     616              ;                       add #1, t0
     616              ;                       mov t0, ssp
     616              ;                       incr ssp
     616              ;                       asub #20, ar0
     616              ;                       mov xar0, xssp
     616              ;                       mov ar0, ssp
     616              ;                       mov ar0, 
     616              ;;                      mov *sp(#1), t0
     616              ;;                      mov *sp(#3), t3         ; ST0
     616              ;;                      mov *sp(#4), t2         ; DBSTAT
     616              ;;                      mov t3, *ar0(#2)
     616                      ;;              mov t2, *ar0(#1)
     616              ;;                      mov t0, *ar0(#0)
     616              
     616              ;;                      mov *sp(#5), t0
     616              ;;                      mov *sp(#6), t1
     616              ;;                      mov *sp(#7), t2
     616                      ;;              mov *sp(#8), t3
     616              
     616              
     616              
     616              ; restore ar0
     616              ;                       mov dbl(*sp(#-2)), xar0
     616              ;                       mov #-1, ar0
     616              ;;                      mov dbl (*(#_save_xar7)), xar0
     616              ;;
     616              ;;                      mov sp, t0
     616              ;;                      add #1, t0
     616              ;;                      mov t0, ssp
     616              
     616              ;                       mov *sp(#3), *(#00004ch+#1)
     616              
     616              ;                       mov t3, *ssp(#1) 
     616              ;                       mov t2, *ssp(#2)
     616              
     616              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     616              ;;                      mov t3, *(ssp(#0))
     616              ;                       mov t3, *ssp
     616              ;                       mov *sp(#3), t3 ; 
     616              ;                       mov t3, *ssp(#1)
     616              ;;                      mov *sp(#21), PC        
     616              
     616              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     616              ;                       mov dbl(xsp), dbl(lcrpc)
     616              ;                       popboth XAR7
     616              ;                       add #1, sp
     616              ;                       add #1, ssp
     616              ;                       add #2, t0
     616              ;                       add #2, t1
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   28

     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616              ;                       popboth XAR6
     616              ;                       add #2, t0
     616              ;                       add #2, t1
     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616              ;                       popboth XAR5
     616              ;                       add #2, t0
     616              ;                       add #2, t1
     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616                              ;-----------------------------------
     616              ;                       popboth XAR4
     616              ;                       add #2, t0
     616              ;                       add #2, t1
     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616              ;                       popboth XAR3
     616              ;                       add #2, t0
     616              ;                       add #2, t1
     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616              ;                       popboth XAR2
     616              ;                       add #2, t0
     616              ;                       add #2, t1
     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616              ;                       popboth XAR1
     616              ;                       add #2, t0
     616              ;                       add #2, t1
     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616              ;                       popboth XAR0
     616              ;                       add #2, t0
     616              ;                       add #2, t1
     616              ;                       mov t0, sp
     616              ;                       mov t1, ssp
     616              ;                       EDIS
     616              ;                       NASP    ; Un-align stack pointer
     616              ;;                      pop mmap(ST3_55)
     616              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     616              ;            BCC $2,TC1 ; |216|
     616 000241 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000243 4F00 
         000245 0000!
     616 000247 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000249 5F00 
         00024b 0000!
     616              ;                       B $3
     616              ;$2
     616              ;            MOV #0, *(#_first_flag) ; |217|
     616              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     616              ;                       mov dbl (*(#_first_save_xssp)), xssp
     616              ;$3
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   29

     616              ;                       aadd #-3, sp
     616 00024d 46B2                          bclr INTM               ; enable interrupts
     616              ;                       aadd #1, sp
     616 00024f 4805                          RETI
     616              ;                       mov #1860h, ssp
     616 000251 20                            nop
     616 000252 20                            nop
     616              ;                       nop
     617                                              
     618              ; /*-----------------------------------------------------------*/
     619              
     620              
     621              ;/*
     622              ; * Manual context switch called by the portYIELD() macro.
     623              ; */
     624              
     625              ; We are using the slow return model:
     626              
     627              ; System Stack (SSP)                    Data Stack (SP)
     628              ; SSP = x - 3:  (Loop Bits):PC(23-16)   SP = y - 3: PC(15-0)  <<= Last pushed - first to POP
     629              ; SSP = x - 2:  DBSTAT                  SP = y - 2: ST1_55
     630              ; SSP = x - 1:  ST0_55                  SP = y - 1: ST2_55
     631              ; SSP = x:      Previously saved data   SP = y:     Previously saved data
     632              
     633              
     634 000253       _vPortYield:
     635              
     636 000253 4EFF                  aadd #-1, sp
     637 000255 F402                  AND #0x0010, mmap(@IFR0)
         000257 0010 
         000259 98   
     638              ;                /* Mimic an interrupt by pushing the SR. */
     639              
     640              ;               /* SR is 16-bits in 430X architecture */
     641              
     642              ;;                pushx.w    SR
     643              
     644              ;                /* Now the SR is stacked we can disable interrupts. */
     645              
     646              ;                dint
     647              
     648 00025a 46B3                    bset INTM             ; disable interrupts
     649              
     650              ;;                bicx.w #0xF000,0(r1)
     651              ;;                swpbx.w +4(r1)
     652              ;;                rlax.w +4(r1)
     653              ;;                rlax.w +4(r1)
     654              ;;                rlax.w +4(r1)
     655              ;;                rlax.w +4(r1)
     656              ;;                addx.w +4(r1),0(r1)
     657              ;;                movx.w +2(r1),+4(r1)
     658              ;;                movx.w 0(r1),+2(r1)
     659              ;;                incdx.a r1
     660              
     661              ;                /* Save the context of the current task. */
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   30

     662              ;;        psh mmap(ST3_55)
     663 ****** MACRO         portSAVE_CONTEXT
     663              ;                       ;CONTEXT_SAVE
     663              ;                       ASP  ; Align Stack Pointer
     663              ;                       CLRC       OVM,PAGE0
     663              ;                       CLRC       AMODE
     663              ;                       EALLOW
     663              
     663 00025c 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     663              
     663 00025e 46B3                          bset INTM               ; disable interrupts
     663              
     663              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     663              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     663                                      
     663              ;                       pshboth xar7
     663              ;                       pshboth xar6
     663              ;                       pshboth xar5
     663              
     663 000260 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000262 F500 
         000264 0000!
     663                                      .if configUSE_CONTEXT_DEBUG == 1
     663                                      mov xar6, dbl (*(#_save_xar6))
     663                                      .endif
     663              
     663 000266 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000268 FF00 
         00026a 0000!
     663              ; does this *always* work?
     663 00026c EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00026e 4F   
     663 00026f EDED                          mov dbl (*ar7(#2)), xssp                        
         000271 5F00 
         000273 02   
     663              ;; what about xssp here?
     663              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     663              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     663                                 .if configUSE_CONTEXT_DEBUG == 1
     663              ;; save current PC (and possible loop bits values)
     663              ;; for debug - to see if this is being corrupted
     663                                      mov dbl(*ar7), xar6
     663                                      mov dbl(*ar6), xar7
     663                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
     663                                      mov xssp, xar7
     663                                      mov dbl(*ar7), xar6
     663                                      mov dbl(*ar6), xar7
     663                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
     663                                      mov xssp, xar7
     663                                      add #-2, ar7
     663                                      mov dbl(*ar7), xar6
     663                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
     663                          mov dbl (*(#_save_xar6)), xar6
     663              
     663              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   31

     663              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     663              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     663                                      .endif
     663              
     663 000274 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000276 FF00 
         000278 0000!
     663              
     663 00027a EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         00027c F5   
     663 00027d CF0E                          mov ar7, *sp(#7)
     663              
     663 00027f EB14                          mov xar6, dbl(*sp(#10))
         000281 E5   
     663 000282 CE12                          mov ar6, *sp(#9)
     663              
     663 000284 EB18                          mov xar5, dbl(*sp(#12))
         000286 D5   
     663 000287 CD16                          mov ar5, *sp(#11)
     663              
     663 000289 EB1C                          mov xar4, dbl(*sp(#14))
         00028b C5   
     663 00028c CC1A                          mov ar4, *sp(#13)
     663              
     663 00028e EB20                          mov xar3, dbl(*sp(#16))
         000290 B5   
     663 000291 CB1E                          mov ar3, *sp(#15)
     663              
     663 000293 EB24                          mov xar2, dbl(*sp(#18))
         000295 A5   
     663 000296 CA22                          mov ar2, *sp(#17)
     663              
     663 000298 EB28                          mov xar1, dbl(*sp(#20))
         00029a 95   
     663 00029b C926                          mov ar1, *sp(#19)
     663              
     663 00029d EB2C                          mov xar0, dbl(*sp(#22))
         00029f 85   
     663 0002a0 C82A                          mov ar0, *sp(#21)
     663              
     663 0002a2 C72E                          mov t3, *sp(#23)
     663 0002a4 C630                          mov t2, *sp(#24)
     663 0002a6 C532                          mov t1, *sp(#25)
     663 0002a8 C434                          mov t0, *sp(#26)
     663              
     663              ;;                      mov mmap(ST0_55), t0
     663              ; - this is ok - we are not pushing - it's a relative stack frame
     663              ;                       mov t0, *sp(#25)
     663              ;;                      mov t0, *sp(#23)
     663              ;;                      mov mmap(ST1_55), t1
     663              ;                       mov t1, *sp(#26)                ; stomping on own mem
     663              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     663              ;;                      mov mmap(ST2_55), t2
     663              ;;                      mov t2, *sp(#22)
     663              ;                       mov t2, *sp(#27)
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   32

     663              ;;                      mov mmap(ST2_55), t3
     663              ;                       mov t3, *sp(#28)
     663              ;;                      mov t3, *sp(#24)
     663              
     663              ;                       PSH dbl(AR0) ; 32-bit
     663              ;                       PSH dbl(AR1) 
     663              ;                       PSH dbl(AR2) ; 32-bit
     663              ;                       PUSH XAR3 ; 32-bit
     663              ;                       PUSH XAR4 ; 32-bit
     663                              ;-- Comment these to save cycles --------
     663              ;                       PUSH XAR5 ; 32-bit
     663              ;                       PUSH XAR6 ; 32-bit
     663              ;                       PUSH XAR7 ; 32-bit
     663                              ;----------------------------------------
     663              
     663              ;                       PUSH XT   ; 32-bit
     663              
     663              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     663              ;                       push xar6 ; portFLAGS_INT_ENABLED
     663              
     663 0002aa ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0002ac EF00 
         0002ae 0000!
     663 0002b0 EB0C                          mov xar6, dbl(*sp(#6))
         0002b2 E5   
     663                                      
     663              
     663              ;                       movl xar7, @_usCriticalNesting
     663              ;                       push xar7
     663 0002b3 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0002b5 FF00 
         0002b7 0000!
     663 0002b9 EB08                          mov xar7, dbl(*sp(#4))
         0002bb F5   
     663              
     663 0002bc AF06                          mov mmap(ST1_55), ar7
         0002be 98   
     663 0002bf CF02                          mov ar7, *sp(#1)
     663 0002c1 AF96                          mov  mmap(ST2_55), ar7
         0002c3 98   
     663 0002c4 CF04                          mov ar7, *sp(#2)
     663              
     663 0002c6 449F                          mov ssp, ar7
     663 0002c8 AE04                          mov mmap(ST0_55), ar6
         0002ca 98   
     663 0002cb CEED                          mov ar6, *ar7(#2)
         0002cd 0002 
     663              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     663              ;;;                     mov ar6, *ar7(#2)
     663              ;                       mov ar7, mmap(ST0_55)
     663              ;                       mov *ssp(#2), ar7
     663              
     663              ; fix up
     663              ;                       aadd #20, sp
     663              ;                       mov sp, t0
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   33

     663              ;                       sub #1, t0
     663              ;                       mov t0, ssp
     663              
     663                                      ; move contents of SP into address of current TCB
     663              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     663              
     663              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     663              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     663              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     663              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     663              ;                       mov dbl (*ar7+), xssp
     663              
     663              ;                       mov sp, t0              ; we've already saved t0
     663              ;                       add #1, t0
     663              ;                       mov t0, ssp
     663              ; ??
     663              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     663              
     663              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     663              ;                       mov al, @sp
     663              ;                       movl  *xar6, acc        
     663              ;;                      mov  ar0, @sp
     663              ;;                      mov  @ar6, alxd
     663              ;;                      mov  ar0, @sp
     663              ;;                      movl 0(xar6), sp
     663              ;                       EDIS
     663              ;                       NASP
     663              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     663              ;                       NOP
     663 0002cf ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0002d1 4F00 
         0002d3 0000!
     663 0002d5 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0002d7 5F00 
         0002d9 0000!
     663 0002db 20                            nop
     663 0002dc 20                            nop
     663 0002dd 20                            nop
     664              
     665              ;        /* Switch to the highest priority task that is ready to run. */
     666 0002de 6C00          call    #_vTaskSwitchContext
         0002e0 0000!
     667 0002e2 E651          mov #1, *port(#6166) ; |127|
         0002e4 0118 
         0002e6 16   
     668 0002e7 F551                  or #0x0001, *port(#7188) ; |130|
         0002e9 0001 
         0002eb 1C14 
     669 0002ed 4E01                  aadd #1, sp
     670 ****** MACRO         portRESTORE_CONTEXT
     670                                      .C54CM_off
     670              ;                       .CPL_off
     670                                      .ARMS_off
     670                                      .align 4
     670              
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   34

     670              ; Restore context & return
     670                                      ;CONTEXT_RESTORE
     670              ;                       ASP
     670              ;                       EALLOW
     670              ;                       nop
     670              ;                       nop
     670              ;                       nop
     670              ;                       nop
     670 0002f0 4652                          bclr C54CM    
     670              ;               xssp = dbl(*(#_pxCurrentTCB))
     670              ;               xsp  = dbl(*(#_pxCurrentTCB))
     670 0002f2 EB31                          mov xar7, dbl (*(#_save_xar7))  
         0002f4 F500 
         0002f6 0000!
     670              
     670 0002f8 4EFD                          aadd #-3, sp
     670              ;            aadd #-3, xsp
     670              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     670              ;            BCC $1,TC1 ; |216|
     670 0002fa ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0002fc 4F00 
         0002fe 0000!
     670 000300 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000302 5F00 
         000304 0000!
     670              ;            B $4
     670              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     670              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     670              
     670              ;                       aadd #-3, sp
     670              ;$1
     670              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     670              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     670              ;$4
     670 000306 904F                          mov xsp, xar7
     670 000308 905E                          mov xssp, xar6
     670              
     670 00030a ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         00030c DF00 
         00030e 0000!
     670              
     670 000310 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         000312 CF   
     670 000313 EDAD                          mov dbl (*ar5(#2)), xar3                        
         000315 BF00 
         000317 02   
     670                                      
     670 000318 AA81                          mov *ar4, ar2
     670 00031a A961                          mov *ar3, ar1
     670              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     670 00031c CAE1                          mov ar2, *ar7
     670 00031e C9C1                          mov ar1, *ar6
     670              
     670              
     670              ;                       mov #0, ssp     
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   35

     670              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     670              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     670                                      ; 32-bit mode - will act on SP and SSP:
     670              ;                       'fix-up' current SP and SSP - is this dangerous????
     670              ;                       aadd #-3, sp
     670              ;;                      mov *ar7, *sp
     670              ;                       mov dbl (*ar7), ar6
     670              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     670              ;                       mov *ar7(#2), *ssp                      
     670              ;                       POP mmap(ST3_55)
     670              ;                       pshboth xar7                            ; should increment both
     670 000320 AF06                          mov mmap(ST1_55), ar7
         000322 98   
     670 000323 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         000325 FFFF 
     670 000327 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     670 000329 AF96                          mov mmap(ST2_55), ar7
         00032b 98   
     670 00032c CF04                          mov ar7, *sp(#2)
     670              
     670 00032e 449F                          mov ssp, ar7
     670 000330 AE04                          mov mmap(ST0_55), ar6
         000332 98   
     670 000333 CEED                          mov ar6, *ar7(#2)
         000335 0002 
     670              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     670              ;;                      mov ar6, *ar7(#1)
     670              
     670 000337 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000339 FF00 
         00033b 0000!
     670              
     670 00033d EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00033f 4F   
     670 000340 EDED                          mov dbl (*ar7(#2)), xssp                        
         000342 5F00 
         000344 02   
     670              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     670              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     670                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     670                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     670                                      mov xar6, dbl (*(#_save_xar6))
     670              
     670              ;; this is for debug
     670                                      mov dbl(*ar7), xar6
     670                                      mov dbl(*ar6), xar7
     670                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     670                                      mov xssp, xar7
     670                                      mov dbl(*ar7), xar6
     670                                      mov dbl(*ar6), xar7
     670                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     670                                      mov xssp, xar7
     670                                      add #-2, ar7
     670                                      mov dbl(*ar7), xar6
     670                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   36

     670                                      mov dbl (*(#_save_xar6)), xar6
     670                                      
     670                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     670                                      .endif
     670              
     670              ;                       mov mmap(ST0_55), *ssp(#1)
     670              ;                       mov mmap(STO_55), *ssp(#2)
     670              ;                       mov mmap(ST1_55), *sp(#1)
     670              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     670              ;                       mov *ar7, t0
     670              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     670              ;                       mov *ar7(#2), t0
     670              ;                       mov t0, *ssp(#0)                        
     670              
     670              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     670              ; what about xssp?
     670              ;                       mov xar6, xsp
     670              ;                       mov xssp, xar7
     670              ;                       add #1, ar7
     670              ;                       mov xar7, xsp
     670              ;                       mov sp, t0
     670              ;                       mov ssp, t1
     670              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     670              ;                       ar0 = *ar6
     670              ;                       xssp = xar0
     670              ;                       mov *xar6, xar0
     670              ;                       mov xar0, xssp  ; stack now points to our TCB
     670              ;;                      mov sp, *ar6
     670              ;;                      mov sp, ar0
     670              ;;                      mov sp, *_pxCurrentTCB
     670              ;;                      clr ar0
     670              ;;                      mov ar0, @xar6
     670              ;;                      mov sp, AR0
     670              ;;                      add sp, xar6
     670              
     670              ;;                      pshboth xar7
     670              ;;                      pshboth xar6
     670              ;;                      pshboth xar5
     670              
     670              ;;                      popboth xar5
     670              ;;                      popboth xar6
     670              ;;                      popboth xar7
     670              
     670              ;;;                     mov *sp(#1), ar7 
     670              ;                       mov dbl(*sp(#1)), ar7
     670              ;;;                     mov  ar7, mmap(ST1_55)
     670 000345 AF04                          mov *sp(#2), ar7
     670 000347 CF96                          mov ar7, mmap(ST2_55)
         000349 98   
     670 00034a 449F                          mov ssp, ar7
     670 00034c AEED                          mov *ar7(#2), ar6
         00034e 0002 
     670 000350 CE04                          mov ar6, mmap(ST0_55)
         000352 98   
     670              ;                       mov *ar7(#2), ar6
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   37

     670              ;                       mov ar6, *ssp(#2)
     670              ;                       mov *ssp(#2), ar7
     670              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     670              
     670 000353 ED08                          mov dbl(*sp(#4)), xar7
         000355 FF   
     670              ;                       mov *sp(#1), ar7
     670 000356 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000358 F500 
         00035a 0000!
     670              
     670 00035c ED0C                          mov dbl(*sp(#6)), xar6
         00035e EF   
     670              ;                       mov *sp(#3), ar6
     670              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     670 00035f EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         000361 E500 
         000363 0000!
     670              
     670              ;                       POP XT
     670                              ;-- Comment these to save cycles ---
     670 000365 ED10                          mov dbl(*sp(#8)), xar7
         000367 FF   
     670 000368 AF0E                          mov *sp(#7), ar7
     670              ;                       mov *sp(#5), ar7
     670              ;                       mov dbl(*sp(#0)), hi(ar7)
     670              ;                       mov (*sp(#0)), lo(ar7)
     670 00036a ED14                          mov dbl(*sp(#10)), xar6
         00036c EF   
     670 00036d AE12                          mov *sp(#9), ar6
     670 00036f ED18                          mov dbl(*sp(#12)), xar5
         000371 DF   
     670 000372 AD16                          mov *sp(#11), ar5
     670              ;; pvPararmeters currently here - needs to be verified --- jcw
     670 000374 ED1C                          mov dbl(*sp(#14)), xar4
         000376 CF   
     670 000377 AC1A                          mov *sp(#13), ar4
     670 000379 ED20                          mov dbl(*sp(#16)), xar3
         00037b BF   
     670 00037c AB1E                          mov *sp(#15), ar3
     670 00037e ED24                          mov dbl(*sp(#18)), xar2
         000380 AF   
     670 000381 AA22                          mov *sp(#17), ar2
     670 000383 ED28                          mov dbl(*sp(#20)), xar1
         000385 9F   
     670 000386 A926                          mov *sp(#19), ar1
     670 000388 ED2C                          mov dbl(*sp(#22)), xar0
         00038a 8F   
     670 00038b A82A                          mov *sp(#21), ar0
     670              
     670 00038d A72E                          mov *sp(#23), t3
     670 00038f A630                          mov *sp(#24), t2
     670 000391 A532                          mov *sp(#25), t1
     670 000393 A434                          mov *sp(#26), t0
     670              
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   38

     670              ;                       mov dbl(*sp(#21)), *xssp(#0)
     670              ;                       mov *sp(#21), *ssp
     670              ;                       mov *sp(#21), RETA
     670              ; need to move 23-16 to XSSP contents
     670              ;                       mov xar0, dbl (*(#_save_xar7))
     670              ;                       mov ssp, ar0
     670              ;                       mov #0, ssp 
     670              ;                       mov xssp, xar0
     670              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     670              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     670                      ;               add #1, xssp            ; 32-bit return address pointer
     670                      ;               amar *xssp+
     670              ;                       mov sp, t0
     670              ;                       add #1, t0
     670              ;                       mov t0, ssp
     670              ;                       incr ssp
     670              ;                       asub #20, ar0
     670              ;                       mov xar0, xssp
     670              ;                       mov ar0, ssp
     670              ;                       mov ar0, 
     670              ;;                      mov *sp(#1), t0
     670              ;;                      mov *sp(#3), t3         ; ST0
     670              ;;                      mov *sp(#4), t2         ; DBSTAT
     670              ;;                      mov t3, *ar0(#2)
     670                      ;;              mov t2, *ar0(#1)
     670              ;;                      mov t0, *ar0(#0)
     670              
     670              ;;                      mov *sp(#5), t0
     670              ;;                      mov *sp(#6), t1
     670              ;;                      mov *sp(#7), t2
     670                      ;;              mov *sp(#8), t3
     670              
     670              
     670              
     670              ; restore ar0
     670              ;                       mov dbl(*sp(#-2)), xar0
     670              ;                       mov #-1, ar0
     670              ;;                      mov dbl (*(#_save_xar7)), xar0
     670              ;;
     670              ;;                      mov sp, t0
     670              ;;                      add #1, t0
     670              ;;                      mov t0, ssp
     670              
     670              ;                       mov *sp(#3), *(#00004ch+#1)
     670              
     670              ;                       mov t3, *ssp(#1) 
     670              ;                       mov t2, *ssp(#2)
     670              
     670              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     670              ;;                      mov t3, *(ssp(#0))
     670              ;                       mov t3, *ssp
     670              ;                       mov *sp(#3), t3 ; 
     670              ;                       mov t3, *ssp(#1)
     670              ;;                      mov *sp(#21), PC        
     670              
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   39

     670              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     670              ;                       mov dbl(xsp), dbl(lcrpc)
     670              ;                       popboth XAR7
     670              ;                       add #1, sp
     670              ;                       add #1, ssp
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670              ;                       popboth XAR6
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670              ;                       popboth XAR5
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670                              ;-----------------------------------
     670              ;                       popboth XAR4
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670              ;                       popboth XAR3
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670              ;                       popboth XAR2
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670              ;                       popboth XAR1
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670              ;                       popboth XAR0
     670              ;                       add #2, t0
     670              ;                       add #2, t1
     670              ;                       mov t0, sp
     670              ;                       mov t1, ssp
     670              ;                       EDIS
     670              ;                       NASP    ; Un-align stack pointer
     670              ;;                      pop mmap(ST3_55)
     670              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     670              ;            BCC $2,TC1 ; |216|
     670 000395 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000397 4F00 
         000399 0000!
     670 00039b ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00039d 5F00 
TMS320C55x Assembler PC v4.4.1 Mon Sep 17 05:49:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   40

         00039f 0000!
     670              ;                       B $3
     670              ;$2
     670              ;            MOV #0, *(#_first_flag) ; |217|
     670              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     670              ;                       mov dbl (*(#_first_save_xssp)), xssp
     670              ;$3
     670              ;                       aadd #-3, sp
     670 0003a1 46B2                          bclr INTM               ; enable interrupts
     670              ;                       aadd #1, sp
     670 0003a3 4805                          RETI
     670              ;                       mov #1860h, ssp
     670 0003a5 20                            nop
     670 0003a6 20                            nop
     670              ;                       nop
     671              
     672              ;;;
     673              
     674              ;                /* Place the tick ISR in the correct vector. */
     675              
     676              ;;;                .sect ".int49"                       ; TIMER1_A0_VECTOR                      
     677              ;;                .sect ".int14"                        ; CPUTIMER2
     678              ;                 .sect ".text"                 ; CPUTIMER2
     679              ;;;;             .sect ".INT14_ISR"
     680              ;               .global _INT14_ISR
     681              ;;;; _INT14_ISR:
     682              ;;;;                .short   _vTickISR
     683              ;;;;            LCR #_vTickISR
     684                              .end

No Assembly Errors, No Assembly Warnings
