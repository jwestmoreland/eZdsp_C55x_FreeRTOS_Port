TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    1

     679              ; Temporary Registers Used: None
       1              ; .cdecls C, LIST, "FreeRTOSConfig.h"
       2              ;  .include "FreeRTOSConfig.h"
       3              ; 32-bit stack slow mode
       4                      .mmregs
       5              ;        .C54CM_on
       6              ;     .CPL_on
       7              ;      .ARMS_off
       8                       .align 4
       9              ;       .c28_amode
      10              
      11                        .global _usCriticalNesting
      12                           .global _save_xsp
      13                           .global _save_xssp
      14                           .global _first_save_xsp
      15                           .global _first_save_xssp
      16                           .global _first_flag
      17                           .global _save_xar7
      18                           .global _tZero
      19                           .global _save_xar6
      20                        .global _pxCurrentTCB
      21                           .global _xTaskIncrementTick
      22                           .ref    _xTaskIncrementTick
      23                           .global _vTaskSwitchContext
      24                           .global _prvSetupTimerInterrupt
      25                                       .global _tickIRQctr
      26              
      27              ;                         .ref configUSE_TICK_CTR
      28              ;                         .ref configUSE_PREEMPTION
      29              
      30                           .def _vPortYield
      31                           .def _xPortStartScheduler
      32                           .def _vTickISR
      33                           .global _vPortYield
      34                           .global _xPortStartScheduler
      35                           .global _vTickISR
      36                           .global _INT14_ISR
      37                           .global _portFLAGS_INT_ENABLED
      38                           .global _portFLAGS_INT_ENABLED_POPPED
      39                           .global _DBSTAT_SAVE
      40                           .global _DBSTAT_RESTORE
      41                           .global _STATUS0_LOW
      42                           .global _STATUS0_HIGH
      43                           .global _STATUS1_LOW
      44                           .global _STATUS1_HIGH
      45                           .global _STATUS2_LOW
      46                           .global _STATUS2_HIGH
      47                           .global _PC_REG_HIGH_SAVE
      48                           .global _PC_REG_LOW_SAVE
      49                           .global _PC_REG_HIGH_RESTORE
      50                           .global _PC_REG_LOW_RESTORE
      51              ;            .cdecls C,NOLIST,"portmacro.h"
      52              ;            .cdecls C,LIST,"FreeRTOSConfig.h"
      53              ;                       CLRC AMODE
      54              ;       System Stack
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    2

      55 000000               .text
      56              portSAVE_CONTEXT .macro 
      57              ;                       ;CONTEXT_SAVE
      58              ;                       ASP  ; Align Stack Pointer
      59              ;                       CLRC       OVM,PAGE0
      60              ;                       CLRC       AMODE
      61              ;                       EALLOW
      62              
      63                                      bclr C54CM      ; temp - until we figure out what is setting this
      64              
      65                                      bset INTM               ; disable interrupts
      66              
      67              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
      68              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
      69                                      
      70              ;                       pshboth xar7
      71              ;                       pshboth xar6
      72              ;                       pshboth xar5
      73              
      74                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
      75                                      mov xar6, dbl (*(#_save_xar6))
      76              
      77                                      mov dbl (*(#_pxCurrentTCB)), xar7
      78              ; does this *always* work?
      79                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
      80                                      mov dbl (*ar7(#2)), xssp                        
      81              ;; what about xssp here?
      82              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
      83              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
      84              
      85              ;; save current PC (and possible loop bits values)
      86              ;; for debug - to see if this is being corrupted
      87                                      mov dbl(*ar7), xar6
      88                                      mov dbl(*ar6), xar7
      89                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
      90                                      mov xssp, xar7
      91                                      mov dbl(*ar7), xar6
      92                                      mov dbl(*ar6), xar7
      93                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
      94                                      mov xssp, xar7
      95                                      add #-2, ar7
      96                                      mov dbl(*ar7), xar6
      97                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
      98              
      99              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     100              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     101              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     102              
     103                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     104                                      mov dbl (*(#_save_xar6)), xar6
     105              
     106                                      mov xar7, dbl(*sp(#8))                          ; save xar7
     107                                      mov ar7, *sp(#7)
     108              
     109                                      mov xar6, dbl(*sp(#10))
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    3

     110                                      mov ar6, *sp(#9)
     111              
     112                                      mov xar5, dbl(*sp(#12))
     113                                      mov ar5, *sp(#11)
     114              
     115                                      mov xar4, dbl(*sp(#14))
     116                                      mov ar4, *sp(#13)
     117              
     118                                      mov xar3, dbl(*sp(#16))
     119                                      mov ar3, *sp(#15)
     120              
     121                                      mov xar2, dbl(*sp(#18))
     122                                      mov ar2, *sp(#17)
     123              
     124                                      mov xar1, dbl(*sp(#20))
     125                                      mov ar1, *sp(#19)
     126              
     127                                      mov xar0, dbl(*sp(#22))
     128                                      mov ar0, *sp(#21)
     129              
     130                                      mov t3, *sp(#23)
     131                                      mov t2, *sp(#24)
     132                                      mov t1, *sp(#25)
     133                                      mov t0, *sp(#26)
     134              
     135              ;;                      mov mmap(ST0_55), t0
     136              ; - this is ok - we are not pushing - it's a relative stack frame
     137              ;                       mov t0, *sp(#25)
     138              ;;                      mov t0, *sp(#23)
     139              ;;                      mov mmap(ST1_55), t1
     140              ;                       mov t1, *sp(#26)                ; stomping on own mem
     141              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     142              ;;                      mov mmap(ST2_55), t2
     143              ;;                      mov t2, *sp(#22)
     144              ;                       mov t2, *sp(#27)
     145              ;;                      mov mmap(ST2_55), t3
     146              ;                       mov t3, *sp(#28)
     147              ;;                      mov t3, *sp(#24)
     148              
     149              ;                       PSH dbl(AR0) ; 32-bit
     150              ;                       PSH dbl(AR1) 
     151              ;                       PSH dbl(AR2) ; 32-bit
     152              ;                       PUSH XAR3 ; 32-bit
     153              ;                       PUSH XAR4 ; 32-bit
     154                              ;-- Comment these to save cycles --------
     155              ;                       PUSH XAR5 ; 32-bit
     156              ;                       PUSH XAR6 ; 32-bit
     157              ;                       PUSH XAR7 ; 32-bit
     158                              ;----------------------------------------
     159              
     160              ;                       PUSH XT   ; 32-bit
     161              
     162              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     163              ;                       push xar6 ; portFLAGS_INT_ENABLED
     164              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    4

     165                                      mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
     166                                      mov xar6, dbl(*sp(#6))
     167                                      
     168              
     169              ;                       movl xar7, @_usCriticalNesting
     170              ;                       push xar7
     171                                      mov dbl (*(#_usCriticalNesting)), xar7
     172                                      mov xar7, dbl(*sp(#4))
     173              
     174                                      mov mmap(ST1_55), ar7
     175                                      mov ar7, *sp(#1)
     176                                      mov  mmap(ST2_55), ar7
     177                                      mov ar7, *sp(#2)
     178              
     179                                      mov ssp, ar7
     180                                      mov mmap(ST0_55), ar6
     181                                      mov ar6, *ar7(#1)
     182              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     183              ;;;                     mov ar6, *ar7(#2)
     184              ;                       mov ar7, mmap(ST0_55)
     185              ;                       mov *ssp(#2), ar7
     186              
     187              ; fix up
     188              ;                       aadd #20, sp
     189              ;                       mov sp, t0
     190              ;                       sub #1, t0
     191              ;                       mov t0, ssp
     192              
     193                                      ; move contents of SP into address of current TCB
     194              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     195              
     196              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     197              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     198              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     199              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     200              ;                       mov dbl (*ar7+), xssp
     201              
     202              ;                       mov sp, t0              ; we've already saved t0
     203              ;                       add #1, t0
     204              ;                       mov t0, ssp
     205              ; ??
     206              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     207              
     208              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     209              ;                       mov al, @sp
     210              ;                       movl  *xar6, acc        
     211              ;;                      mov  ar0, @sp
     212              ;;                      mov  @ar6, alxd
     213              ;;                      mov  ar0, @sp
     214              ;;                      movl 0(xar6), sp
     215              ;                       EDIS
     216              ;                       NASP
     217              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     218              ;                       NOP
     219                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    5

     220                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     221                                      nop
     222                                      nop
     223                                      nop
     224                                      .endm
     225              
     226              portRESTORE_CONTEXT .macro
     227              ;                       .C54CM_on
     228              ;                       .CPL_on
     229              ;                       .ARMS_off
     230                                      .align 4
     231              
     232              ; Restore context & return
     233                                      ;CONTEXT_RESTORE
     234              ;                       ASP
     235              ;                       EALLOW
     236              ;                       nop
     237              ;                       nop
     238              ;                       nop
     239              ;                       nop
     240                                      bclr C54CM    
     241              ;               xssp = dbl(*(#_pxCurrentTCB))
     242              ;               xsp  = dbl(*(#_pxCurrentTCB))
     243                                      mov xar7, dbl (*(#_save_xar7))  
     244              
     245                                      aadd #-3, sp
     246              ;            aadd #-3, xsp
     247              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     248              ;            BCC $1,TC1 ; |216|
     249                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     250                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     251              ;            B $4
     252              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     253              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     254              
     255              ;                       aadd #-3, sp
     256              ;$1
     257              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     258              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     259              ;$4
     260                                      mov xsp, xar7
     261                                      mov xssp, xar6
     262              
     263                                      mov dbl (*(#_pxCurrentTCB)), xar5                       
     264              
     265                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     266                                      mov dbl (*ar5(#2)), xar3                        
     267                                      
     268                                      mov *ar4, ar2
     269                                      mov *ar3, ar1
     270              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     271                                      mov ar2, *ar7
     272                                      mov ar1, *ar6
     273              
     274              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    6

     275              ;                       mov #0, ssp     
     276              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     277              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     278                                      ; 32-bit mode - will act on SP and SSP:
     279              ;                       'fix-up' current SP and SSP - is this dangerous????
     280              ;                       aadd #-3, sp
     281              ;;                      mov *ar7, *sp
     282              ;                       mov dbl (*ar7), ar6
     283              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     284              ;                       mov *ar7(#2), *ssp                      
     285              ;                       POP mmap(ST3_55)
     286              ;                       pshboth xar7                            ; should increment both
     287                                      mov mmap(ST1_55), ar7
     288                                      and #0xf7ff, ar7                        ; <here>#0800h
     289                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     290                                      mov mmap(ST2_55), ar7
     291                                      mov ar7, *sp(#2)
     292              
     293                                      mov ssp, ar7
     294                                      mov mmap(ST0_55), ar6
     295                                      mov ar6, *ar7(#1)
     296              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     297              ;;                      mov ar6, *ar7(#2)
     298              
     299                                      mov dbl (*(#_pxCurrentTCB)), xar7
     300              
     301                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     302                                      mov dbl (*ar7(#2)), xssp                        
     303              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     304              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     305                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     306                                      mov xar6, dbl (*(#_save_xar6))
     307              
     308              ;; this is for debug
     309                                      mov dbl(*ar7), xar6
     310                                      mov dbl(*ar6), xar7
     311                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     312                                      mov xssp, xar7
     313                                      mov dbl(*ar7), xar6
     314                                      mov dbl(*ar6), xar7
     315                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     316                                      mov xssp, xar7
     317                                      add #-2, ar7
     318                                      mov dbl(*ar7), xar6
     319                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     320              
     321                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     322                                      mov dbl (*(#_save_xar6)), xar6
     323              
     324              ;                       mov mmap(ST0_55), *ssp(#1)
     325              ;                       mov mmap(STO_55), *ssp(#2)
     326              ;                       mov mmap(ST1_55), *sp(#1)
     327              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     328              ;                       mov *ar7, t0
     329              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    7

     330              ;                       mov *ar7(#2), t0
     331              ;                       mov t0, *ssp(#0)                        
     332              
     333              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     334              ; what about xssp?
     335              ;                       mov xar6, xsp
     336              ;                       mov xssp, xar7
     337              ;                       add #1, ar7
     338              ;                       mov xar7, xsp
     339              ;                       mov sp, t0
     340              ;                       mov ssp, t1
     341              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     342              ;                       ar0 = *ar6
     343              ;                       xssp = xar0
     344              ;                       mov *xar6, xar0
     345              ;                       mov xar0, xssp  ; stack now points to our TCB
     346              ;;                      mov sp, *ar6
     347              ;;                      mov sp, ar0
     348              ;;                      mov sp, *_pxCurrentTCB
     349              ;;                      clr ar0
     350              ;;                      mov ar0, @xar6
     351              ;;                      mov sp, AR0
     352              ;;                      add sp, xar6
     353              
     354              ;;                      pshboth xar7
     355              ;;                      pshboth xar6
     356              ;;                      pshboth xar5
     357              
     358              ;;                      popboth xar5
     359              ;;                      popboth xar6
     360              ;;                      popboth xar7
     361              
     362              ;;;                     mov *sp(#1), ar7 
     363              ;                       mov dbl(*sp(#1)), ar7
     364              ;;;                     mov  ar7, mmap(ST1_55)
     365                                      mov *sp(#2), ar7
     366                                      mov ar7, mmap(ST2_55)
     367                                      mov ssp, ar7
     368                                      mov *ar7(#1), ar6
     369                                      mov ar6, mmap(ST0_55)
     370                                      mov *ar7(#2), ar6
     371              ;                       mov ar6, *ssp(#2)
     372              ;                       mov *ssp(#2), ar7
     373              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     374              
     375                                      mov dbl(*sp(#4)), xar7
     376              ;                       mov *sp(#1), ar7
     377                                      mov xar7, dbl(*(#_usCriticalNesting))   
     378              
     379                                      mov dbl(*sp(#6)), xar6
     380              ;                       mov *sp(#3), ar6
     381              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     382                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     383              
     384              ;                       POP XT
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    8

     385                              ;-- Comment these to save cycles ---
     386                                      mov dbl(*sp(#8)), xar7
     387                                      mov *sp(#7), ar7
     388              ;                       mov *sp(#5), ar7
     389              ;                       mov dbl(*sp(#0)), hi(ar7)
     390              ;                       mov (*sp(#0)), lo(ar7)
     391                                      mov dbl(*sp(#10)), xar6
     392                                      mov *sp(#9), ar6
     393                                      mov dbl(*sp(#12)), xar5
     394                                      mov *sp(#11), ar5
     395              ;; pvPararmeters currently here - needs to be verified --- jcw
     396                                      mov dbl(*sp(#14)), xar4
     397                                      mov *sp(#13), ar4
     398                                      mov dbl(*sp(#16)), xar3
     399                                      mov *sp(#15), ar3
     400                                      mov dbl(*sp(#18)), xar2
     401                                      mov *sp(#17), ar2
     402                                      mov dbl(*sp(#20)), xar1
     403                                      mov *sp(#19), ar1
     404                                      mov dbl(*sp(#22)), xar0
     405                                      mov *sp(#21), ar0
     406              
     407                                      mov *sp(#23), t3
     408                                      mov *sp(#24), t2
     409                                      mov *sp(#25), t1
     410                                      mov *sp(#26), t0
     411              
     412              ;                       mov dbl(*sp(#21)), *xssp(#0)
     413              ;                       mov *sp(#21), *ssp
     414              ;                       mov *sp(#21), RETA
     415              ; need to move 23-16 to XSSP contents
     416              ;                       mov xar0, dbl (*(#_save_xar7))
     417              ;                       mov ssp, ar0
     418              ;                       mov #0, ssp 
     419              ;                       mov xssp, xar0
     420              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     421              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     422                      ;               add #1, xssp            ; 32-bit return address pointer
     423                      ;               amar *xssp+
     424              ;                       mov sp, t0
     425              ;                       add #1, t0
     426              ;                       mov t0, ssp
     427              ;                       incr ssp
     428              ;                       asub #20, ar0
     429              ;                       mov xar0, xssp
     430              ;                       mov ar0, ssp
     431              ;                       mov ar0, 
     432              ;;                      mov *sp(#1), t0
     433              ;;                      mov *sp(#3), t3         ; ST0
     434              ;;                      mov *sp(#4), t2         ; DBSTAT
     435              ;;                      mov t3, *ar0(#2)
     436                      ;;              mov t2, *ar0(#1)
     437              ;;                      mov t0, *ar0(#0)
     438              
     439              ;;                      mov *sp(#5), t0
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    9

     440              ;;                      mov *sp(#6), t1
     441              ;;                      mov *sp(#7), t2
     442                      ;;              mov *sp(#8), t3
     443              
     444              
     445              
     446              ; restore ar0
     447              ;                       mov dbl(*sp(#-2)), xar0
     448              ;                       mov #-1, ar0
     449              ;;                      mov dbl (*(#_save_xar7)), xar0
     450              ;;
     451              ;;                      mov sp, t0
     452              ;;                      add #1, t0
     453              ;;                      mov t0, ssp
     454              
     455              ;                       mov *sp(#3), *(#00004ch+#1)
     456              
     457              ;                       mov t3, *ssp(#1) 
     458              ;                       mov t2, *ssp(#2)
     459              
     460              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     461              ;;                      mov t3, *(ssp(#0))
     462              ;                       mov t3, *ssp
     463              ;                       mov *sp(#3), t3 ; 
     464              ;                       mov t3, *ssp(#1)
     465              ;;                      mov *sp(#21), PC        
     466              
     467              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     468              ;                       mov dbl(xsp), dbl(lcrpc)
     469              ;                       popboth XAR7
     470              ;                       add #1, sp
     471              ;                       add #1, ssp
     472              ;                       add #2, t0
     473              ;                       add #2, t1
     474              ;                       mov t0, sp
     475              ;                       mov t1, ssp
     476              ;                       popboth XAR6
     477              ;                       add #2, t0
     478              ;                       add #2, t1
     479              ;                       mov t0, sp
     480              ;                       mov t1, ssp
     481              ;                       popboth XAR5
     482              ;                       add #2, t0
     483              ;                       add #2, t1
     484              ;                       mov t0, sp
     485              ;                       mov t1, ssp
     486                              ;-----------------------------------
     487              ;                       popboth XAR4
     488              ;                       add #2, t0
     489              ;                       add #2, t1
     490              ;                       mov t0, sp
     491              ;                       mov t1, ssp
     492              ;                       popboth XAR3
     493              ;                       add #2, t0
     494              ;                       add #2, t1
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   10

     495              ;                       mov t0, sp
     496              ;                       mov t1, ssp
     497              ;                       popboth XAR2
     498              ;                       add #2, t0
     499              ;                       add #2, t1
     500              ;                       mov t0, sp
     501              ;                       mov t1, ssp
     502              ;                       popboth XAR1
     503              ;                       add #2, t0
     504              ;                       add #2, t1
     505              ;                       mov t0, sp
     506              ;                       mov t1, ssp
     507              ;                       popboth XAR0
     508              ;                       add #2, t0
     509              ;                       add #2, t1
     510              ;                       mov t0, sp
     511              ;                       mov t1, ssp
     512              ;                       EDIS
     513              ;                       NASP    ; Un-align stack pointer
     514              ;;                      pop mmap(ST3_55)
     515              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     516              ;            BCC $2,TC1 ; |216|
     517                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     518                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     519              ;                       B $3
     520              ;$2
     521              ;            MOV #0, *(#_first_flag) ; |217|
     522              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     523              ;                       mov dbl (*(#_first_save_xssp)), xssp
     524              ;$3
     525              ;                       aadd #-3, sp
     526                                      bclr INTM               ; enable interrupts
     527              ;                       aadd #1, sp
     528                                      RETI
     529              ;                       mov #1860h, ssp
     530                                      nop
     531                                      nop
     532              ;                       nop
     533                                      .endm
     534              ; /*-----------------------------------------------------------*/
     535              
     536              ; /*
     537              ; * The RTOS tick ISR.
     538              ; *
     539              ; * If the cooperative scheduler is in use this simply increments the tick
     540              ; * count.
     541              ; *
     542              ; * If the preemptive scheduler is in use a context switch can also occur.
     543              ; */
     544              
     545              
     546 000000       _xPortStartScheduler:
     547              
     548              ;                /* Setup the hardware to generate the tick.  Interrupts are disabled
     549              ;                when this function is called. */
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   11

     550 000000 4EFF                 aadd #-1, sp
     551 000002 6C00                 call    #_prvSetupTimerInterrupt
         000004 0000!
     552              
     553              ;                /* Restore the context of the first task that is going to run. */
     554              
     555              ;;              INTR INT14      ; force interrupt - just for debug purposes.
     556              
     557              ;;            psh mmap(ST3_55)
     558 000006 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000008 F500 
         00000a 0000!
     559 00000c EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save xar6 
         00000e E500 
         000010 0000!
     560              
     561 000012 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000014 FF00 
         000016 0000!
     562              ; does this *always* work?
     563 000018 EDE1                          mov dbl (*ar7), xar6
         00001a EF   
     564              ;                       mov xsp, dbl (*(#_first_save_xsp))              ; (init) xsp contains our TCB now
     565 00001b EB31                          mov xsp, dbl (*(#_save_xsp))            ; (init) xsp contains our TCB now
         00001d 4500 
         00001f 0000!
     566 000021 EDE3                          mov dbl (*ar7+), xar6
         000023 EF   
     567              ;                       mov xssp, dbl (*(#_first_save_xssp))
     568 000024 EB31                          mov xssp, dbl (*(#_save_xssp))
         000026 5500 
         000028 0000!
     569              ;                       mov #1, *(#_first_flag)
     570              
     571              ; what about xssp here?
     572 00002a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00002c FF00 
         00002e 0000!
     573 000030 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000032 EF00 
         000034 0000!
     574 000036 4E01                          aadd #1, sp
     575 ****** MACRO             portRESTORE_CONTEXT
     575              ;                       .C54CM_on
     575              ;                       .CPL_on
     575              ;                       .ARMS_off
     575                                      .align 4
     575              
     575              ; Restore context & return
     575                                      ;CONTEXT_RESTORE
     575              ;                       ASP
     575              ;                       EALLOW
     575              ;                       nop
     575              ;                       nop
     575              ;                       nop
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   12

     575              ;                       nop
     575 000038 4652                          bclr C54CM    
     575              ;               xssp = dbl(*(#_pxCurrentTCB))
     575              ;               xsp  = dbl(*(#_pxCurrentTCB))
     575 00003a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00003c F500 
         00003e 0000!
     575              
     575 000040 4EFD                          aadd #-3, sp
     575              ;            aadd #-3, xsp
     575              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     575              ;            BCC $1,TC1 ; |216|
     575 000042 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000044 4F00 
         000046 0000!
     575 000048 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00004a 5F00 
         00004c 0000!
     575              ;            B $4
     575              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     575              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     575              
     575              ;                       aadd #-3, sp
     575              ;$1
     575              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     575              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     575              ;$4
     575 00004e 904F                          mov xsp, xar7
     575 000050 905E                          mov xssp, xar6
     575              
     575 000052 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000054 DF00 
         000056 0000!
     575              
     575 000058 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00005a CF   
     575 00005b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00005d BF00 
         00005f 02   
     575                                      
     575 000060 AA81                          mov *ar4, ar2
     575 000062 A961                          mov *ar3, ar1
     575              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     575 000064 CAE1                          mov ar2, *ar7
     575 000066 C9C1                          mov ar1, *ar6
     575              
     575              
     575              ;                       mov #0, ssp     
     575              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     575              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     575                                      ; 32-bit mode - will act on SP and SSP:
     575              ;                       'fix-up' current SP and SSP - is this dangerous????
     575              ;                       aadd #-3, sp
     575              ;;                      mov *ar7, *sp
     575              ;                       mov dbl (*ar7), ar6
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   13

     575              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     575              ;                       mov *ar7(#2), *ssp                      
     575              ;                       POP mmap(ST3_55)
     575              ;                       pshboth xar7                            ; should increment both
     575 000068 AF06                          mov mmap(ST1_55), ar7
         00006a 98   
     575 00006b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00006d FFFF 
     575 00006f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     575 000071 AF96                          mov mmap(ST2_55), ar7
         000073 98   
     575 000074 CF04                          mov ar7, *sp(#2)
     575              
     575 000076 449F                          mov ssp, ar7
     575 000078 AE04                          mov mmap(ST0_55), ar6
         00007a 98   
     575 00007b CEED                          mov ar6, *ar7(#1)
         00007d 0001 
     575              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     575              ;;                      mov ar6, *ar7(#2)
     575              
     575 00007f ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000081 FF00 
         000083 0000!
     575              
     575 000085 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000087 4F   
     575 000088 EDED                          mov dbl (*ar7(#2)), xssp                        
         00008a 5F00 
         00008c 02   
     575              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     575              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     575 00008d EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7
         00008f F500 
         000091 0000!
     575 000093 EB31                          mov xar6, dbl (*(#_save_xar6))
         000095 E500 
         000097 0000!
     575              
     575              ;; this is for debug
     575 000099 EDE1                          mov dbl(*ar7), xar6
         00009b EF   
     575 00009c EDC1                          mov dbl(*ar6), xar7
         00009e FF   
     575 00009f EB31                          mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
         0000a1 F500 
         0000a3 0000!
     575 0000a5 905F                          mov xssp, xar7
     575 0000a7 EDE1                          mov dbl(*ar7), xar6
         0000a9 EF   
     575 0000aa EDC1                          mov dbl(*ar6), xar7
         0000ac FF   
     575 0000ad EB31                          mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
         0000af F500 
         0000b1 0000!
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   14

     575 0000b3 905F                          mov xssp, xar7
     575 0000b5 7BFF                          add #-2, ar7
         0000b7 FEFF 
     575 0000b9 EDE1                          mov dbl(*ar7), xar6
         0000bb EF   
     575 0000bc EB31                          mov xar6,  dbl (*(_DBSTAT_RESTORE))
         0000be E500 
         0000c0 0000!
     575              
     575 0000c2 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         0000c4 FF00 
         0000c6 0000!
     575 0000c8 ED31                          mov dbl (*(#_save_xar6)), xar6
         0000ca EF00 
         0000cc 0000!
     575              
     575              ;                       mov mmap(ST0_55), *ssp(#1)
     575              ;                       mov mmap(STO_55), *ssp(#2)
     575              ;                       mov mmap(ST1_55), *sp(#1)
     575              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     575              ;                       mov *ar7, t0
     575              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     575              ;                       mov *ar7(#2), t0
     575              ;                       mov t0, *ssp(#0)                        
     575              
     575              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     575              ; what about xssp?
     575              ;                       mov xar6, xsp
     575              ;                       mov xssp, xar7
     575              ;                       add #1, ar7
     575              ;                       mov xar7, xsp
     575              ;                       mov sp, t0
     575              ;                       mov ssp, t1
     575              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     575              ;                       ar0 = *ar6
     575              ;                       xssp = xar0
     575              ;                       mov *xar6, xar0
     575              ;                       mov xar0, xssp  ; stack now points to our TCB
     575              ;;                      mov sp, *ar6
     575              ;;                      mov sp, ar0
     575              ;;                      mov sp, *_pxCurrentTCB
     575              ;;                      clr ar0
     575              ;;                      mov ar0, @xar6
     575              ;;                      mov sp, AR0
     575              ;;                      add sp, xar6
     575              
     575              ;;                      pshboth xar7
     575              ;;                      pshboth xar6
     575              ;;                      pshboth xar5
     575              
     575              ;;                      popboth xar5
     575              ;;                      popboth xar6
     575              ;;                      popboth xar7
     575              
     575              ;;;                     mov *sp(#1), ar7 
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   15

     575              ;                       mov dbl(*sp(#1)), ar7
     575              ;;;                     mov  ar7, mmap(ST1_55)
     575 0000ce AF04                          mov *sp(#2), ar7
     575 0000d0 CF96                          mov ar7, mmap(ST2_55)
         0000d2 98   
     575 0000d3 449F                          mov ssp, ar7
     575 0000d5 AEED                          mov *ar7(#1), ar6
         0000d7 0001 
     575 0000d9 CE04                          mov ar6, mmap(ST0_55)
         0000db 98   
     575 0000dc AEED                          mov *ar7(#2), ar6
         0000de 0002 
     575              ;                       mov ar6, *ssp(#2)
     575              ;                       mov *ssp(#2), ar7
     575              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     575              
     575 0000e0 ED08                          mov dbl(*sp(#4)), xar7
         0000e2 FF   
     575              ;                       mov *sp(#1), ar7
     575 0000e3 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0000e5 F500 
         0000e7 0000!
     575              
     575 0000e9 ED0C                          mov dbl(*sp(#6)), xar6
         0000eb EF   
     575              ;                       mov *sp(#3), ar6
     575              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     575 0000ec EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0000ee E500 
         0000f0 0000!
     575              
     575              ;                       POP XT
     575                              ;-- Comment these to save cycles ---
     575 0000f2 ED10                          mov dbl(*sp(#8)), xar7
         0000f4 FF   
     575 0000f5 AF0E                          mov *sp(#7), ar7
     575              ;                       mov *sp(#5), ar7
     575              ;                       mov dbl(*sp(#0)), hi(ar7)
     575              ;                       mov (*sp(#0)), lo(ar7)
     575 0000f7 ED14                          mov dbl(*sp(#10)), xar6
         0000f9 EF   
     575 0000fa AE12                          mov *sp(#9), ar6
     575 0000fc ED18                          mov dbl(*sp(#12)), xar5
         0000fe DF   
     575 0000ff AD16                          mov *sp(#11), ar5
     575              ;; pvPararmeters currently here - needs to be verified --- jcw
     575 000101 ED1C                          mov dbl(*sp(#14)), xar4
         000103 CF   
     575 000104 AC1A                          mov *sp(#13), ar4
     575 000106 ED20                          mov dbl(*sp(#16)), xar3
         000108 BF   
     575 000109 AB1E                          mov *sp(#15), ar3
     575 00010b ED24                          mov dbl(*sp(#18)), xar2
         00010d AF   
     575 00010e AA22                          mov *sp(#17), ar2
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   16

     575 000110 ED28                          mov dbl(*sp(#20)), xar1
         000112 9F   
     575 000113 A926                          mov *sp(#19), ar1
     575 000115 ED2C                          mov dbl(*sp(#22)), xar0
         000117 8F   
     575 000118 A82A                          mov *sp(#21), ar0
     575              
     575 00011a A72E                          mov *sp(#23), t3
     575 00011c A630                          mov *sp(#24), t2
     575 00011e A532                          mov *sp(#25), t1
     575 000120 A434                          mov *sp(#26), t0
     575              
     575              ;                       mov dbl(*sp(#21)), *xssp(#0)
     575              ;                       mov *sp(#21), *ssp
     575              ;                       mov *sp(#21), RETA
     575              ; need to move 23-16 to XSSP contents
     575              ;                       mov xar0, dbl (*(#_save_xar7))
     575              ;                       mov ssp, ar0
     575              ;                       mov #0, ssp 
     575              ;                       mov xssp, xar0
     575              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     575              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     575                      ;               add #1, xssp            ; 32-bit return address pointer
     575                      ;               amar *xssp+
     575              ;                       mov sp, t0
     575              ;                       add #1, t0
     575              ;                       mov t0, ssp
     575              ;                       incr ssp
     575              ;                       asub #20, ar0
     575              ;                       mov xar0, xssp
     575              ;                       mov ar0, ssp
     575              ;                       mov ar0, 
     575              ;;                      mov *sp(#1), t0
     575              ;;                      mov *sp(#3), t3         ; ST0
     575              ;;                      mov *sp(#4), t2         ; DBSTAT
     575              ;;                      mov t3, *ar0(#2)
     575                      ;;              mov t2, *ar0(#1)
     575              ;;                      mov t0, *ar0(#0)
     575              
     575              ;;                      mov *sp(#5), t0
     575              ;;                      mov *sp(#6), t1
     575              ;;                      mov *sp(#7), t2
     575                      ;;              mov *sp(#8), t3
     575              
     575              
     575              
     575              ; restore ar0
     575              ;                       mov dbl(*sp(#-2)), xar0
     575              ;                       mov #-1, ar0
     575              ;;                      mov dbl (*(#_save_xar7)), xar0
     575              ;;
     575              ;;                      mov sp, t0
     575              ;;                      add #1, t0
     575              ;;                      mov t0, ssp
     575              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   17

     575              ;                       mov *sp(#3), *(#00004ch+#1)
     575              
     575              ;                       mov t3, *ssp(#1) 
     575              ;                       mov t2, *ssp(#2)
     575              
     575              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     575              ;;                      mov t3, *(ssp(#0))
     575              ;                       mov t3, *ssp
     575              ;                       mov *sp(#3), t3 ; 
     575              ;                       mov t3, *ssp(#1)
     575              ;;                      mov *sp(#21), PC        
     575              
     575              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     575              ;                       mov dbl(xsp), dbl(lcrpc)
     575              ;                       popboth XAR7
     575              ;                       add #1, sp
     575              ;                       add #1, ssp
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR6
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR5
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575                              ;-----------------------------------
     575              ;                       popboth XAR4
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR3
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR2
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR1
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR0
     575              ;                       add #2, t0
     575              ;                       add #2, t1
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   18

     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       EDIS
     575              ;                       NASP    ; Un-align stack pointer
     575              ;;                      pop mmap(ST3_55)
     575              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     575              ;            BCC $2,TC1 ; |216|
     575 000122 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000124 4F00 
         000126 0000!
     575 000128 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00012a 5F00 
         00012c 0000!
     575              ;                       B $3
     575              ;$2
     575              ;            MOV #0, *(#_first_flag) ; |217|
     575              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     575              ;                       mov dbl (*(#_first_save_xssp)), xssp
     575              ;$3
     575              ;                       aadd #-3, sp
     575 00012e 46B2                          bclr INTM               ; enable interrupts
     575              ;                       aadd #1, sp
     575 000130 4805                          RETI
     575              ;                       mov #1860h, ssp
     575 000132 20                            nop
     575 000133 20                            nop
     575              ;                       nop
     576              
     577              
     578 000134       _vTickISR:              ; the timer ISR is aggregated for this processor architecture
     579               ;               bclr IFR0.IF4          ; enable interrupts
     580                              
     581 000134 4EFF                  aadd #-1, sp
     582 000136 E651                  MOV #0, *port(#6166) ; |119|
         000138 0018 
         00013a 16   
     583 00013b F402                  AND #0x0010, mmap(@IFR0)
         00013d 0010 
         00013f 98   
     584 000140 46B3                  bset INTM
     585              ;           MOV *port(#7188), AR1 ; |68|                ;; TIMER0 is only timer that is active
     586              ;        BSET @#0, AR1 ; |68|
     587              ;        BCC $1,AR1 == #0 ; |68|
     588              ;        AND #0x0010, *(#1)
     589              
     590              ;               bset INTM               ; disable interrupts
     591                              .if configUSE_TICK_CTR == 1
     592 000142 F731                  add #1, *(#_tickIRQctr)
         000144 0001 
         000146 0000 
         000148 00!  
     593                              .endif
     594              ;;              psh mmap(ST3_55)
     595 ****** MACRO         portSAVE_CONTEXT
     595              ;                       ;CONTEXT_SAVE
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   19

     595              ;                       ASP  ; Align Stack Pointer
     595              ;                       CLRC       OVM,PAGE0
     595              ;                       CLRC       AMODE
     595              ;                       EALLOW
     595              
     595 000149 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     595              
     595 00014b 46B3                          bset INTM               ; disable interrupts
     595              
     595              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     595              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     595                                      
     595              ;                       pshboth xar7
     595              ;                       pshboth xar6
     595              ;                       pshboth xar5
     595              
     595 00014d EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         00014f F500 
         000151 0000!
     595 000153 EB31                          mov xar6, dbl (*(#_save_xar6))
         000155 E500 
         000157 0000!
     595              
     595 000159 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         00015b FF00 
         00015d 0000!
     595              ; does this *always* work?
     595 00015f EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000161 4F   
     595 000162 EDED                          mov dbl (*ar7(#2)), xssp                        
         000164 5F00 
         000166 02   
     595              ;; what about xssp here?
     595              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     595              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     595              
     595              ;; save current PC (and possible loop bits values)
     595              ;; for debug - to see if this is being corrupted
     595 000167 EDE1                          mov dbl(*ar7), xar6
         000169 EF   
     595 00016a EDC1                          mov dbl(*ar6), xar7
         00016c FF   
     595 00016d EB31                          mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
         00016f F500 
         000171 0000!
     595 000173 905F                          mov xssp, xar7
     595 000175 EDE1                          mov dbl(*ar7), xar6
         000177 EF   
     595 000178 EDC1                          mov dbl(*ar6), xar7
         00017a FF   
     595 00017b EB31                          mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
         00017d F500 
         00017f 0000!
     595 000181 905F                          mov xssp, xar7
     595 000183 7BFF                          add #-2, ar7
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   20

         000185 FEFF 
     595 000187 EDE1                          mov dbl(*ar7), xar6
         000189 EF   
     595 00018a EB31                          mov xar6,  dbl (*(_DBSTAT_SAVE))
         00018c E500 
         00018e 0000!
     595              
     595              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     595              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     595              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     595              
     595 000190 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000192 FF00 
         000194 0000!
     595 000196 ED31                          mov dbl (*(#_save_xar6)), xar6
         000198 EF00 
         00019a 0000!
     595              
     595 00019c EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         00019e F5   
     595 00019f CF0E                          mov ar7, *sp(#7)
     595              
     595 0001a1 EB14                          mov xar6, dbl(*sp(#10))
         0001a3 E5   
     595 0001a4 CE12                          mov ar6, *sp(#9)
     595              
     595 0001a6 EB18                          mov xar5, dbl(*sp(#12))
         0001a8 D5   
     595 0001a9 CD16                          mov ar5, *sp(#11)
     595              
     595 0001ab EB1C                          mov xar4, dbl(*sp(#14))
         0001ad C5   
     595 0001ae CC1A                          mov ar4, *sp(#13)
     595              
     595 0001b0 EB20                          mov xar3, dbl(*sp(#16))
         0001b2 B5   
     595 0001b3 CB1E                          mov ar3, *sp(#15)
     595              
     595 0001b5 EB24                          mov xar2, dbl(*sp(#18))
         0001b7 A5   
     595 0001b8 CA22                          mov ar2, *sp(#17)
     595              
     595 0001ba EB28                          mov xar1, dbl(*sp(#20))
         0001bc 95   
     595 0001bd C926                          mov ar1, *sp(#19)
     595              
     595 0001bf EB2C                          mov xar0, dbl(*sp(#22))
         0001c1 85   
     595 0001c2 C82A                          mov ar0, *sp(#21)
     595              
     595 0001c4 C72E                          mov t3, *sp(#23)
     595 0001c6 C630                          mov t2, *sp(#24)
     595 0001c8 C532                          mov t1, *sp(#25)
     595 0001ca C434                          mov t0, *sp(#26)
     595              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   21

     595              ;;                      mov mmap(ST0_55), t0
     595              ; - this is ok - we are not pushing - it's a relative stack frame
     595              ;                       mov t0, *sp(#25)
     595              ;;                      mov t0, *sp(#23)
     595              ;;                      mov mmap(ST1_55), t1
     595              ;                       mov t1, *sp(#26)                ; stomping on own mem
     595              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     595              ;;                      mov mmap(ST2_55), t2
     595              ;;                      mov t2, *sp(#22)
     595              ;                       mov t2, *sp(#27)
     595              ;;                      mov mmap(ST2_55), t3
     595              ;                       mov t3, *sp(#28)
     595              ;;                      mov t3, *sp(#24)
     595              
     595              ;                       PSH dbl(AR0) ; 32-bit
     595              ;                       PSH dbl(AR1) 
     595              ;                       PSH dbl(AR2) ; 32-bit
     595              ;                       PUSH XAR3 ; 32-bit
     595              ;                       PUSH XAR4 ; 32-bit
     595                              ;-- Comment these to save cycles --------
     595              ;                       PUSH XAR5 ; 32-bit
     595              ;                       PUSH XAR6 ; 32-bit
     595              ;                       PUSH XAR7 ; 32-bit
     595                              ;----------------------------------------
     595              
     595              ;                       PUSH XT   ; 32-bit
     595              
     595              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     595              ;                       push xar6 ; portFLAGS_INT_ENABLED
     595              
     595 0001cc ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0001ce EF00 
         0001d0 0000!
     595 0001d2 EB0C                          mov xar6, dbl(*sp(#6))
         0001d4 E5   
     595                                      
     595              
     595              ;                       movl xar7, @_usCriticalNesting
     595              ;                       push xar7
     595 0001d5 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0001d7 FF00 
         0001d9 0000!
     595 0001db EB08                          mov xar7, dbl(*sp(#4))
         0001dd F5   
     595              
     595 0001de AF06                          mov mmap(ST1_55), ar7
         0001e0 98   
     595 0001e1 CF02                          mov ar7, *sp(#1)
     595 0001e3 AF96                          mov  mmap(ST2_55), ar7
         0001e5 98   
     595 0001e6 CF04                          mov ar7, *sp(#2)
     595              
     595 0001e8 449F                          mov ssp, ar7
     595 0001ea AE04                          mov mmap(ST0_55), ar6
         0001ec 98   
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   22

     595 0001ed CEED                          mov ar6, *ar7(#1)
         0001ef 0001 
     595              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     595              ;;;                     mov ar6, *ar7(#2)
     595              ;                       mov ar7, mmap(ST0_55)
     595              ;                       mov *ssp(#2), ar7
     595              
     595              ; fix up
     595              ;                       aadd #20, sp
     595              ;                       mov sp, t0
     595              ;                       sub #1, t0
     595              ;                       mov t0, ssp
     595              
     595                                      ; move contents of SP into address of current TCB
     595              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     595              
     595              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     595              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     595              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     595              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     595              ;                       mov dbl (*ar7+), xssp
     595              
     595              ;                       mov sp, t0              ; we've already saved t0
     595              ;                       add #1, t0
     595              ;                       mov t0, ssp
     595              ; ??
     595              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     595              
     595              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     595              ;                       mov al, @sp
     595              ;                       movl  *xar6, acc        
     595              ;;                      mov  ar0, @sp
     595              ;;                      mov  @ar6, alxd
     595              ;;                      mov  ar0, @sp
     595              ;;                      movl 0(xar6), sp
     595              ;                       EDIS
     595              ;                       NASP
     595              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     595              ;                       NOP
     595 0001f1 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0001f3 4F00 
         0001f5 0000!
     595 0001f7 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0001f9 5F00 
         0001fb 0000!
     595 0001fd 20                            nop
     595 0001fe 20                            nop
     595 0001ff 20                            nop
     596              
     597 000200 6C00          call     #_xTaskIncrementTick
         000202 0000!
     598              
     599                      .if configUSE_PREEMPTION == 1
     600              ;        mov xsp, dbl (*(#_save_xsp))                   ; save xsp
     601              ;           mov xssp, dbl (*(#_save_xssp))                      ; save xssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   23

     602 000204 6C00          call    #_vTaskSwitchContext
         000206 0000!
     603                      .endif
     604              ;$1:
     605              ;               bclr INTM
     606 000208 E651                  mov #1, *port(#6166) ; |127|
         00020a 0118 
         00020c 16   
     607              ;               MOV #0, *port(#6294) ; |92|
     608 00020d F551                  or #0x0001, *port(#7188) ; |130|
         00020f 0001 
         000211 1C14 
     609               ;       OR #0x0007, *port(#7188) ; |100|
     610 000213 4E01                  aadd #1, sp
     611 ****** MACRO         portRESTORE_CONTEXT
     611              ;                       .C54CM_on
     611              ;                       .CPL_on
     611              ;                       .ARMS_off
     611                                      .align 4
     611              
     611              ; Restore context & return
     611                                      ;CONTEXT_RESTORE
     611              ;                       ASP
     611              ;                       EALLOW
     611              ;                       nop
     611              ;                       nop
     611              ;                       nop
     611              ;                       nop
     611 000218 4652                          bclr C54CM    
     611              ;               xssp = dbl(*(#_pxCurrentTCB))
     611              ;               xsp  = dbl(*(#_pxCurrentTCB))
     611 00021a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00021c F500 
         00021e 0000!
     611              
     611 000220 4EFD                          aadd #-3, sp
     611              ;            aadd #-3, xsp
     611              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     611              ;            BCC $1,TC1 ; |216|
     611 000222 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000224 4F00 
         000226 0000!
     611 000228 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00022a 5F00 
         00022c 0000!
     611              ;            B $4
     611              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     611              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     611              
     611              ;                       aadd #-3, sp
     611              ;$1
     611              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     611              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     611              ;$4
     611 00022e 904F                          mov xsp, xar7
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   24

     611 000230 905E                          mov xssp, xar6
     611              
     611 000232 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000234 DF00 
         000236 0000!
     611              
     611 000238 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00023a CF   
     611 00023b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00023d BF00 
         00023f 02   
     611                                      
     611 000240 AA81                          mov *ar4, ar2
     611 000242 A961                          mov *ar3, ar1
     611              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     611 000244 CAE1                          mov ar2, *ar7
     611 000246 C9C1                          mov ar1, *ar6
     611              
     611              
     611              ;                       mov #0, ssp     
     611              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     611              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     611                                      ; 32-bit mode - will act on SP and SSP:
     611              ;                       'fix-up' current SP and SSP - is this dangerous????
     611              ;                       aadd #-3, sp
     611              ;;                      mov *ar7, *sp
     611              ;                       mov dbl (*ar7), ar6
     611              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     611              ;                       mov *ar7(#2), *ssp                      
     611              ;                       POP mmap(ST3_55)
     611              ;                       pshboth xar7                            ; should increment both
     611 000248 AF06                          mov mmap(ST1_55), ar7
         00024a 98   
     611 00024b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00024d FFFF 
     611 00024f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     611 000251 AF96                          mov mmap(ST2_55), ar7
         000253 98   
     611 000254 CF04                          mov ar7, *sp(#2)
     611              
     611 000256 449F                          mov ssp, ar7
     611 000258 AE04                          mov mmap(ST0_55), ar6
         00025a 98   
     611 00025b CEED                          mov ar6, *ar7(#1)
         00025d 0001 
     611              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     611              ;;                      mov ar6, *ar7(#2)
     611              
     611 00025f ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000261 FF00 
         000263 0000!
     611              
     611 000265 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000267 4F   
     611 000268 EDED                          mov dbl (*ar7(#2)), xssp                        
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   25

         00026a 5F00 
         00026c 02   
     611              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     611              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     611 00026d EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7
         00026f F500 
         000271 0000!
     611 000273 EB31                          mov xar6, dbl (*(#_save_xar6))
         000275 E500 
         000277 0000!
     611              
     611              ;; this is for debug
     611 000279 EDE1                          mov dbl(*ar7), xar6
         00027b EF   
     611 00027c EDC1                          mov dbl(*ar6), xar7
         00027e FF   
     611 00027f EB31                          mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
         000281 F500 
         000283 0000!
     611 000285 905F                          mov xssp, xar7
     611 000287 EDE1                          mov dbl(*ar7), xar6
         000289 EF   
     611 00028a EDC1                          mov dbl(*ar6), xar7
         00028c FF   
     611 00028d EB31                          mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
         00028f F500 
         000291 0000!
     611 000293 905F                          mov xssp, xar7
     611 000295 7BFF                          add #-2, ar7
         000297 FEFF 
     611 000299 EDE1                          mov dbl(*ar7), xar6
         00029b EF   
     611 00029c EB31                          mov xar6,  dbl (*(_DBSTAT_RESTORE))
         00029e E500 
         0002a0 0000!
     611              
     611 0002a2 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         0002a4 FF00 
         0002a6 0000!
     611 0002a8 ED31                          mov dbl (*(#_save_xar6)), xar6
         0002aa EF00 
         0002ac 0000!
     611              
     611              ;                       mov mmap(ST0_55), *ssp(#1)
     611              ;                       mov mmap(STO_55), *ssp(#2)
     611              ;                       mov mmap(ST1_55), *sp(#1)
     611              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     611              ;                       mov *ar7, t0
     611              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     611              ;                       mov *ar7(#2), t0
     611              ;                       mov t0, *ssp(#0)                        
     611              
     611              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     611              ; what about xssp?
     611              ;                       mov xar6, xsp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   26

     611              ;                       mov xssp, xar7
     611              ;                       add #1, ar7
     611              ;                       mov xar7, xsp
     611              ;                       mov sp, t0
     611              ;                       mov ssp, t1
     611              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     611              ;                       ar0 = *ar6
     611              ;                       xssp = xar0
     611              ;                       mov *xar6, xar0
     611              ;                       mov xar0, xssp  ; stack now points to our TCB
     611              ;;                      mov sp, *ar6
     611              ;;                      mov sp, ar0
     611              ;;                      mov sp, *_pxCurrentTCB
     611              ;;                      clr ar0
     611              ;;                      mov ar0, @xar6
     611              ;;                      mov sp, AR0
     611              ;;                      add sp, xar6
     611              
     611              ;;                      pshboth xar7
     611              ;;                      pshboth xar6
     611              ;;                      pshboth xar5
     611              
     611              ;;                      popboth xar5
     611              ;;                      popboth xar6
     611              ;;                      popboth xar7
     611              
     611              ;;;                     mov *sp(#1), ar7 
     611              ;                       mov dbl(*sp(#1)), ar7
     611              ;;;                     mov  ar7, mmap(ST1_55)
     611 0002ae AF04                          mov *sp(#2), ar7
     611 0002b0 CF96                          mov ar7, mmap(ST2_55)
         0002b2 98   
     611 0002b3 449F                          mov ssp, ar7
     611 0002b5 AEED                          mov *ar7(#1), ar6
         0002b7 0001 
     611 0002b9 CE04                          mov ar6, mmap(ST0_55)
         0002bb 98   
     611 0002bc AEED                          mov *ar7(#2), ar6
         0002be 0002 
     611              ;                       mov ar6, *ssp(#2)
     611              ;                       mov *ssp(#2), ar7
     611              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     611              
     611 0002c0 ED08                          mov dbl(*sp(#4)), xar7
         0002c2 FF   
     611              ;                       mov *sp(#1), ar7
     611 0002c3 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0002c5 F500 
         0002c7 0000!
     611              
     611 0002c9 ED0C                          mov dbl(*sp(#6)), xar6
         0002cb EF   
     611              ;                       mov *sp(#3), ar6
     611              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     611 0002cc EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   27

         0002ce E500 
         0002d0 0000!
     611              
     611              ;                       POP XT
     611                              ;-- Comment these to save cycles ---
     611 0002d2 ED10                          mov dbl(*sp(#8)), xar7
         0002d4 FF   
     611 0002d5 AF0E                          mov *sp(#7), ar7
     611              ;                       mov *sp(#5), ar7
     611              ;                       mov dbl(*sp(#0)), hi(ar7)
     611              ;                       mov (*sp(#0)), lo(ar7)
     611 0002d7 ED14                          mov dbl(*sp(#10)), xar6
         0002d9 EF   
     611 0002da AE12                          mov *sp(#9), ar6
     611 0002dc ED18                          mov dbl(*sp(#12)), xar5
         0002de DF   
     611 0002df AD16                          mov *sp(#11), ar5
     611              ;; pvPararmeters currently here - needs to be verified --- jcw
     611 0002e1 ED1C                          mov dbl(*sp(#14)), xar4
         0002e3 CF   
     611 0002e4 AC1A                          mov *sp(#13), ar4
     611 0002e6 ED20                          mov dbl(*sp(#16)), xar3
         0002e8 BF   
     611 0002e9 AB1E                          mov *sp(#15), ar3
     611 0002eb ED24                          mov dbl(*sp(#18)), xar2
         0002ed AF   
     611 0002ee AA22                          mov *sp(#17), ar2
     611 0002f0 ED28                          mov dbl(*sp(#20)), xar1
         0002f2 9F   
     611 0002f3 A926                          mov *sp(#19), ar1
     611 0002f5 ED2C                          mov dbl(*sp(#22)), xar0
         0002f7 8F   
     611 0002f8 A82A                          mov *sp(#21), ar0
     611              
     611 0002fa A72E                          mov *sp(#23), t3
     611 0002fc A630                          mov *sp(#24), t2
     611 0002fe A532                          mov *sp(#25), t1
     611 000300 A434                          mov *sp(#26), t0
     611              
     611              ;                       mov dbl(*sp(#21)), *xssp(#0)
     611              ;                       mov *sp(#21), *ssp
     611              ;                       mov *sp(#21), RETA
     611              ; need to move 23-16 to XSSP contents
     611              ;                       mov xar0, dbl (*(#_save_xar7))
     611              ;                       mov ssp, ar0
     611              ;                       mov #0, ssp 
     611              ;                       mov xssp, xar0
     611              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     611              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     611                      ;               add #1, xssp            ; 32-bit return address pointer
     611                      ;               amar *xssp+
     611              ;                       mov sp, t0
     611              ;                       add #1, t0
     611              ;                       mov t0, ssp
     611              ;                       incr ssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   28

     611              ;                       asub #20, ar0
     611              ;                       mov xar0, xssp
     611              ;                       mov ar0, ssp
     611              ;                       mov ar0, 
     611              ;;                      mov *sp(#1), t0
     611              ;;                      mov *sp(#3), t3         ; ST0
     611              ;;                      mov *sp(#4), t2         ; DBSTAT
     611              ;;                      mov t3, *ar0(#2)
     611                      ;;              mov t2, *ar0(#1)
     611              ;;                      mov t0, *ar0(#0)
     611              
     611              ;;                      mov *sp(#5), t0
     611              ;;                      mov *sp(#6), t1
     611              ;;                      mov *sp(#7), t2
     611                      ;;              mov *sp(#8), t3
     611              
     611              
     611              
     611              ; restore ar0
     611              ;                       mov dbl(*sp(#-2)), xar0
     611              ;                       mov #-1, ar0
     611              ;;                      mov dbl (*(#_save_xar7)), xar0
     611              ;;
     611              ;;                      mov sp, t0
     611              ;;                      add #1, t0
     611              ;;                      mov t0, ssp
     611              
     611              ;                       mov *sp(#3), *(#00004ch+#1)
     611              
     611              ;                       mov t3, *ssp(#1) 
     611              ;                       mov t2, *ssp(#2)
     611              
     611              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     611              ;;                      mov t3, *(ssp(#0))
     611              ;                       mov t3, *ssp
     611              ;                       mov *sp(#3), t3 ; 
     611              ;                       mov t3, *ssp(#1)
     611              ;;                      mov *sp(#21), PC        
     611              
     611              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     611              ;                       mov dbl(xsp), dbl(lcrpc)
     611              ;                       popboth XAR7
     611              ;                       add #1, sp
     611              ;                       add #1, ssp
     611              ;                       add #2, t0
     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611              ;                       popboth XAR6
     611              ;                       add #2, t0
     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611              ;                       popboth XAR5
     611              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   29

     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611                              ;-----------------------------------
     611              ;                       popboth XAR4
     611              ;                       add #2, t0
     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611              ;                       popboth XAR3
     611              ;                       add #2, t0
     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611              ;                       popboth XAR2
     611              ;                       add #2, t0
     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611              ;                       popboth XAR1
     611              ;                       add #2, t0
     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611              ;                       popboth XAR0
     611              ;                       add #2, t0
     611              ;                       add #2, t1
     611              ;                       mov t0, sp
     611              ;                       mov t1, ssp
     611              ;                       EDIS
     611              ;                       NASP    ; Un-align stack pointer
     611              ;;                      pop mmap(ST3_55)
     611              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     611              ;            BCC $2,TC1 ; |216|
     611 000302 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000304 4F00 
         000306 0000!
     611 000308 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00030a 5F00 
         00030c 0000!
     611              ;                       B $3
     611              ;$2
     611              ;            MOV #0, *(#_first_flag) ; |217|
     611              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     611              ;                       mov dbl (*(#_first_save_xssp)), xssp
     611              ;$3
     611              ;                       aadd #-3, sp
     611 00030e 46B2                          bclr INTM               ; enable interrupts
     611              ;                       aadd #1, sp
     611 000310 4805                          RETI
     611              ;                       mov #1860h, ssp
     611 000312 20                            nop
     611 000313 20                            nop
     611              ;                       nop
     612                                              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   30

     613              ; /*-----------------------------------------------------------*/
     614              
     615              
     616              ;/*
     617              ; * Manual context switch called by the portYIELD() macro.
     618              ; */
     619              
     620              ; We are using the slow return model:
     621              
     622              ; System Stack (SSP)                    Data Stack (SP)
     623              ; SSP = x - 3:  (Loop Bits):PC(23-16)   SP = y - 3: PC(15-0)  <<= Last pushed - first to POP
     624              ; SSP = x - 2:  DBSTAT                  SP = y - 2: ST1_55
     625              ; SSP = x - 1:  ST0_55                  SP = y - 1: ST2_55
     626              ; SSP = x:      Previously saved data   SP = y:     Previously saved data
     627              
     628              
     629 000314       _vPortYield:
     630              
     631 000314 4EFF                  aadd #-1, sp
     632 000316 F402                  AND #0x0010, mmap(@IFR0)
         000318 0010 
         00031a 98   
     633              ;                /* Mimic an interrupt by pushing the SR. */
     634              
     635              ;               /* SR is 16-bits in 430X architecture */
     636              
     637              ;;                pushx.w    SR
     638              
     639              ;                /* Now the SR is stacked we can disable interrupts. */
     640              
     641              ;                dint
     642              
     643 00031b 46B3                    bset INTM             ; disable interrupts
     644              
     645              ;;                bicx.w #0xF000,0(r1)
     646              ;;                swpbx.w +4(r1)
     647              ;;                rlax.w +4(r1)
     648              ;;                rlax.w +4(r1)
     649              ;;                rlax.w +4(r1)
     650              ;;                rlax.w +4(r1)
     651              ;;                addx.w +4(r1),0(r1)
     652              ;;                movx.w +2(r1),+4(r1)
     653              ;;                movx.w 0(r1),+2(r1)
     654              ;;                incdx.a r1
     655              
     656              ;                /* Save the context of the current task. */
     657              ;;        psh mmap(ST3_55)
     658 ****** MACRO         portSAVE_CONTEXT
     658              ;                       ;CONTEXT_SAVE
     658              ;                       ASP  ; Align Stack Pointer
     658              ;                       CLRC       OVM,PAGE0
     658              ;                       CLRC       AMODE
     658              ;                       EALLOW
     658              
     658 00031d 4652                          bclr C54CM      ; temp - until we figure out what is setting this
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   31

     658              
     658 00031f 46B3                          bset INTM               ; disable interrupts
     658              
     658              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     658              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     658                                      
     658              ;                       pshboth xar7
     658              ;                       pshboth xar6
     658              ;                       pshboth xar5
     658              
     658 000321 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000323 F500 
         000325 0000!
     658 000327 EB31                          mov xar6, dbl (*(#_save_xar6))
         000329 E500 
         00032b 0000!
     658              
     658 00032d ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         00032f FF00 
         000331 0000!
     658              ; does this *always* work?
     658 000333 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000335 4F   
     658 000336 EDED                          mov dbl (*ar7(#2)), xssp                        
         000338 5F00 
         00033a 02   
     658              ;; what about xssp here?
     658              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     658              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     658              
     658              ;; save current PC (and possible loop bits values)
     658              ;; for debug - to see if this is being corrupted
     658 00033b EDE1                          mov dbl(*ar7), xar6
         00033d EF   
     658 00033e EDC1                          mov dbl(*ar6), xar7
         000340 FF   
     658 000341 EB31                          mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
         000343 F500 
         000345 0000!
     658 000347 905F                          mov xssp, xar7
     658 000349 EDE1                          mov dbl(*ar7), xar6
         00034b EF   
     658 00034c EDC1                          mov dbl(*ar6), xar7
         00034e FF   
     658 00034f EB31                          mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
         000351 F500 
         000353 0000!
     658 000355 905F                          mov xssp, xar7
     658 000357 7BFF                          add #-2, ar7
         000359 FEFF 
     658 00035b EDE1                          mov dbl(*ar7), xar6
         00035d EF   
     658 00035e EB31                          mov xar6,  dbl (*(_DBSTAT_SAVE))
         000360 E500 
         000362 0000!
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   32

     658              
     658              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     658              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     658              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     658              
     658 000364 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000366 FF00 
         000368 0000!
     658 00036a ED31                          mov dbl (*(#_save_xar6)), xar6
         00036c EF00 
         00036e 0000!
     658              
     658 000370 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         000372 F5   
     658 000373 CF0E                          mov ar7, *sp(#7)
     658              
     658 000375 EB14                          mov xar6, dbl(*sp(#10))
         000377 E5   
     658 000378 CE12                          mov ar6, *sp(#9)
     658              
     658 00037a EB18                          mov xar5, dbl(*sp(#12))
         00037c D5   
     658 00037d CD16                          mov ar5, *sp(#11)
     658              
     658 00037f EB1C                          mov xar4, dbl(*sp(#14))
         000381 C5   
     658 000382 CC1A                          mov ar4, *sp(#13)
     658              
     658 000384 EB20                          mov xar3, dbl(*sp(#16))
         000386 B5   
     658 000387 CB1E                          mov ar3, *sp(#15)
     658              
     658 000389 EB24                          mov xar2, dbl(*sp(#18))
         00038b A5   
     658 00038c CA22                          mov ar2, *sp(#17)
     658              
     658 00038e EB28                          mov xar1, dbl(*sp(#20))
         000390 95   
     658 000391 C926                          mov ar1, *sp(#19)
     658              
     658 000393 EB2C                          mov xar0, dbl(*sp(#22))
         000395 85   
     658 000396 C82A                          mov ar0, *sp(#21)
     658              
     658 000398 C72E                          mov t3, *sp(#23)
     658 00039a C630                          mov t2, *sp(#24)
     658 00039c C532                          mov t1, *sp(#25)
     658 00039e C434                          mov t0, *sp(#26)
     658              
     658              ;;                      mov mmap(ST0_55), t0
     658              ; - this is ok - we are not pushing - it's a relative stack frame
     658              ;                       mov t0, *sp(#25)
     658              ;;                      mov t0, *sp(#23)
     658              ;;                      mov mmap(ST1_55), t1
     658              ;                       mov t1, *sp(#26)                ; stomping on own mem
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   33

     658              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     658              ;;                      mov mmap(ST2_55), t2
     658              ;;                      mov t2, *sp(#22)
     658              ;                       mov t2, *sp(#27)
     658              ;;                      mov mmap(ST2_55), t3
     658              ;                       mov t3, *sp(#28)
     658              ;;                      mov t3, *sp(#24)
     658              
     658              ;                       PSH dbl(AR0) ; 32-bit
     658              ;                       PSH dbl(AR1) 
     658              ;                       PSH dbl(AR2) ; 32-bit
     658              ;                       PUSH XAR3 ; 32-bit
     658              ;                       PUSH XAR4 ; 32-bit
     658                              ;-- Comment these to save cycles --------
     658              ;                       PUSH XAR5 ; 32-bit
     658              ;                       PUSH XAR6 ; 32-bit
     658              ;                       PUSH XAR7 ; 32-bit
     658                              ;----------------------------------------
     658              
     658              ;                       PUSH XT   ; 32-bit
     658              
     658              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     658              ;                       push xar6 ; portFLAGS_INT_ENABLED
     658              
     658 0003a0 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0003a2 EF00 
         0003a4 0000!
     658 0003a6 EB0C                          mov xar6, dbl(*sp(#6))
         0003a8 E5   
     658                                      
     658              
     658              ;                       movl xar7, @_usCriticalNesting
     658              ;                       push xar7
     658 0003a9 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0003ab FF00 
         0003ad 0000!
     658 0003af EB08                          mov xar7, dbl(*sp(#4))
         0003b1 F5   
     658              
     658 0003b2 AF06                          mov mmap(ST1_55), ar7
         0003b4 98   
     658 0003b5 CF02                          mov ar7, *sp(#1)
     658 0003b7 AF96                          mov  mmap(ST2_55), ar7
         0003b9 98   
     658 0003ba CF04                          mov ar7, *sp(#2)
     658              
     658 0003bc 449F                          mov ssp, ar7
     658 0003be AE04                          mov mmap(ST0_55), ar6
         0003c0 98   
     658 0003c1 CEED                          mov ar6, *ar7(#1)
         0003c3 0001 
     658              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     658              ;;;                     mov ar6, *ar7(#2)
     658              ;                       mov ar7, mmap(ST0_55)
     658              ;                       mov *ssp(#2), ar7
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   34

     658              
     658              ; fix up
     658              ;                       aadd #20, sp
     658              ;                       mov sp, t0
     658              ;                       sub #1, t0
     658              ;                       mov t0, ssp
     658              
     658                                      ; move contents of SP into address of current TCB
     658              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     658              
     658              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     658              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     658              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     658              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     658              ;                       mov dbl (*ar7+), xssp
     658              
     658              ;                       mov sp, t0              ; we've already saved t0
     658              ;                       add #1, t0
     658              ;                       mov t0, ssp
     658              ; ??
     658              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     658              
     658              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     658              ;                       mov al, @sp
     658              ;                       movl  *xar6, acc        
     658              ;;                      mov  ar0, @sp
     658              ;;                      mov  @ar6, alxd
     658              ;;                      mov  ar0, @sp
     658              ;;                      movl 0(xar6), sp
     658              ;                       EDIS
     658              ;                       NASP
     658              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     658              ;                       NOP
     658 0003c5 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0003c7 4F00 
         0003c9 0000!
     658 0003cb ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0003cd 5F00 
         0003cf 0000!
     658 0003d1 20                            nop
     658 0003d2 20                            nop
     658 0003d3 20                            nop
     659              
     660              ;        /* Switch to the highest priority task that is ready to run. */
     661 0003d4 6C00          call    #_vTaskSwitchContext
         0003d6 0000!
     662 0003d8 E651          mov #1, *port(#6166) ; |127|
         0003da 0118 
         0003dc 16   
     663 0003dd F551                  or #0x0001, *port(#7188) ; |130|
         0003df 0001 
         0003e1 1C14 
     664 0003e3 4E01                  aadd #1, sp
     665 ****** MACRO         portRESTORE_CONTEXT
     665              ;                       .C54CM_on
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   35

     665              ;                       .CPL_on
     665              ;                       .ARMS_off
     665                                      .align 4
     665              
     665              ; Restore context & return
     665                                      ;CONTEXT_RESTORE
     665              ;                       ASP
     665              ;                       EALLOW
     665              ;                       nop
     665              ;                       nop
     665              ;                       nop
     665              ;                       nop
     665 0003e8 4652                          bclr C54CM    
     665              ;               xssp = dbl(*(#_pxCurrentTCB))
     665              ;               xsp  = dbl(*(#_pxCurrentTCB))
     665 0003ea EB31                          mov xar7, dbl (*(#_save_xar7))  
         0003ec F500 
         0003ee 0000!
     665              
     665 0003f0 4EFD                          aadd #-3, sp
     665              ;            aadd #-3, xsp
     665              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     665              ;            BCC $1,TC1 ; |216|
     665 0003f2 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0003f4 4F00 
         0003f6 0000!
     665 0003f8 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0003fa 5F00 
         0003fc 0000!
     665              ;            B $4
     665              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     665              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     665              
     665              ;                       aadd #-3, sp
     665              ;$1
     665              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     665              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     665              ;$4
     665 0003fe 904F                          mov xsp, xar7
     665 000400 905E                          mov xssp, xar6
     665              
     665 000402 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000404 DF00 
         000406 0000!
     665              
     665 000408 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00040a CF   
     665 00040b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00040d BF00 
         00040f 02   
     665                                      
     665 000410 AA81                          mov *ar4, ar2
     665 000412 A961                          mov *ar3, ar1
     665              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     665 000414 CAE1                          mov ar2, *ar7
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   36

     665 000416 C9C1                          mov ar1, *ar6
     665              
     665              
     665              ;                       mov #0, ssp     
     665              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     665              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     665                                      ; 32-bit mode - will act on SP and SSP:
     665              ;                       'fix-up' current SP and SSP - is this dangerous????
     665              ;                       aadd #-3, sp
     665              ;;                      mov *ar7, *sp
     665              ;                       mov dbl (*ar7), ar6
     665              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     665              ;                       mov *ar7(#2), *ssp                      
     665              ;                       POP mmap(ST3_55)
     665              ;                       pshboth xar7                            ; should increment both
     665 000418 AF06                          mov mmap(ST1_55), ar7
         00041a 98   
     665 00041b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00041d FFFF 
     665 00041f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     665 000421 AF96                          mov mmap(ST2_55), ar7
         000423 98   
     665 000424 CF04                          mov ar7, *sp(#2)
     665              
     665 000426 449F                          mov ssp, ar7
     665 000428 AE04                          mov mmap(ST0_55), ar6
         00042a 98   
     665 00042b CEED                          mov ar6, *ar7(#1)
         00042d 0001 
     665              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     665              ;;                      mov ar6, *ar7(#2)
     665              
     665 00042f ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000431 FF00 
         000433 0000!
     665              
     665 000435 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000437 4F   
     665 000438 EDED                          mov dbl (*ar7(#2)), xssp                        
         00043a 5F00 
         00043c 02   
     665              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     665              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     665 00043d EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7
         00043f F500 
         000441 0000!
     665 000443 EB31                          mov xar6, dbl (*(#_save_xar6))
         000445 E500 
         000447 0000!
     665              
     665              ;; this is for debug
     665 000449 EDE1                          mov dbl(*ar7), xar6
         00044b EF   
     665 00044c EDC1                          mov dbl(*ar6), xar7
         00044e FF   
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   37

     665 00044f EB31                          mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
         000451 F500 
         000453 0000!
     665 000455 905F                          mov xssp, xar7
     665 000457 EDE1                          mov dbl(*ar7), xar6
         000459 EF   
     665 00045a EDC1                          mov dbl(*ar6), xar7
         00045c FF   
     665 00045d EB31                          mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
         00045f F500 
         000461 0000!
     665 000463 905F                          mov xssp, xar7
     665 000465 7BFF                          add #-2, ar7
         000467 FEFF 
     665 000469 EDE1                          mov dbl(*ar7), xar6
         00046b EF   
     665 00046c EB31                          mov xar6,  dbl (*(_DBSTAT_RESTORE))
         00046e E500 
         000470 0000!
     665              
     665 000472 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000474 FF00 
         000476 0000!
     665 000478 ED31                          mov dbl (*(#_save_xar6)), xar6
         00047a EF00 
         00047c 0000!
     665              
     665              ;                       mov mmap(ST0_55), *ssp(#1)
     665              ;                       mov mmap(STO_55), *ssp(#2)
     665              ;                       mov mmap(ST1_55), *sp(#1)
     665              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     665              ;                       mov *ar7, t0
     665              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     665              ;                       mov *ar7(#2), t0
     665              ;                       mov t0, *ssp(#0)                        
     665              
     665              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     665              ; what about xssp?
     665              ;                       mov xar6, xsp
     665              ;                       mov xssp, xar7
     665              ;                       add #1, ar7
     665              ;                       mov xar7, xsp
     665              ;                       mov sp, t0
     665              ;                       mov ssp, t1
     665              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     665              ;                       ar0 = *ar6
     665              ;                       xssp = xar0
     665              ;                       mov *xar6, xar0
     665              ;                       mov xar0, xssp  ; stack now points to our TCB
     665              ;;                      mov sp, *ar6
     665              ;;                      mov sp, ar0
     665              ;;                      mov sp, *_pxCurrentTCB
     665              ;;                      clr ar0
     665              ;;                      mov ar0, @xar6
     665              ;;                      mov sp, AR0
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   38

     665              ;;                      add sp, xar6
     665              
     665              ;;                      pshboth xar7
     665              ;;                      pshboth xar6
     665              ;;                      pshboth xar5
     665              
     665              ;;                      popboth xar5
     665              ;;                      popboth xar6
     665              ;;                      popboth xar7
     665              
     665              ;;;                     mov *sp(#1), ar7 
     665              ;                       mov dbl(*sp(#1)), ar7
     665              ;;;                     mov  ar7, mmap(ST1_55)
     665 00047e AF04                          mov *sp(#2), ar7
     665 000480 CF96                          mov ar7, mmap(ST2_55)
         000482 98   
     665 000483 449F                          mov ssp, ar7
     665 000485 AEED                          mov *ar7(#1), ar6
         000487 0001 
     665 000489 CE04                          mov ar6, mmap(ST0_55)
         00048b 98   
     665 00048c AEED                          mov *ar7(#2), ar6
         00048e 0002 
     665              ;                       mov ar6, *ssp(#2)
     665              ;                       mov *ssp(#2), ar7
     665              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     665              
     665 000490 ED08                          mov dbl(*sp(#4)), xar7
         000492 FF   
     665              ;                       mov *sp(#1), ar7
     665 000493 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000495 F500 
         000497 0000!
     665              
     665 000499 ED0C                          mov dbl(*sp(#6)), xar6
         00049b EF   
     665              ;                       mov *sp(#3), ar6
     665              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     665 00049c EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         00049e E500 
         0004a0 0000!
     665              
     665              ;                       POP XT
     665                              ;-- Comment these to save cycles ---
     665 0004a2 ED10                          mov dbl(*sp(#8)), xar7
         0004a4 FF   
     665 0004a5 AF0E                          mov *sp(#7), ar7
     665              ;                       mov *sp(#5), ar7
     665              ;                       mov dbl(*sp(#0)), hi(ar7)
     665              ;                       mov (*sp(#0)), lo(ar7)
     665 0004a7 ED14                          mov dbl(*sp(#10)), xar6
         0004a9 EF   
     665 0004aa AE12                          mov *sp(#9), ar6
     665 0004ac ED18                          mov dbl(*sp(#12)), xar5
         0004ae DF   
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   39

     665 0004af AD16                          mov *sp(#11), ar5
     665              ;; pvPararmeters currently here - needs to be verified --- jcw
     665 0004b1 ED1C                          mov dbl(*sp(#14)), xar4
         0004b3 CF   
     665 0004b4 AC1A                          mov *sp(#13), ar4
     665 0004b6 ED20                          mov dbl(*sp(#16)), xar3
         0004b8 BF   
     665 0004b9 AB1E                          mov *sp(#15), ar3
     665 0004bb ED24                          mov dbl(*sp(#18)), xar2
         0004bd AF   
     665 0004be AA22                          mov *sp(#17), ar2
     665 0004c0 ED28                          mov dbl(*sp(#20)), xar1
         0004c2 9F   
     665 0004c3 A926                          mov *sp(#19), ar1
     665 0004c5 ED2C                          mov dbl(*sp(#22)), xar0
         0004c7 8F   
     665 0004c8 A82A                          mov *sp(#21), ar0
     665              
     665 0004ca A72E                          mov *sp(#23), t3
     665 0004cc A630                          mov *sp(#24), t2
     665 0004ce A532                          mov *sp(#25), t1
     665 0004d0 A434                          mov *sp(#26), t0
     665              
     665              ;                       mov dbl(*sp(#21)), *xssp(#0)
     665              ;                       mov *sp(#21), *ssp
     665              ;                       mov *sp(#21), RETA
     665              ; need to move 23-16 to XSSP contents
     665              ;                       mov xar0, dbl (*(#_save_xar7))
     665              ;                       mov ssp, ar0
     665              ;                       mov #0, ssp 
     665              ;                       mov xssp, xar0
     665              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     665              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     665                      ;               add #1, xssp            ; 32-bit return address pointer
     665                      ;               amar *xssp+
     665              ;                       mov sp, t0
     665              ;                       add #1, t0
     665              ;                       mov t0, ssp
     665              ;                       incr ssp
     665              ;                       asub #20, ar0
     665              ;                       mov xar0, xssp
     665              ;                       mov ar0, ssp
     665              ;                       mov ar0, 
     665              ;;                      mov *sp(#1), t0
     665              ;;                      mov *sp(#3), t3         ; ST0
     665              ;;                      mov *sp(#4), t2         ; DBSTAT
     665              ;;                      mov t3, *ar0(#2)
     665                      ;;              mov t2, *ar0(#1)
     665              ;;                      mov t0, *ar0(#0)
     665              
     665              ;;                      mov *sp(#5), t0
     665              ;;                      mov *sp(#6), t1
     665              ;;                      mov *sp(#7), t2
     665                      ;;              mov *sp(#8), t3
     665              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   40

     665              
     665              
     665              ; restore ar0
     665              ;                       mov dbl(*sp(#-2)), xar0
     665              ;                       mov #-1, ar0
     665              ;;                      mov dbl (*(#_save_xar7)), xar0
     665              ;;
     665              ;;                      mov sp, t0
     665              ;;                      add #1, t0
     665              ;;                      mov t0, ssp
     665              
     665              ;                       mov *sp(#3), *(#00004ch+#1)
     665              
     665              ;                       mov t3, *ssp(#1) 
     665              ;                       mov t2, *ssp(#2)
     665              
     665              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     665              ;;                      mov t3, *(ssp(#0))
     665              ;                       mov t3, *ssp
     665              ;                       mov *sp(#3), t3 ; 
     665              ;                       mov t3, *ssp(#1)
     665              ;;                      mov *sp(#21), PC        
     665              
     665              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     665              ;                       mov dbl(xsp), dbl(lcrpc)
     665              ;                       popboth XAR7
     665              ;                       add #1, sp
     665              ;                       add #1, ssp
     665              ;                       add #2, t0
     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665              ;                       popboth XAR6
     665              ;                       add #2, t0
     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665              ;                       popboth XAR5
     665              ;                       add #2, t0
     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665                              ;-----------------------------------
     665              ;                       popboth XAR4
     665              ;                       add #2, t0
     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665              ;                       popboth XAR3
     665              ;                       add #2, t0
     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665              ;                       popboth XAR2
     665              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 05:11:03 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   41

     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665              ;                       popboth XAR1
     665              ;                       add #2, t0
     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665              ;                       popboth XAR0
     665              ;                       add #2, t0
     665              ;                       add #2, t1
     665              ;                       mov t0, sp
     665              ;                       mov t1, ssp
     665              ;                       EDIS
     665              ;                       NASP    ; Un-align stack pointer
     665              ;;                      pop mmap(ST3_55)
     665              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     665              ;            BCC $2,TC1 ; |216|
     665 0004d2 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0004d4 4F00 
         0004d6 0000!
     665 0004d8 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0004da 5F00 
         0004dc 0000!
     665              ;                       B $3
     665              ;$2
     665              ;            MOV #0, *(#_first_flag) ; |217|
     665              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     665              ;                       mov dbl (*(#_first_save_xssp)), xssp
     665              ;$3
     665              ;                       aadd #-3, sp
     665 0004de 46B2                          bclr INTM               ; enable interrupts
     665              ;                       aadd #1, sp
     665 0004e0 4805                          RETI
     665              ;                       mov #1860h, ssp
     665 0004e2 20                            nop
     665 0004e3 20                            nop
     665              ;                       nop
     666              
     667              ;;;
     668              
     669              ;                /* Place the tick ISR in the correct vector. */
     670              
     671              ;;;                .sect ".int49"                       ; TIMER1_A0_VECTOR                      
     672              ;;                .sect ".int14"                        ; CPUTIMER2
     673              ;                 .sect ".text"                 ; CPUTIMER2
     674              ;;;;             .sect ".INT14_ISR"
     675              ;               .global _INT14_ISR
     676              ;;;; _INT14_ISR:
     677              ;;;;                .short   _vTickISR
     678              ;;;;            LCR #_vTickISR
     679                              .end

No Assembly Errors, No Assembly Warnings
