TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    1

     643              ; Temporary Registers Used: None
       1              ; .cdecls C, LIST, "FreeRTOSConfig.h"
       2              ;  .include "FreeRTOSConfig.h"
       3              ; 32-bit stack slow mode
       4                      .mmregs
       5              ;        .C54CM_on
       6              ;     .CPL_on
       7              ;      .ARMS_off
       8                       .align 4
       9              ;       .c28_amode
      10              
      11                        .global _usCriticalNesting
      12                           .global _save_xsp
      13                           .global _save_xssp
      14                           .global _first_save_xsp
      15                           .global _first_save_xssp
      16                           .global _first_flag
      17                           .global _save_xar7
      18                           .global _tZero
      19                           .global _save_xar6
      20                        .global _pxCurrentTCB
      21                           .global _xTaskIncrementTick
      22                           .ref    _xTaskIncrementTick
      23                           .global _vTaskSwitchContext
      24                           .global _prvSetupTimerInterrupt
      25                                       .global _tickIRQctr
      26              
      27              ;                         .ref configUSE_TICK_CTR
      28              ;                         .ref configUSE_PREEMPTION
      29              
      30                           .def _vPortYield
      31                           .def _xPortStartScheduler
      32                           .def _vTickISR
      33                           .global _vPortYield
      34                           .global _xPortStartScheduler
      35                           .global _vTickISR
      36                           .global _INT14_ISR
      37                           .global _portFLAGS_INT_ENABLED
      38                           .global _portFLAGS_INT_ENABLED_POPPED
      39                           .global _DBSTAT_SAVE
      40                           .global _DBSTAT_RESTORE
      41                           .global _STATUS0_LOW
      42                           .global _STATUS0_HIGH
      43                           .global _STATUS1_LOW
      44                           .global _STATUS1_HIGH
      45                           .global _STATUS2_LOW
      46                           .global _STATUS2_HIGH
      47                           .global _PC_REG_HIGH_SAVE
      48                           .global _PC_REG_LOW_SAVE
      49                           .global _PC_REG_HIGH_RESTORE
      50                           .global _PC_REG_LOW_RESTORE
      51              ;            .cdecls C,NOLIST,"portmacro.h"
      52              ;            .cdecls C,LIST,"FreeRTOSConfig.h"
      53              ;                       CLRC AMODE
      54              ;       System Stack
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    2

      55 000000               .text
      56              portSAVE_CONTEXT .macro 
      57              ;                       ;CONTEXT_SAVE
      58              ;                       ASP  ; Align Stack Pointer
      59              ;                       CLRC       OVM,PAGE0
      60              ;                       CLRC       AMODE
      61              ;                       EALLOW
      62              
      63                                      bclr C54CM      ; temp - until we figure out what is setting this
      64              
      65                                      bset INTM               ; disable interrupts
      66              
      67              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
      68              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
      69                                      
      70              ;                       pshboth xar7
      71              ;                       pshboth xar6
      72              ;                       pshboth xar5
      73              
      74                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
      75              
      76                                      mov dbl (*(#_pxCurrentTCB)), xar7
      77              ; does this *always* work?
      78                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
      79                                      mov dbl (*ar7(#2)), xssp                        
      80              ;; what about xssp here?
      81              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
      82              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
      83              
      84                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
      85              
      86                                      mov xar7, dbl(*sp(#8))                          ; save xar7
      87                                      mov ar7, *sp(#7)
      88              
      89                                      mov xar6, dbl(*sp(#10))
      90                                      mov ar6, *sp(#9)
      91              
      92                                      mov xar5, dbl(*sp(#12))
      93                                      mov ar5, *sp(#11)
      94              
      95                                      mov xar4, dbl(*sp(#14))
      96                                      mov ar4, *sp(#13)
      97              
      98                                      mov xar3, dbl(*sp(#16))
      99                                      mov ar3, *sp(#15)
     100              
     101                                      mov xar2, dbl(*sp(#18))
     102                                      mov ar2, *sp(#17)
     103              
     104                                      mov xar1, dbl(*sp(#20))
     105                                      mov ar1, *sp(#19)
     106              
     107                                      mov xar0, dbl(*sp(#22))
     108                                      mov ar0, *sp(#21)
     109              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    3

     110                                      mov t3, *sp(#23)
     111                                      mov t2, *sp(#24)
     112                                      mov t1, *sp(#25)
     113                                      mov t0, *sp(#26)
     114              
     115              ;;                      mov mmap(ST0_55), t0
     116              ; - this is ok - we are not pushing - it's a relative stack frame
     117              ;                       mov t0, *sp(#25)
     118              ;;                      mov t0, *sp(#23)
     119              ;;                      mov mmap(ST1_55), t1
     120              ;                       mov t1, *sp(#26)                ; stomping on own mem
     121              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     122              ;;                      mov mmap(ST2_55), t2
     123              ;;                      mov t2, *sp(#22)
     124              ;                       mov t2, *sp(#27)
     125              ;;                      mov mmap(ST2_55), t3
     126              ;                       mov t3, *sp(#28)
     127              ;;                      mov t3, *sp(#24)
     128              
     129              ;                       PSH dbl(AR0) ; 32-bit
     130              ;                       PSH dbl(AR1) 
     131              ;                       PSH dbl(AR2) ; 32-bit
     132              ;                       PUSH XAR3 ; 32-bit
     133              ;                       PUSH XAR4 ; 32-bit
     134                              ;-- Comment these to save cycles --------
     135              ;                       PUSH XAR5 ; 32-bit
     136              ;                       PUSH XAR6 ; 32-bit
     137              ;                       PUSH XAR7 ; 32-bit
     138                              ;----------------------------------------
     139              
     140              ;                       PUSH XT   ; 32-bit
     141              
     142              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     143              ;                       push xar6 ; portFLAGS_INT_ENABLED
     144              
     145                                      mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
     146                                      mov xar6, dbl(*sp(#6))
     147                                      
     148              
     149              ;                       movl xar7, @_usCriticalNesting
     150              ;                       push xar7
     151                                      mov dbl (*(#_usCriticalNesting)), xar7
     152                                      mov xar7, dbl(*sp(#4))
     153              
     154                                      mov mmap(ST1_55), ar7
     155                                      mov ar7, *sp(#1)
     156                                      mov  mmap(ST2_55), ar7
     157                                      mov ar7, *sp(#2)
     158              
     159                                      mov ssp, ar7
     160                                      mov mmap(ST0_55), ar6
     161                                      mov ar6, *ar7(#1)
     162                                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     163                                      mov ar6, *ar7(#2)
     164              ;                       mov ar7, mmap(ST0_55)
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    4

     165              ;                       mov *ssp(#2), ar7
     166              
     167              ; fix up
     168              ;                       aadd #20, sp
     169              ;                       mov sp, t0
     170              ;                       sub #1, t0
     171              ;                       mov t0, ssp
     172              
     173                                      ; move contents of SP into address of current TCB
     174              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     175              
     176              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     177              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     178              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     179              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     180              ;                       mov dbl (*ar7+), xssp
     181              
     182              ;                       mov sp, t0              ; we've already saved t0
     183              ;                       add #1, t0
     184              ;                       mov t0, ssp
     185              ; ??
     186              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     187              
     188              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     189              ;                       mov al, @sp
     190              ;                       movl  *xar6, acc        
     191              ;;                      mov  ar0, @sp
     192              ;;                      mov  @ar6, alxd
     193              ;;                      mov  ar0, @sp
     194              ;;                      movl 0(xar6), sp
     195              ;                       EDIS
     196              ;                       NASP
     197              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     198              ;                       NOP
     199                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     200                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     201                                      nop
     202                                      nop
     203                                      nop
     204                                      .endm
     205              
     206              portRESTORE_CONTEXT .macro
     207              ;                       .C54CM_on
     208              ;                       .CPL_on
     209              ;                       .ARMS_off
     210                                      .align 4
     211              
     212              ; Restore context & return
     213                                      ;CONTEXT_RESTORE
     214              ;                       ASP
     215              ;                       EALLOW
     216              ;                       nop
     217              ;                       nop
     218              ;                       nop
     219              ;                       nop
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    5

     220                                      bclr C54CM    
     221              ;               xssp = dbl(*(#_pxCurrentTCB))
     222              ;               xsp  = dbl(*(#_pxCurrentTCB))
     223                                      mov xar7, dbl (*(#_save_xar7))  
     224              
     225                                      aadd #-3, sp
     226              ;            aadd #-3, xsp
     227              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     228              ;            BCC $1,TC1 ; |216|
     229                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     230                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     231              ;            B $4
     232              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     233              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     234              
     235              ;                       aadd #-3, sp
     236              ;$1
     237              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     238              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     239              ;$4
     240                                      mov xsp, xar7
     241                                      mov xssp, xar6
     242              
     243                                      mov dbl (*(#_pxCurrentTCB)), xar5                       
     244              
     245                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     246                                      mov dbl (*ar5(#2)), xar3                        
     247                                      
     248                                      mov *ar4, ar2
     249                                      mov *ar3, ar1
     250              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     251                                      mov ar2, *ar7
     252                                      mov ar1, *ar6
     253                                      
     254              
     255              
     256              
     257              ;                       mov #0, ssp     
     258              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     259              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     260                                      ; 32-bit mode - will act on SP and SSP:
     261              ;                       'fix-up' current SP and SSP - is this dangerous????
     262              ;                       aadd #-3, sp
     263              ;;                      mov *ar7, *sp
     264              ;                       mov dbl (*ar7), ar6
     265              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     266              ;                       mov *ar7(#2), *ssp                      
     267              ;                       POP mmap(ST3_55)
     268              ;                       pshboth xar7                            ; should increment both
     269                                      mov mmap(ST1_55), ar7
     270                                      and #0xf7ff, ar7                        ; <here>#0800h
     271                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     272                                      mov mmap(ST2_55), ar7
     273                                      mov ar7, *sp(#2)
     274              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    6

     275                                      mov ssp, ar7
     276                                      mov mmap(ST0_55), ar6
     277                                      mov ar6, *ar7(#1)
     278                                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     279                                      mov ar6, *ar7(#2)
     280              
     281                                      mov dbl (*(#_pxCurrentTCB)), xar7
     282              
     283                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     284                                      mov dbl (*ar7(#2)), xssp                        
     285              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     286              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     287              
     288              ;                       mov mmap(ST0_55), *ssp(#1)
     289              ;                       mov mmap(STO_55), *ssp(#2)
     290              ;                       mov mmap(ST1_55), *sp(#1)
     291              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     292              ;                       mov *ar7, t0
     293              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     294              ;                       mov *ar7(#2), t0
     295              ;                       mov t0, *ssp(#0)                        
     296              
     297              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     298              ; what about xssp?
     299              ;                       mov xar6, xsp
     300              ;                       mov xssp, xar7
     301              ;                       add #1, ar7
     302              ;                       mov xar7, xsp
     303              ;                       mov sp, t0
     304              ;                       mov ssp, t1
     305              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     306              ;                       ar0 = *ar6
     307              ;                       xssp = xar0
     308              ;                       mov *xar6, xar0
     309              ;                       mov xar0, xssp  ; stack now points to our TCB
     310              ;;                      mov sp, *ar6
     311              ;;                      mov sp, ar0
     312              ;;                      mov sp, *_pxCurrentTCB
     313              ;;                      clr ar0
     314              ;;                      mov ar0, @xar6
     315              ;;                      mov sp, AR0
     316              ;;                      add sp, xar6
     317              
     318              ;;                      pshboth xar7
     319              ;;                      pshboth xar6
     320              ;;                      pshboth xar5
     321              
     322              ;;                      popboth xar5
     323              ;;                      popboth xar6
     324              ;;                      popboth xar7
     325              
     326              ;;;                     mov *sp(#1), ar7 
     327              ;                       mov dbl(*sp(#1)), ar7
     328              ;;;                     mov  ar7, mmap(ST1_55)
     329                                      mov *sp(#2), ar7
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    7

     330                                      mov ar7, mmap(ST2_55)
     331                                      mov ssp, ar7
     332                                      mov *ar7(#1), ar6
     333                                      mov ar6, mmap(ST0_55)
     334                                      mov *ar7(#2), ar6
     335                                      mov ar7, mmap(ST0_55)
     336              ;                       mov *ssp(#2), ar7
     337              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     338              
     339                                      mov dbl(*sp(#4)), xar7
     340              ;                       mov *sp(#1), ar7
     341                                      mov xar7, dbl(*(#_usCriticalNesting))   
     342              
     343                                      mov dbl(*sp(#6)), xar6
     344              ;                       mov *sp(#3), ar6
     345              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     346                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     347              
     348              ;                       POP XT
     349                              ;-- Comment these to save cycles ---
     350                                      mov dbl(*sp(#8)), xar7
     351                                      mov *sp(#7), ar7
     352              ;                       mov *sp(#5), ar7
     353              ;                       mov dbl(*sp(#0)), hi(ar7)
     354              ;                       mov (*sp(#0)), lo(ar7)
     355                                      mov dbl(*sp(#10)), xar6
     356                                      mov *sp(#9), ar6
     357                                      mov dbl(*sp(#12)), xar5
     358                                      mov *sp(#11), ar5
     359              ;; pvPararmeters currently here - needs to be verified --- jcw
     360                                      mov dbl(*sp(#14)), xar4
     361                                      mov *sp(#13), ar4
     362                                      mov dbl(*sp(#16)), xar3
     363                                      mov *sp(#15), ar3
     364                                      mov dbl(*sp(#18)), xar2
     365                                      mov *sp(#17), ar2
     366                                      mov dbl(*sp(#20)), xar1
     367                                      mov *sp(#19), ar1
     368                                      mov dbl(*sp(#22)), xar0
     369                                      mov *sp(#21), ar0
     370              
     371                                      mov *sp(#23), t3
     372                                      mov *sp(#24), t2
     373                                      mov *sp(#25), t1
     374                                      mov *sp(#26), t0
     375              
     376              ;                       mov dbl(*sp(#21)), *xssp(#0)
     377              ;                       mov *sp(#21), *ssp
     378              ;                       mov *sp(#21), RETA
     379              ; need to move 23-16 to XSSP contents
     380              ;                       mov xar0, dbl (*(#_save_xar7))
     381              ;                       mov ssp, ar0
     382              ;                       mov #0, ssp 
     383              ;                       mov xssp, xar0
     384              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    8

     385              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     386                      ;               add #1, xssp            ; 32-bit return address pointer
     387                      ;               amar *xssp+
     388              ;                       mov sp, t0
     389              ;                       add #1, t0
     390              ;                       mov t0, ssp
     391              ;                       incr ssp
     392              ;                       asub #20, ar0
     393              ;                       mov xar0, xssp
     394              ;                       mov ar0, ssp
     395              ;                       mov ar0, 
     396              ;;                      mov *sp(#1), t0
     397              ;;                      mov *sp(#3), t3         ; ST0
     398              ;;                      mov *sp(#4), t2         ; DBSTAT
     399              ;;                      mov t3, *ar0(#2)
     400                      ;;              mov t2, *ar0(#1)
     401              ;;                      mov t0, *ar0(#0)
     402              
     403              ;;                      mov *sp(#5), t0
     404              ;;                      mov *sp(#6), t1
     405              ;;                      mov *sp(#7), t2
     406                      ;;              mov *sp(#8), t3
     407              
     408              
     409              
     410              ; restore ar0
     411              ;                       mov dbl(*sp(#-2)), xar0
     412              ;                       mov #-1, ar0
     413              ;;                      mov dbl (*(#_save_xar7)), xar0
     414              ;;
     415              ;;                      mov sp, t0
     416              ;;                      add #1, t0
     417              ;;                      mov t0, ssp
     418              
     419              ;                       mov *sp(#3), *(#00004ch+#1)
     420              
     421              ;                       mov t3, *ssp(#1) 
     422              ;                       mov t2, *ssp(#2)
     423              
     424              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     425              ;;                      mov t3, *(ssp(#0))
     426              ;                       mov t3, *ssp
     427              ;                       mov *sp(#3), t3 ; 
     428              ;                       mov t3, *ssp(#1)
     429              ;;                      mov *sp(#21), PC        
     430              
     431              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     432              ;                       mov dbl(xsp), dbl(lcrpc)
     433              ;                       popboth XAR7
     434              ;                       add #1, sp
     435              ;                       add #1, ssp
     436              ;                       add #2, t0
     437              ;                       add #2, t1
     438              ;                       mov t0, sp
     439              ;                       mov t1, ssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    9

     440              ;                       popboth XAR6
     441              ;                       add #2, t0
     442              ;                       add #2, t1
     443              ;                       mov t0, sp
     444              ;                       mov t1, ssp
     445              ;                       popboth XAR5
     446              ;                       add #2, t0
     447              ;                       add #2, t1
     448              ;                       mov t0, sp
     449              ;                       mov t1, ssp
     450                              ;-----------------------------------
     451              ;                       popboth XAR4
     452              ;                       add #2, t0
     453              ;                       add #2, t1
     454              ;                       mov t0, sp
     455              ;                       mov t1, ssp
     456              ;                       popboth XAR3
     457              ;                       add #2, t0
     458              ;                       add #2, t1
     459              ;                       mov t0, sp
     460              ;                       mov t1, ssp
     461              ;                       popboth XAR2
     462              ;                       add #2, t0
     463              ;                       add #2, t1
     464              ;                       mov t0, sp
     465              ;                       mov t1, ssp
     466              ;                       popboth XAR1
     467              ;                       add #2, t0
     468              ;                       add #2, t1
     469              ;                       mov t0, sp
     470              ;                       mov t1, ssp
     471              ;                       popboth XAR0
     472              ;                       add #2, t0
     473              ;                       add #2, t1
     474              ;                       mov t0, sp
     475              ;                       mov t1, ssp
     476              ;                       EDIS
     477              ;                       NASP    ; Un-align stack pointer
     478              ;;                      pop mmap(ST3_55)
     479              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     480              ;            BCC $2,TC1 ; |216|
     481                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     482                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     483              ;                       B $3
     484              ;$2
     485              ;            MOV #0, *(#_first_flag) ; |217|
     486              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     487              ;                       mov dbl (*(#_first_save_xssp)), xssp
     488              ;$3
     489              ;                       aadd #-3, sp
     490                                      bclr INTM               ; enable interrupts
     491              ;                       aadd #1, sp
     492                                      RETI
     493              ;                       mov #1860h, ssp
     494                                      nop
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   10

     495                                      nop
     496              ;                       nop
     497                                      .endm
     498              ; /*-----------------------------------------------------------*/
     499              
     500              ; /*
     501              ; * The RTOS tick ISR.
     502              ; *
     503              ; * If the cooperative scheduler is in use this simply increments the tick
     504              ; * count.
     505              ; *
     506              ; * If the preemptive scheduler is in use a context switch can also occur.
     507              ; */
     508              
     509              
     510 000000       _xPortStartScheduler:
     511              
     512              ;                /* Setup the hardware to generate the tick.  Interrupts are disabled
     513              ;                when this function is called. */
     514 000000 4EFF                 aadd #-1, sp
     515 000002 6C00                 call    #_prvSetupTimerInterrupt
         000004 0000!
     516              
     517              ;                /* Restore the context of the first task that is going to run. */
     518              
     519              ;;              INTR INT14      ; force interrupt - just for debug purposes.
     520              
     521              ;;            psh mmap(ST3_55)
     522 000006 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000008 F500 
         00000a 0000!
     523 00000c EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save xar6 
         00000e E500 
         000010 0000!
     524              
     525 000012 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000014 FF00 
         000016 0000!
     526              ; does this *always* work?
     527 000018 EDE1                          mov dbl (*ar7), xar6
         00001a EF   
     528              ;                       mov xsp, dbl (*(#_first_save_xsp))              ; (init) xsp contains our TCB now
     529 00001b EB31                          mov xsp, dbl (*(#_save_xsp))            ; (init) xsp contains our TCB now
         00001d 4500 
         00001f 0000!
     530 000021 EDE3                          mov dbl (*ar7+), xar6
         000023 EF   
     531              ;                       mov xssp, dbl (*(#_first_save_xssp))
     532 000024 EB31                          mov xssp, dbl (*(#_save_xssp))
         000026 5500 
         000028 0000!
     533              ;                       mov #1, *(#_first_flag)
     534              
     535              ; what about xssp here?
     536 00002a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   11

         00002c FF00 
         00002e 0000!
     537 000030 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000032 EF00 
         000034 0000!
     538 000036 4E01                          aadd #1, sp
     539 ****** MACRO             portRESTORE_CONTEXT
     539              ;                       .C54CM_on
     539              ;                       .CPL_on
     539              ;                       .ARMS_off
     539                                      .align 4
     539              
     539              ; Restore context & return
     539                                      ;CONTEXT_RESTORE
     539              ;                       ASP
     539              ;                       EALLOW
     539              ;                       nop
     539              ;                       nop
     539              ;                       nop
     539              ;                       nop
     539 000038 4652                          bclr C54CM    
     539              ;               xssp = dbl(*(#_pxCurrentTCB))
     539              ;               xsp  = dbl(*(#_pxCurrentTCB))
     539 00003a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00003c F500 
         00003e 0000!
     539              
     539 000040 4EFD                          aadd #-3, sp
     539              ;            aadd #-3, xsp
     539              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     539              ;            BCC $1,TC1 ; |216|
     539 000042 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000044 4F00 
         000046 0000!
     539 000048 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00004a 5F00 
         00004c 0000!
     539              ;            B $4
     539              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     539              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     539              
     539              ;                       aadd #-3, sp
     539              ;$1
     539              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     539              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     539              ;$4
     539 00004e 904F                          mov xsp, xar7
     539 000050 905E                          mov xssp, xar6
     539              
     539 000052 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000054 DF00 
         000056 0000!
     539              
     539 000058 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00005a CF   
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   12

     539 00005b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00005d BF00 
         00005f 02   
     539                                      
     539 000060 AA81                          mov *ar4, ar2
     539 000062 A961                          mov *ar3, ar1
     539              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     539 000064 CAE1                          mov ar2, *ar7
     539 000066 C9C1                          mov ar1, *ar6
     539                                      
     539              
     539              
     539              
     539              ;                       mov #0, ssp     
     539              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     539              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     539                                      ; 32-bit mode - will act on SP and SSP:
     539              ;                       'fix-up' current SP and SSP - is this dangerous????
     539              ;                       aadd #-3, sp
     539              ;;                      mov *ar7, *sp
     539              ;                       mov dbl (*ar7), ar6
     539              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     539              ;                       mov *ar7(#2), *ssp                      
     539              ;                       POP mmap(ST3_55)
     539              ;                       pshboth xar7                            ; should increment both
     539 000068 AF06                          mov mmap(ST1_55), ar7
         00006a 98   
     539 00006b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00006d FFFF 
     539 00006f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     539 000071 AF96                          mov mmap(ST2_55), ar7
         000073 98   
     539 000074 CF04                          mov ar7, *sp(#2)
     539              
     539 000076 449F                          mov ssp, ar7
     539 000078 AE04                          mov mmap(ST0_55), ar6
         00007a 98   
     539 00007b CEED                          mov ar6, *ar7(#1)
         00007d 0001 
     539 00007f AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000081 98   
     539 000082 CEED                          mov ar6, *ar7(#2)
         000084 0002 
     539              
     539 000086 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000088 FF00 
         00008a 0000!
     539              
     539 00008c EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00008e 4F   
     539 00008f EDED                          mov dbl (*ar7(#2)), xssp                        
         000091 5F00 
         000093 02   
     539              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     539              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   13

     539              
     539              ;                       mov mmap(ST0_55), *ssp(#1)
     539              ;                       mov mmap(STO_55), *ssp(#2)
     539              ;                       mov mmap(ST1_55), *sp(#1)
     539              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     539              ;                       mov *ar7, t0
     539              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     539              ;                       mov *ar7(#2), t0
     539              ;                       mov t0, *ssp(#0)                        
     539              
     539              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     539              ; what about xssp?
     539              ;                       mov xar6, xsp
     539              ;                       mov xssp, xar7
     539              ;                       add #1, ar7
     539              ;                       mov xar7, xsp
     539              ;                       mov sp, t0
     539              ;                       mov ssp, t1
     539              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     539              ;                       ar0 = *ar6
     539              ;                       xssp = xar0
     539              ;                       mov *xar6, xar0
     539              ;                       mov xar0, xssp  ; stack now points to our TCB
     539              ;;                      mov sp, *ar6
     539              ;;                      mov sp, ar0
     539              ;;                      mov sp, *_pxCurrentTCB
     539              ;;                      clr ar0
     539              ;;                      mov ar0, @xar6
     539              ;;                      mov sp, AR0
     539              ;;                      add sp, xar6
     539              
     539              ;;                      pshboth xar7
     539              ;;                      pshboth xar6
     539              ;;                      pshboth xar5
     539              
     539              ;;                      popboth xar5
     539              ;;                      popboth xar6
     539              ;;                      popboth xar7
     539              
     539              ;;;                     mov *sp(#1), ar7 
     539              ;                       mov dbl(*sp(#1)), ar7
     539              ;;;                     mov  ar7, mmap(ST1_55)
     539 000094 AF04                          mov *sp(#2), ar7
     539 000096 CF96                          mov ar7, mmap(ST2_55)
         000098 98   
     539 000099 449F                          mov ssp, ar7
     539 00009b AEED                          mov *ar7(#1), ar6
         00009d 0001 
     539 00009f CE04                          mov ar6, mmap(ST0_55)
         0000a1 98   
     539 0000a2 AEED                          mov *ar7(#2), ar6
         0000a4 0002 
     539 0000a6 CF04                          mov ar7, mmap(ST0_55)
         0000a8 98   
     539              ;                       mov *ssp(#2), ar7
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   14

     539              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     539              
     539 0000a9 ED08                          mov dbl(*sp(#4)), xar7
         0000ab FF   
     539              ;                       mov *sp(#1), ar7
     539 0000ac EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0000ae F500 
         0000b0 0000!
     539              
     539 0000b2 ED0C                          mov dbl(*sp(#6)), xar6
         0000b4 EF   
     539              ;                       mov *sp(#3), ar6
     539              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     539 0000b5 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0000b7 E500 
         0000b9 0000!
     539              
     539              ;                       POP XT
     539                              ;-- Comment these to save cycles ---
     539 0000bb ED10                          mov dbl(*sp(#8)), xar7
         0000bd FF   
     539 0000be AF0E                          mov *sp(#7), ar7
     539              ;                       mov *sp(#5), ar7
     539              ;                       mov dbl(*sp(#0)), hi(ar7)
     539              ;                       mov (*sp(#0)), lo(ar7)
     539 0000c0 ED14                          mov dbl(*sp(#10)), xar6
         0000c2 EF   
     539 0000c3 AE12                          mov *sp(#9), ar6
     539 0000c5 ED18                          mov dbl(*sp(#12)), xar5
         0000c7 DF   
     539 0000c8 AD16                          mov *sp(#11), ar5
     539              ;; pvPararmeters currently here - needs to be verified --- jcw
     539 0000ca ED1C                          mov dbl(*sp(#14)), xar4
         0000cc CF   
     539 0000cd AC1A                          mov *sp(#13), ar4
     539 0000cf ED20                          mov dbl(*sp(#16)), xar3
         0000d1 BF   
     539 0000d2 AB1E                          mov *sp(#15), ar3
     539 0000d4 ED24                          mov dbl(*sp(#18)), xar2
         0000d6 AF   
     539 0000d7 AA22                          mov *sp(#17), ar2
     539 0000d9 ED28                          mov dbl(*sp(#20)), xar1
         0000db 9F   
     539 0000dc A926                          mov *sp(#19), ar1
     539 0000de ED2C                          mov dbl(*sp(#22)), xar0
         0000e0 8F   
     539 0000e1 A82A                          mov *sp(#21), ar0
     539              
     539 0000e3 A72E                          mov *sp(#23), t3
     539 0000e5 A630                          mov *sp(#24), t2
     539 0000e7 A532                          mov *sp(#25), t1
     539 0000e9 A434                          mov *sp(#26), t0
     539              
     539              ;                       mov dbl(*sp(#21)), *xssp(#0)
     539              ;                       mov *sp(#21), *ssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   15

     539              ;                       mov *sp(#21), RETA
     539              ; need to move 23-16 to XSSP contents
     539              ;                       mov xar0, dbl (*(#_save_xar7))
     539              ;                       mov ssp, ar0
     539              ;                       mov #0, ssp 
     539              ;                       mov xssp, xar0
     539              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     539              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     539                      ;               add #1, xssp            ; 32-bit return address pointer
     539                      ;               amar *xssp+
     539              ;                       mov sp, t0
     539              ;                       add #1, t0
     539              ;                       mov t0, ssp
     539              ;                       incr ssp
     539              ;                       asub #20, ar0
     539              ;                       mov xar0, xssp
     539              ;                       mov ar0, ssp
     539              ;                       mov ar0, 
     539              ;;                      mov *sp(#1), t0
     539              ;;                      mov *sp(#3), t3         ; ST0
     539              ;;                      mov *sp(#4), t2         ; DBSTAT
     539              ;;                      mov t3, *ar0(#2)
     539                      ;;              mov t2, *ar0(#1)
     539              ;;                      mov t0, *ar0(#0)
     539              
     539              ;;                      mov *sp(#5), t0
     539              ;;                      mov *sp(#6), t1
     539              ;;                      mov *sp(#7), t2
     539                      ;;              mov *sp(#8), t3
     539              
     539              
     539              
     539              ; restore ar0
     539              ;                       mov dbl(*sp(#-2)), xar0
     539              ;                       mov #-1, ar0
     539              ;;                      mov dbl (*(#_save_xar7)), xar0
     539              ;;
     539              ;;                      mov sp, t0
     539              ;;                      add #1, t0
     539              ;;                      mov t0, ssp
     539              
     539              ;                       mov *sp(#3), *(#00004ch+#1)
     539              
     539              ;                       mov t3, *ssp(#1) 
     539              ;                       mov t2, *ssp(#2)
     539              
     539              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     539              ;;                      mov t3, *(ssp(#0))
     539              ;                       mov t3, *ssp
     539              ;                       mov *sp(#3), t3 ; 
     539              ;                       mov t3, *ssp(#1)
     539              ;;                      mov *sp(#21), PC        
     539              
     539              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     539              ;                       mov dbl(xsp), dbl(lcrpc)
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   16

     539              ;                       popboth XAR7
     539              ;                       add #1, sp
     539              ;                       add #1, ssp
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539              ;                       popboth XAR6
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539              ;                       popboth XAR5
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539                              ;-----------------------------------
     539              ;                       popboth XAR4
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539              ;                       popboth XAR3
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539              ;                       popboth XAR2
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539              ;                       popboth XAR1
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539              ;                       popboth XAR0
     539              ;                       add #2, t0
     539              ;                       add #2, t1
     539              ;                       mov t0, sp
     539              ;                       mov t1, ssp
     539              ;                       EDIS
     539              ;                       NASP    ; Un-align stack pointer
     539              ;;                      pop mmap(ST3_55)
     539              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     539              ;            BCC $2,TC1 ; |216|
     539 0000eb ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0000ed 4F00 
         0000ef 0000!
     539 0000f1 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0000f3 5F00 
         0000f5 0000!
     539              ;                       B $3
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   17

     539              ;$2
     539              ;            MOV #0, *(#_first_flag) ; |217|
     539              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     539              ;                       mov dbl (*(#_first_save_xssp)), xssp
     539              ;$3
     539              ;                       aadd #-3, sp
     539 0000f7 46B2                          bclr INTM               ; enable interrupts
     539              ;                       aadd #1, sp
     539 0000f9 4805                          RETI
     539              ;                       mov #1860h, ssp
     539 0000fb 20                            nop
     539 0000fc 20                            nop
     539              ;                       nop
     540              
     541              
     542 0000fd       _vTickISR:              ; the timer ISR is aggregated for this processor architecture
     543               ;               bclr IFR0.IF4          ; enable interrupts
     544                              
     545 0000fd 4EFF                  aadd #-1, sp
     546 0000ff E651                  MOV #0, *port(#6166) ; |119|
         000101 0018 
         000103 16   
     547 000104 F402                  AND #0x0010, mmap(@IFR0)
         000106 0010 
         000108 98   
     548 000109 46B3                  bset INTM
     549              ;           MOV *port(#7188), AR1 ; |68|                ;; TIMER0 is only timer that is active
     550              ;        BSET @#0, AR1 ; |68|
     551              ;        BCC $1,AR1 == #0 ; |68|
     552              ;        AND #0x0010, *(#1)
     553              
     554              ;               bset INTM               ; disable interrupts
     555                              .if configUSE_TICK_CTR == 1
     556 00010b F731                  add #1, *(#_tickIRQctr)
         00010d 0001 
         00010f 0000 
         000111 00!  
     557                              .endif
     558              ;;              psh mmap(ST3_55)
     559 ****** MACRO         portSAVE_CONTEXT
     559              ;                       ;CONTEXT_SAVE
     559              ;                       ASP  ; Align Stack Pointer
     559              ;                       CLRC       OVM,PAGE0
     559              ;                       CLRC       AMODE
     559              ;                       EALLOW
     559              
     559 000112 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     559              
     559 000114 46B3                          bset INTM               ; disable interrupts
     559              
     559              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     559              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     559                                      
     559              ;                       pshboth xar7
     559              ;                       pshboth xar6
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   18

     559              ;                       pshboth xar5
     559              
     559 000116 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000118 F500 
         00011a 0000!
     559              
     559 00011c ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         00011e FF00 
         000120 0000!
     559              ; does this *always* work?
     559 000122 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000124 4F   
     559 000125 EDED                          mov dbl (*ar7(#2)), xssp                        
         000127 5F00 
         000129 02   
     559              ;; what about xssp here?
     559              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     559              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     559              
     559 00012a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00012c FF00 
         00012e 0000!
     559              
     559 000130 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         000132 F5   
     559 000133 CF0E                          mov ar7, *sp(#7)
     559              
     559 000135 EB14                          mov xar6, dbl(*sp(#10))
         000137 E5   
     559 000138 CE12                          mov ar6, *sp(#9)
     559              
     559 00013a EB18                          mov xar5, dbl(*sp(#12))
         00013c D5   
     559 00013d CD16                          mov ar5, *sp(#11)
     559              
     559 00013f EB1C                          mov xar4, dbl(*sp(#14))
         000141 C5   
     559 000142 CC1A                          mov ar4, *sp(#13)
     559              
     559 000144 EB20                          mov xar3, dbl(*sp(#16))
         000146 B5   
     559 000147 CB1E                          mov ar3, *sp(#15)
     559              
     559 000149 EB24                          mov xar2, dbl(*sp(#18))
         00014b A5   
     559 00014c CA22                          mov ar2, *sp(#17)
     559              
     559 00014e EB28                          mov xar1, dbl(*sp(#20))
         000150 95   
     559 000151 C926                          mov ar1, *sp(#19)
     559              
     559 000153 EB2C                          mov xar0, dbl(*sp(#22))
         000155 85   
     559 000156 C82A                          mov ar0, *sp(#21)
     559              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   19

     559 000158 C72E                          mov t3, *sp(#23)
     559 00015a C630                          mov t2, *sp(#24)
     559 00015c C532                          mov t1, *sp(#25)
     559 00015e C434                          mov t0, *sp(#26)
     559              
     559              ;;                      mov mmap(ST0_55), t0
     559              ; - this is ok - we are not pushing - it's a relative stack frame
     559              ;                       mov t0, *sp(#25)
     559              ;;                      mov t0, *sp(#23)
     559              ;;                      mov mmap(ST1_55), t1
     559              ;                       mov t1, *sp(#26)                ; stomping on own mem
     559              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     559              ;;                      mov mmap(ST2_55), t2
     559              ;;                      mov t2, *sp(#22)
     559              ;                       mov t2, *sp(#27)
     559              ;;                      mov mmap(ST2_55), t3
     559              ;                       mov t3, *sp(#28)
     559              ;;                      mov t3, *sp(#24)
     559              
     559              ;                       PSH dbl(AR0) ; 32-bit
     559              ;                       PSH dbl(AR1) 
     559              ;                       PSH dbl(AR2) ; 32-bit
     559              ;                       PUSH XAR3 ; 32-bit
     559              ;                       PUSH XAR4 ; 32-bit
     559                              ;-- Comment these to save cycles --------
     559              ;                       PUSH XAR5 ; 32-bit
     559              ;                       PUSH XAR6 ; 32-bit
     559              ;                       PUSH XAR7 ; 32-bit
     559                              ;----------------------------------------
     559              
     559              ;                       PUSH XT   ; 32-bit
     559              
     559              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     559              ;                       push xar6 ; portFLAGS_INT_ENABLED
     559              
     559 000160 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         000162 EF00 
         000164 0000!
     559 000166 EB0C                          mov xar6, dbl(*sp(#6))
         000168 E5   
     559                                      
     559              
     559              ;                       movl xar7, @_usCriticalNesting
     559              ;                       push xar7
     559 000169 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         00016b FF00 
         00016d 0000!
     559 00016f EB08                          mov xar7, dbl(*sp(#4))
         000171 F5   
     559              
     559 000172 AF06                          mov mmap(ST1_55), ar7
         000174 98   
     559 000175 CF02                          mov ar7, *sp(#1)
     559 000177 AF96                          mov  mmap(ST2_55), ar7
         000179 98   
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   20

     559 00017a CF04                          mov ar7, *sp(#2)
     559              
     559 00017c 449F                          mov ssp, ar7
     559 00017e AE04                          mov mmap(ST0_55), ar6
         000180 98   
     559 000181 CEED                          mov ar6, *ar7(#1)
         000183 0001 
     559 000185 AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000187 98   
     559 000188 CEED                          mov ar6, *ar7(#2)
         00018a 0002 
     559              ;                       mov ar7, mmap(ST0_55)
     559              ;                       mov *ssp(#2), ar7
     559              
     559              ; fix up
     559              ;                       aadd #20, sp
     559              ;                       mov sp, t0
     559              ;                       sub #1, t0
     559              ;                       mov t0, ssp
     559              
     559                                      ; move contents of SP into address of current TCB
     559              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     559              
     559              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     559              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     559              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     559              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     559              ;                       mov dbl (*ar7+), xssp
     559              
     559              ;                       mov sp, t0              ; we've already saved t0
     559              ;                       add #1, t0
     559              ;                       mov t0, ssp
     559              ; ??
     559              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     559              
     559              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     559              ;                       mov al, @sp
     559              ;                       movl  *xar6, acc        
     559              ;;                      mov  ar0, @sp
     559              ;;                      mov  @ar6, alxd
     559              ;;                      mov  ar0, @sp
     559              ;;                      movl 0(xar6), sp
     559              ;                       EDIS
     559              ;                       NASP
     559              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     559              ;                       NOP
     559 00018c ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         00018e 4F00 
         000190 0000!
     559 000192 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000194 5F00 
         000196 0000!
     559 000198 20                            nop
     559 000199 20                            nop
     559 00019a 20                            nop
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   21

     560              
     561 00019b 6C00          call     #_xTaskIncrementTick
         00019d 0000!
     562              
     563                      .if configUSE_PREEMPTION == 1
     564              ;        mov xsp, dbl (*(#_save_xsp))                   ; save xsp
     565              ;           mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     566 00019f 6C00          call    #_vTaskSwitchContext
         0001a1 0000!
     567                      .endif
     568              ;$1:
     569              ;               bclr INTM
     570 0001a3 E651                  mov #1, *port(#6166) ; |127|
         0001a5 0118 
         0001a7 16   
     571              ;               MOV #0, *port(#6294) ; |92|
     572 0001a8 F551                  or #0x0001, *port(#7188) ; |130|
         0001aa 0001 
         0001ac 1C14 
     573               ;       OR #0x0007, *port(#7188) ; |100|
     574 0001ae 4E01                  aadd #1, sp
     575 ****** MACRO         portRESTORE_CONTEXT
     575              ;                       .C54CM_on
     575              ;                       .CPL_on
     575              ;                       .ARMS_off
     575                                      .align 4
     575              
     575              ; Restore context & return
     575                                      ;CONTEXT_RESTORE
     575              ;                       ASP
     575              ;                       EALLOW
     575              ;                       nop
     575              ;                       nop
     575              ;                       nop
     575              ;                       nop
     575 0001b0 4652                          bclr C54CM    
     575              ;               xssp = dbl(*(#_pxCurrentTCB))
     575              ;               xsp  = dbl(*(#_pxCurrentTCB))
     575 0001b2 EB31                          mov xar7, dbl (*(#_save_xar7))  
         0001b4 F500 
         0001b6 0000!
     575              
     575 0001b8 4EFD                          aadd #-3, sp
     575              ;            aadd #-3, xsp
     575              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     575              ;            BCC $1,TC1 ; |216|
     575 0001ba ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0001bc 4F00 
         0001be 0000!
     575 0001c0 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0001c2 5F00 
         0001c4 0000!
     575              ;            B $4
     575              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     575              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   22

     575              
     575              ;                       aadd #-3, sp
     575              ;$1
     575              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     575              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     575              ;$4
     575 0001c6 904F                          mov xsp, xar7
     575 0001c8 905E                          mov xssp, xar6
     575              
     575 0001ca ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         0001cc DF00 
         0001ce 0000!
     575              
     575 0001d0 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         0001d2 CF   
     575 0001d3 EDAD                          mov dbl (*ar5(#2)), xar3                        
         0001d5 BF00 
         0001d7 02   
     575                                      
     575 0001d8 AA81                          mov *ar4, ar2
     575 0001da A961                          mov *ar3, ar1
     575              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     575 0001dc CAE1                          mov ar2, *ar7
     575 0001de C9C1                          mov ar1, *ar6
     575                                      
     575              
     575              
     575              
     575              ;                       mov #0, ssp     
     575              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     575              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     575                                      ; 32-bit mode - will act on SP and SSP:
     575              ;                       'fix-up' current SP and SSP - is this dangerous????
     575              ;                       aadd #-3, sp
     575              ;;                      mov *ar7, *sp
     575              ;                       mov dbl (*ar7), ar6
     575              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     575              ;                       mov *ar7(#2), *ssp                      
     575              ;                       POP mmap(ST3_55)
     575              ;                       pshboth xar7                            ; should increment both
     575 0001e0 AF06                          mov mmap(ST1_55), ar7
         0001e2 98   
     575 0001e3 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         0001e5 FFFF 
     575 0001e7 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     575 0001e9 AF96                          mov mmap(ST2_55), ar7
         0001eb 98   
     575 0001ec CF04                          mov ar7, *sp(#2)
     575              
     575 0001ee 449F                          mov ssp, ar7
     575 0001f0 AE04                          mov mmap(ST0_55), ar6
         0001f2 98   
     575 0001f3 CEED                          mov ar6, *ar7(#1)
         0001f5 0001 
     575 0001f7 AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   23

         0001f9 98   
     575 0001fa CEED                          mov ar6, *ar7(#2)
         0001fc 0002 
     575              
     575 0001fe ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000200 FF00 
         000202 0000!
     575              
     575 000204 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000206 4F   
     575 000207 EDED                          mov dbl (*ar7(#2)), xssp                        
         000209 5F00 
         00020b 02   
     575              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     575              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     575              
     575              ;                       mov mmap(ST0_55), *ssp(#1)
     575              ;                       mov mmap(STO_55), *ssp(#2)
     575              ;                       mov mmap(ST1_55), *sp(#1)
     575              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     575              ;                       mov *ar7, t0
     575              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     575              ;                       mov *ar7(#2), t0
     575              ;                       mov t0, *ssp(#0)                        
     575              
     575              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     575              ; what about xssp?
     575              ;                       mov xar6, xsp
     575              ;                       mov xssp, xar7
     575              ;                       add #1, ar7
     575              ;                       mov xar7, xsp
     575              ;                       mov sp, t0
     575              ;                       mov ssp, t1
     575              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     575              ;                       ar0 = *ar6
     575              ;                       xssp = xar0
     575              ;                       mov *xar6, xar0
     575              ;                       mov xar0, xssp  ; stack now points to our TCB
     575              ;;                      mov sp, *ar6
     575              ;;                      mov sp, ar0
     575              ;;                      mov sp, *_pxCurrentTCB
     575              ;;                      clr ar0
     575              ;;                      mov ar0, @xar6
     575              ;;                      mov sp, AR0
     575              ;;                      add sp, xar6
     575              
     575              ;;                      pshboth xar7
     575              ;;                      pshboth xar6
     575              ;;                      pshboth xar5
     575              
     575              ;;                      popboth xar5
     575              ;;                      popboth xar6
     575              ;;                      popboth xar7
     575              
     575              ;;;                     mov *sp(#1), ar7 
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   24

     575              ;                       mov dbl(*sp(#1)), ar7
     575              ;;;                     mov  ar7, mmap(ST1_55)
     575 00020c AF04                          mov *sp(#2), ar7
     575 00020e CF96                          mov ar7, mmap(ST2_55)
         000210 98   
     575 000211 449F                          mov ssp, ar7
     575 000213 AEED                          mov *ar7(#1), ar6
         000215 0001 
     575 000217 CE04                          mov ar6, mmap(ST0_55)
         000219 98   
     575 00021a AEED                          mov *ar7(#2), ar6
         00021c 0002 
     575 00021e CF04                          mov ar7, mmap(ST0_55)
         000220 98   
     575              ;                       mov *ssp(#2), ar7
     575              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     575              
     575 000221 ED08                          mov dbl(*sp(#4)), xar7
         000223 FF   
     575              ;                       mov *sp(#1), ar7
     575 000224 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000226 F500 
         000228 0000!
     575              
     575 00022a ED0C                          mov dbl(*sp(#6)), xar6
         00022c EF   
     575              ;                       mov *sp(#3), ar6
     575              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     575 00022d EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         00022f E500 
         000231 0000!
     575              
     575              ;                       POP XT
     575                              ;-- Comment these to save cycles ---
     575 000233 ED10                          mov dbl(*sp(#8)), xar7
         000235 FF   
     575 000236 AF0E                          mov *sp(#7), ar7
     575              ;                       mov *sp(#5), ar7
     575              ;                       mov dbl(*sp(#0)), hi(ar7)
     575              ;                       mov (*sp(#0)), lo(ar7)
     575 000238 ED14                          mov dbl(*sp(#10)), xar6
         00023a EF   
     575 00023b AE12                          mov *sp(#9), ar6
     575 00023d ED18                          mov dbl(*sp(#12)), xar5
         00023f DF   
     575 000240 AD16                          mov *sp(#11), ar5
     575              ;; pvPararmeters currently here - needs to be verified --- jcw
     575 000242 ED1C                          mov dbl(*sp(#14)), xar4
         000244 CF   
     575 000245 AC1A                          mov *sp(#13), ar4
     575 000247 ED20                          mov dbl(*sp(#16)), xar3
         000249 BF   
     575 00024a AB1E                          mov *sp(#15), ar3
     575 00024c ED24                          mov dbl(*sp(#18)), xar2
         00024e AF   
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   25

     575 00024f AA22                          mov *sp(#17), ar2
     575 000251 ED28                          mov dbl(*sp(#20)), xar1
         000253 9F   
     575 000254 A926                          mov *sp(#19), ar1
     575 000256 ED2C                          mov dbl(*sp(#22)), xar0
         000258 8F   
     575 000259 A82A                          mov *sp(#21), ar0
     575              
     575 00025b A72E                          mov *sp(#23), t3
     575 00025d A630                          mov *sp(#24), t2
     575 00025f A532                          mov *sp(#25), t1
     575 000261 A434                          mov *sp(#26), t0
     575              
     575              ;                       mov dbl(*sp(#21)), *xssp(#0)
     575              ;                       mov *sp(#21), *ssp
     575              ;                       mov *sp(#21), RETA
     575              ; need to move 23-16 to XSSP contents
     575              ;                       mov xar0, dbl (*(#_save_xar7))
     575              ;                       mov ssp, ar0
     575              ;                       mov #0, ssp 
     575              ;                       mov xssp, xar0
     575              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     575              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     575                      ;               add #1, xssp            ; 32-bit return address pointer
     575                      ;               amar *xssp+
     575              ;                       mov sp, t0
     575              ;                       add #1, t0
     575              ;                       mov t0, ssp
     575              ;                       incr ssp
     575              ;                       asub #20, ar0
     575              ;                       mov xar0, xssp
     575              ;                       mov ar0, ssp
     575              ;                       mov ar0, 
     575              ;;                      mov *sp(#1), t0
     575              ;;                      mov *sp(#3), t3         ; ST0
     575              ;;                      mov *sp(#4), t2         ; DBSTAT
     575              ;;                      mov t3, *ar0(#2)
     575                      ;;              mov t2, *ar0(#1)
     575              ;;                      mov t0, *ar0(#0)
     575              
     575              ;;                      mov *sp(#5), t0
     575              ;;                      mov *sp(#6), t1
     575              ;;                      mov *sp(#7), t2
     575                      ;;              mov *sp(#8), t3
     575              
     575              
     575              
     575              ; restore ar0
     575              ;                       mov dbl(*sp(#-2)), xar0
     575              ;                       mov #-1, ar0
     575              ;;                      mov dbl (*(#_save_xar7)), xar0
     575              ;;
     575              ;;                      mov sp, t0
     575              ;;                      add #1, t0
     575              ;;                      mov t0, ssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   26

     575              
     575              ;                       mov *sp(#3), *(#00004ch+#1)
     575              
     575              ;                       mov t3, *ssp(#1) 
     575              ;                       mov t2, *ssp(#2)
     575              
     575              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     575              ;;                      mov t3, *(ssp(#0))
     575              ;                       mov t3, *ssp
     575              ;                       mov *sp(#3), t3 ; 
     575              ;                       mov t3, *ssp(#1)
     575              ;;                      mov *sp(#21), PC        
     575              
     575              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     575              ;                       mov dbl(xsp), dbl(lcrpc)
     575              ;                       popboth XAR7
     575              ;                       add #1, sp
     575              ;                       add #1, ssp
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR6
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR5
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575                              ;-----------------------------------
     575              ;                       popboth XAR4
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR3
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR2
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR1
     575              ;                       add #2, t0
     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       popboth XAR0
     575              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   27

     575              ;                       add #2, t1
     575              ;                       mov t0, sp
     575              ;                       mov t1, ssp
     575              ;                       EDIS
     575              ;                       NASP    ; Un-align stack pointer
     575              ;;                      pop mmap(ST3_55)
     575              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     575              ;            BCC $2,TC1 ; |216|
     575 000263 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000265 4F00 
         000267 0000!
     575 000269 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00026b 5F00 
         00026d 0000!
     575              ;                       B $3
     575              ;$2
     575              ;            MOV #0, *(#_first_flag) ; |217|
     575              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     575              ;                       mov dbl (*(#_first_save_xssp)), xssp
     575              ;$3
     575              ;                       aadd #-3, sp
     575 00026f 46B2                          bclr INTM               ; enable interrupts
     575              ;                       aadd #1, sp
     575 000271 4805                          RETI
     575              ;                       mov #1860h, ssp
     575 000273 20                            nop
     575 000274 20                            nop
     575              ;                       nop
     576                                              
     577              ; /*-----------------------------------------------------------*/
     578              
     579              
     580              ;/*
     581              ; * Manual context switch called by the portYIELD() macro.
     582              ; */
     583              
     584              ; We are using the slow return model:
     585              
     586              ; System Stack (SSP)                    Data Stack (SP)
     587              ; SSP = x - 3:  (Loop Bits):PC(23-16)   SP = y - 3: PC(15-0)  <<= Last pushed - first to POP
     588              ; SSP = x - 2:  DBSTAT                  SP = y - 2: ST1_55
     589              ; SSP = x - 1:  ST0_55                  SP = y - 1: ST2_55
     590              ; SSP = x:      Previously saved data   SP = y:     Previously saved data
     591              
     592              
     593 000275       _vPortYield:
     594              
     595 000275 4EFF                  aadd #-1, sp
     596 000277 F402                  AND #0x0010, mmap(@IFR0)
         000279 0010 
         00027b 98   
     597              ;                /* Mimic an interrupt by pushing the SR. */
     598              
     599              ;               /* SR is 16-bits in 430X architecture */
     600              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   28

     601              ;;                pushx.w    SR
     602              
     603              ;                /* Now the SR is stacked we can disable interrupts. */
     604              
     605              ;                dint
     606              
     607 00027c 46B3                    bset INTM             ; disable interrupts
     608              
     609              ;;                bicx.w #0xF000,0(r1)
     610              ;;                swpbx.w +4(r1)
     611              ;;                rlax.w +4(r1)
     612              ;;                rlax.w +4(r1)
     613              ;;                rlax.w +4(r1)
     614              ;;                rlax.w +4(r1)
     615              ;;                addx.w +4(r1),0(r1)
     616              ;;                movx.w +2(r1),+4(r1)
     617              ;;                movx.w 0(r1),+2(r1)
     618              ;;                incdx.a r1
     619              
     620              ;                /* Save the context of the current task. */
     621              ;;        psh mmap(ST3_55)
     622 ****** MACRO         portSAVE_CONTEXT
     622              ;                       ;CONTEXT_SAVE
     622              ;                       ASP  ; Align Stack Pointer
     622              ;                       CLRC       OVM,PAGE0
     622              ;                       CLRC       AMODE
     622              ;                       EALLOW
     622              
     622 00027e 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     622              
     622 000280 46B3                          bset INTM               ; disable interrupts
     622              
     622              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     622              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     622                                      
     622              ;                       pshboth xar7
     622              ;                       pshboth xar6
     622              ;                       pshboth xar5
     622              
     622 000282 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000284 F500 
         000286 0000!
     622              
     622 000288 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         00028a FF00 
         00028c 0000!
     622              ; does this *always* work?
     622 00028e EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000290 4F   
     622 000291 EDED                          mov dbl (*ar7(#2)), xssp                        
         000293 5F00 
         000295 02   
     622              ;; what about xssp here?
     622              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     622              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   29

     622              
     622 000296 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000298 FF00 
         00029a 0000!
     622              
     622 00029c EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         00029e F5   
     622 00029f CF0E                          mov ar7, *sp(#7)
     622              
     622 0002a1 EB14                          mov xar6, dbl(*sp(#10))
         0002a3 E5   
     622 0002a4 CE12                          mov ar6, *sp(#9)
     622              
     622 0002a6 EB18                          mov xar5, dbl(*sp(#12))
         0002a8 D5   
     622 0002a9 CD16                          mov ar5, *sp(#11)
     622              
     622 0002ab EB1C                          mov xar4, dbl(*sp(#14))
         0002ad C5   
     622 0002ae CC1A                          mov ar4, *sp(#13)
     622              
     622 0002b0 EB20                          mov xar3, dbl(*sp(#16))
         0002b2 B5   
     622 0002b3 CB1E                          mov ar3, *sp(#15)
     622              
     622 0002b5 EB24                          mov xar2, dbl(*sp(#18))
         0002b7 A5   
     622 0002b8 CA22                          mov ar2, *sp(#17)
     622              
     622 0002ba EB28                          mov xar1, dbl(*sp(#20))
         0002bc 95   
     622 0002bd C926                          mov ar1, *sp(#19)
     622              
     622 0002bf EB2C                          mov xar0, dbl(*sp(#22))
         0002c1 85   
     622 0002c2 C82A                          mov ar0, *sp(#21)
     622              
     622 0002c4 C72E                          mov t3, *sp(#23)
     622 0002c6 C630                          mov t2, *sp(#24)
     622 0002c8 C532                          mov t1, *sp(#25)
     622 0002ca C434                          mov t0, *sp(#26)
     622              
     622              ;;                      mov mmap(ST0_55), t0
     622              ; - this is ok - we are not pushing - it's a relative stack frame
     622              ;                       mov t0, *sp(#25)
     622              ;;                      mov t0, *sp(#23)
     622              ;;                      mov mmap(ST1_55), t1
     622              ;                       mov t1, *sp(#26)                ; stomping on own mem
     622              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     622              ;;                      mov mmap(ST2_55), t2
     622              ;;                      mov t2, *sp(#22)
     622              ;                       mov t2, *sp(#27)
     622              ;;                      mov mmap(ST2_55), t3
     622              ;                       mov t3, *sp(#28)
     622              ;;                      mov t3, *sp(#24)
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   30

     622              
     622              ;                       PSH dbl(AR0) ; 32-bit
     622              ;                       PSH dbl(AR1) 
     622              ;                       PSH dbl(AR2) ; 32-bit
     622              ;                       PUSH XAR3 ; 32-bit
     622              ;                       PUSH XAR4 ; 32-bit
     622                              ;-- Comment these to save cycles --------
     622              ;                       PUSH XAR5 ; 32-bit
     622              ;                       PUSH XAR6 ; 32-bit
     622              ;                       PUSH XAR7 ; 32-bit
     622                              ;----------------------------------------
     622              
     622              ;                       PUSH XT   ; 32-bit
     622              
     622              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     622              ;                       push xar6 ; portFLAGS_INT_ENABLED
     622              
     622 0002cc ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0002ce EF00 
         0002d0 0000!
     622 0002d2 EB0C                          mov xar6, dbl(*sp(#6))
         0002d4 E5   
     622                                      
     622              
     622              ;                       movl xar7, @_usCriticalNesting
     622              ;                       push xar7
     622 0002d5 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0002d7 FF00 
         0002d9 0000!
     622 0002db EB08                          mov xar7, dbl(*sp(#4))
         0002dd F5   
     622              
     622 0002de AF06                          mov mmap(ST1_55), ar7
         0002e0 98   
     622 0002e1 CF02                          mov ar7, *sp(#1)
     622 0002e3 AF96                          mov  mmap(ST2_55), ar7
         0002e5 98   
     622 0002e6 CF04                          mov ar7, *sp(#2)
     622              
     622 0002e8 449F                          mov ssp, ar7
     622 0002ea AE04                          mov mmap(ST0_55), ar6
         0002ec 98   
     622 0002ed CEED                          mov ar6, *ar7(#1)
         0002ef 0001 
     622 0002f1 AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         0002f3 98   
     622 0002f4 CEED                          mov ar6, *ar7(#2)
         0002f6 0002 
     622              ;                       mov ar7, mmap(ST0_55)
     622              ;                       mov *ssp(#2), ar7
     622              
     622              ; fix up
     622              ;                       aadd #20, sp
     622              ;                       mov sp, t0
     622              ;                       sub #1, t0
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   31

     622              ;                       mov t0, ssp
     622              
     622                                      ; move contents of SP into address of current TCB
     622              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     622              
     622              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     622              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     622              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     622              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     622              ;                       mov dbl (*ar7+), xssp
     622              
     622              ;                       mov sp, t0              ; we've already saved t0
     622              ;                       add #1, t0
     622              ;                       mov t0, ssp
     622              ; ??
     622              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     622              
     622              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     622              ;                       mov al, @sp
     622              ;                       movl  *xar6, acc        
     622              ;;                      mov  ar0, @sp
     622              ;;                      mov  @ar6, alxd
     622              ;;                      mov  ar0, @sp
     622              ;;                      movl 0(xar6), sp
     622              ;                       EDIS
     622              ;                       NASP
     622              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     622              ;                       NOP
     622 0002f8 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0002fa 4F00 
         0002fc 0000!
     622 0002fe ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000300 5F00 
         000302 0000!
     622 000304 20                            nop
     622 000305 20                            nop
     622 000306 20                            nop
     623              
     624              ;        /* Switch to the highest priority task that is ready to run. */
     625 000307 6C00          call    #_vTaskSwitchContext
         000309 0000!
     626 00030b E651          mov #1, *port(#6166) ; |127|
         00030d 0118 
         00030f 16   
     627 000310 F551                  or #0x0001, *port(#7188) ; |130|
         000312 0001 
         000314 1C14 
     628 000316 4E01                  aadd #1, sp
     629 ****** MACRO         portRESTORE_CONTEXT
     629              ;                       .C54CM_on
     629              ;                       .CPL_on
     629              ;                       .ARMS_off
     629                                      .align 4
     629              
     629              ; Restore context & return
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   32

     629                                      ;CONTEXT_RESTORE
     629              ;                       ASP
     629              ;                       EALLOW
     629              ;                       nop
     629              ;                       nop
     629              ;                       nop
     629              ;                       nop
     629 000318 4652                          bclr C54CM    
     629              ;               xssp = dbl(*(#_pxCurrentTCB))
     629              ;               xsp  = dbl(*(#_pxCurrentTCB))
     629 00031a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00031c F500 
         00031e 0000!
     629              
     629 000320 4EFD                          aadd #-3, sp
     629              ;            aadd #-3, xsp
     629              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     629              ;            BCC $1,TC1 ; |216|
     629 000322 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000324 4F00 
         000326 0000!
     629 000328 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00032a 5F00 
         00032c 0000!
     629              ;            B $4
     629              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     629              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     629              
     629              ;                       aadd #-3, sp
     629              ;$1
     629              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     629              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     629              ;$4
     629 00032e 904F                          mov xsp, xar7
     629 000330 905E                          mov xssp, xar6
     629              
     629 000332 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000334 DF00 
         000336 0000!
     629              
     629 000338 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00033a CF   
     629 00033b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00033d BF00 
         00033f 02   
     629                                      
     629 000340 AA81                          mov *ar4, ar2
     629 000342 A961                          mov *ar3, ar1
     629              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     629 000344 CAE1                          mov ar2, *ar7
     629 000346 C9C1                          mov ar1, *ar6
     629                                      
     629              
     629              
     629              
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   33

     629              ;                       mov #0, ssp     
     629              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     629              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     629                                      ; 32-bit mode - will act on SP and SSP:
     629              ;                       'fix-up' current SP and SSP - is this dangerous????
     629              ;                       aadd #-3, sp
     629              ;;                      mov *ar7, *sp
     629              ;                       mov dbl (*ar7), ar6
     629              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     629              ;                       mov *ar7(#2), *ssp                      
     629              ;                       POP mmap(ST3_55)
     629              ;                       pshboth xar7                            ; should increment both
     629 000348 AF06                          mov mmap(ST1_55), ar7
         00034a 98   
     629 00034b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00034d FFFF 
     629 00034f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     629 000351 AF96                          mov mmap(ST2_55), ar7
         000353 98   
     629 000354 CF04                          mov ar7, *sp(#2)
     629              
     629 000356 449F                          mov ssp, ar7
     629 000358 AE04                          mov mmap(ST0_55), ar6
         00035a 98   
     629 00035b CEED                          mov ar6, *ar7(#1)
         00035d 0001 
     629 00035f AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000361 98   
     629 000362 CEED                          mov ar6, *ar7(#2)
         000364 0002 
     629              
     629 000366 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000368 FF00 
         00036a 0000!
     629              
     629 00036c EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00036e 4F   
     629 00036f EDED                          mov dbl (*ar7(#2)), xssp                        
         000371 5F00 
         000373 02   
     629              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     629              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     629              
     629              ;                       mov mmap(ST0_55), *ssp(#1)
     629              ;                       mov mmap(STO_55), *ssp(#2)
     629              ;                       mov mmap(ST1_55), *sp(#1)
     629              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     629              ;                       mov *ar7, t0
     629              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     629              ;                       mov *ar7(#2), t0
     629              ;                       mov t0, *ssp(#0)                        
     629              
     629              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     629              ; what about xssp?
     629              ;                       mov xar6, xsp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   34

     629              ;                       mov xssp, xar7
     629              ;                       add #1, ar7
     629              ;                       mov xar7, xsp
     629              ;                       mov sp, t0
     629              ;                       mov ssp, t1
     629              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     629              ;                       ar0 = *ar6
     629              ;                       xssp = xar0
     629              ;                       mov *xar6, xar0
     629              ;                       mov xar0, xssp  ; stack now points to our TCB
     629              ;;                      mov sp, *ar6
     629              ;;                      mov sp, ar0
     629              ;;                      mov sp, *_pxCurrentTCB
     629              ;;                      clr ar0
     629              ;;                      mov ar0, @xar6
     629              ;;                      mov sp, AR0
     629              ;;                      add sp, xar6
     629              
     629              ;;                      pshboth xar7
     629              ;;                      pshboth xar6
     629              ;;                      pshboth xar5
     629              
     629              ;;                      popboth xar5
     629              ;;                      popboth xar6
     629              ;;                      popboth xar7
     629              
     629              ;;;                     mov *sp(#1), ar7 
     629              ;                       mov dbl(*sp(#1)), ar7
     629              ;;;                     mov  ar7, mmap(ST1_55)
     629 000374 AF04                          mov *sp(#2), ar7
     629 000376 CF96                          mov ar7, mmap(ST2_55)
         000378 98   
     629 000379 449F                          mov ssp, ar7
     629 00037b AEED                          mov *ar7(#1), ar6
         00037d 0001 
     629 00037f CE04                          mov ar6, mmap(ST0_55)
         000381 98   
     629 000382 AEED                          mov *ar7(#2), ar6
         000384 0002 
     629 000386 CF04                          mov ar7, mmap(ST0_55)
         000388 98   
     629              ;                       mov *ssp(#2), ar7
     629              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     629              
     629 000389 ED08                          mov dbl(*sp(#4)), xar7
         00038b FF   
     629              ;                       mov *sp(#1), ar7
     629 00038c EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         00038e F500 
         000390 0000!
     629              
     629 000392 ED0C                          mov dbl(*sp(#6)), xar6
         000394 EF   
     629              ;                       mov *sp(#3), ar6
     629              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   35

     629 000395 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         000397 E500 
         000399 0000!
     629              
     629              ;                       POP XT
     629                              ;-- Comment these to save cycles ---
     629 00039b ED10                          mov dbl(*sp(#8)), xar7
         00039d FF   
     629 00039e AF0E                          mov *sp(#7), ar7
     629              ;                       mov *sp(#5), ar7
     629              ;                       mov dbl(*sp(#0)), hi(ar7)
     629              ;                       mov (*sp(#0)), lo(ar7)
     629 0003a0 ED14                          mov dbl(*sp(#10)), xar6
         0003a2 EF   
     629 0003a3 AE12                          mov *sp(#9), ar6
     629 0003a5 ED18                          mov dbl(*sp(#12)), xar5
         0003a7 DF   
     629 0003a8 AD16                          mov *sp(#11), ar5
     629              ;; pvPararmeters currently here - needs to be verified --- jcw
     629 0003aa ED1C                          mov dbl(*sp(#14)), xar4
         0003ac CF   
     629 0003ad AC1A                          mov *sp(#13), ar4
     629 0003af ED20                          mov dbl(*sp(#16)), xar3
         0003b1 BF   
     629 0003b2 AB1E                          mov *sp(#15), ar3
     629 0003b4 ED24                          mov dbl(*sp(#18)), xar2
         0003b6 AF   
     629 0003b7 AA22                          mov *sp(#17), ar2
     629 0003b9 ED28                          mov dbl(*sp(#20)), xar1
         0003bb 9F   
     629 0003bc A926                          mov *sp(#19), ar1
     629 0003be ED2C                          mov dbl(*sp(#22)), xar0
         0003c0 8F   
     629 0003c1 A82A                          mov *sp(#21), ar0
     629              
     629 0003c3 A72E                          mov *sp(#23), t3
     629 0003c5 A630                          mov *sp(#24), t2
     629 0003c7 A532                          mov *sp(#25), t1
     629 0003c9 A434                          mov *sp(#26), t0
     629              
     629              ;                       mov dbl(*sp(#21)), *xssp(#0)
     629              ;                       mov *sp(#21), *ssp
     629              ;                       mov *sp(#21), RETA
     629              ; need to move 23-16 to XSSP contents
     629              ;                       mov xar0, dbl (*(#_save_xar7))
     629              ;                       mov ssp, ar0
     629              ;                       mov #0, ssp 
     629              ;                       mov xssp, xar0
     629              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     629              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     629                      ;               add #1, xssp            ; 32-bit return address pointer
     629                      ;               amar *xssp+
     629              ;                       mov sp, t0
     629              ;                       add #1, t0
     629              ;                       mov t0, ssp
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   36

     629              ;                       incr ssp
     629              ;                       asub #20, ar0
     629              ;                       mov xar0, xssp
     629              ;                       mov ar0, ssp
     629              ;                       mov ar0, 
     629              ;;                      mov *sp(#1), t0
     629              ;;                      mov *sp(#3), t3         ; ST0
     629              ;;                      mov *sp(#4), t2         ; DBSTAT
     629              ;;                      mov t3, *ar0(#2)
     629                      ;;              mov t2, *ar0(#1)
     629              ;;                      mov t0, *ar0(#0)
     629              
     629              ;;                      mov *sp(#5), t0
     629              ;;                      mov *sp(#6), t1
     629              ;;                      mov *sp(#7), t2
     629                      ;;              mov *sp(#8), t3
     629              
     629              
     629              
     629              ; restore ar0
     629              ;                       mov dbl(*sp(#-2)), xar0
     629              ;                       mov #-1, ar0
     629              ;;                      mov dbl (*(#_save_xar7)), xar0
     629              ;;
     629              ;;                      mov sp, t0
     629              ;;                      add #1, t0
     629              ;;                      mov t0, ssp
     629              
     629              ;                       mov *sp(#3), *(#00004ch+#1)
     629              
     629              ;                       mov t3, *ssp(#1) 
     629              ;                       mov t2, *ssp(#2)
     629              
     629              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     629              ;;                      mov t3, *(ssp(#0))
     629              ;                       mov t3, *ssp
     629              ;                       mov *sp(#3), t3 ; 
     629              ;                       mov t3, *ssp(#1)
     629              ;;                      mov *sp(#21), PC        
     629              
     629              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     629              ;                       mov dbl(xsp), dbl(lcrpc)
     629              ;                       popboth XAR7
     629              ;                       add #1, sp
     629              ;                       add #1, ssp
     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629              ;                       popboth XAR6
     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629              ;                       popboth XAR5
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   37

     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629                              ;-----------------------------------
     629              ;                       popboth XAR4
     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629              ;                       popboth XAR3
     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629              ;                       popboth XAR2
     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629              ;                       popboth XAR1
     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629              ;                       popboth XAR0
     629              ;                       add #2, t0
     629              ;                       add #2, t1
     629              ;                       mov t0, sp
     629              ;                       mov t1, ssp
     629              ;                       EDIS
     629              ;                       NASP    ; Un-align stack pointer
     629              ;;                      pop mmap(ST3_55)
     629              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     629              ;            BCC $2,TC1 ; |216|
     629 0003cb ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0003cd 4F00 
         0003cf 0000!
     629 0003d1 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0003d3 5F00 
         0003d5 0000!
     629              ;                       B $3
     629              ;$2
     629              ;            MOV #0, *(#_first_flag) ; |217|
     629              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     629              ;                       mov dbl (*(#_first_save_xssp)), xssp
     629              ;$3
     629              ;                       aadd #-3, sp
     629 0003d7 46B2                          bclr INTM               ; enable interrupts
     629              ;                       aadd #1, sp
     629 0003d9 4805                          RETI
     629              ;                       mov #1860h, ssp
     629 0003db 20                            nop
     629 0003dc 20                            nop
     629              ;                       nop
TMS320C55x Assembler PC v4.4.1 Sun Sep 16 02:44:00 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   38

     630              
     631              ;;;
     632              
     633              ;                /* Place the tick ISR in the correct vector. */
     634              
     635              ;;;                .sect ".int49"                       ; TIMER1_A0_VECTOR                      
     636              ;;                .sect ".int14"                        ; CPUTIMER2
     637              ;                 .sect ".text"                 ; CPUTIMER2
     638              ;;;;             .sect ".INT14_ISR"
     639              ;               .global _INT14_ISR
     640              ;;;; _INT14_ISR:
     641              ;;;;                .short   _vTickISR
     642              ;;;;            LCR #_vTickISR
     643                              .end

No Assembly Errors, No Assembly Warnings
