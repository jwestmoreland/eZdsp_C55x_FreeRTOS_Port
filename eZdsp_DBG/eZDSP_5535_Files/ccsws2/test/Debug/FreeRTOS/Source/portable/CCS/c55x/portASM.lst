TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    1

     714              ; Temporary Registers Used: None
       1              ; .cdecls C, LIST, "FreeRTOSConfig.h"
       2              ;  .include "FreeRTOSConfig.h"
       3              ; 32-bit stack slow mode
       4                      .mmregs
       5                       .C54CM_off
       6              ;     .CPL_off
       7                    .ARMS_off
       8                       .align 4
       9              ;       .c28_amode
      10              
      11                        .global _usCriticalNesting
      12                           .global _save_xsp
      13                           .global _save_xssp
      14                           .global _first_save_xsp
      15                           .global _first_save_xssp
      16                           .global _first_flag
      17                           .global _save_xar7
      18                           .global _tZero
      19                           .global _save_xar6
      20                        .global _pxCurrentTCB
      21                           .global _xTaskIncrementTick
      22                           .ref    _xTaskIncrementTick
      23                           .global _vTaskSwitchContext
      24                           .global _prvSetupTimerInterrupt
      25                                       .global _tickIRQctr
      26                                       .global _save_new_pxcode
      27                                       .global _save_new_pxlcode
      28              
      29              ;                         .ref configUSE_TICK_CTR
      30              ;                         .ref configUSE_PREEMPTION
      31              
      32                           .def _vPortYield
      33                           .def _xPortStartScheduler
      34                           .def _vTickISR
      35                           .global _vPortYield
      36                           .global _xPortStartScheduler
      37                           .global _vTickISR
      38                           .global _INT14_ISR
      39                           .global _portFLAGS_INT_ENABLED
      40                           .global _portFLAGS_INT_ENABLED_POPPED
      41                           .global _DBSTAT_SAVE
      42                           .global _DBSTAT_RESTORE
      43                           .global _STATUS0_LOW
      44                           .global _STATUS0_HIGH
      45                           .global _STATUS1_LOW
      46                           .global _STATUS1_HIGH
      47                           .global _STATUS2_LOW
      48                           .global _STATUS2_HIGH
      49                           .global _PC_REG_HIGH_SAVE
      50                           .global _PC_REG_LOW_SAVE
      51                           .global _PC_REG_HIGH_RESTORE
      52                           .global _PC_REG_LOW_RESTORE
      53              ;            .cdecls C,NOLIST,"portmacro.h"
      54              ;            .cdecls C,LIST,"FreeRTOSConfig.h"
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    2

      55              ;                       CLRC AMODE
      56              ;       System Stack
      57 000000               .text
      58              portSAVE_CONTEXT .macro 
      59              ;                       ;CONTEXT_SAVE
      60              ;                       ASP  ; Align Stack Pointer
      61              ;                       CLRC       OVM,PAGE0
      62              ;                       CLRC       AMODE
      63              ;                       EALLOW
      64              
      65                                      bclr C54CM      ; temp - until we figure out what is setting this
      66              
      67                                      bset INTM               ; disable interrupts
      68              
      69              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
      70              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
      71                                      
      72              ;                       pshboth xar7
      73              ;                       pshboth xar6
      74              ;                       pshboth xar5
      75                          .if configDEBUG_NEW_PX_S == 1
      76                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
      77                                      mov xar6, dbl (*(#_save_xar6))                  ; save x
      78                                      .endif
      79              
      80                                      .if configDEBUG_NEW_PX_S == 1
      81                                  mov dbl(*sp(#0)), xar7
      82                                  mov xar7, dbl(*(#_save_new_pxcode))
      83                                      mov ssp, ar6
      84                                      mov *(ar6), ar7
      85                                      mov xar7, dbl(*(#_save_new_pxlcode))
      86              
      87                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
      88                                      mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
      89                                  .endif
      90              
      91                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
      92                                      .if configUSE_CONTEXT_DEBUG == 1
      93                                      mov xar6, dbl (*(#_save_xar6))
      94                                      .endif
      95              
      96                                      mov dbl (*(#_pxCurrentTCB)), xar7
      97              ; does this *always* work?
      98                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
      99                                      mov dbl (*ar7(#2)), xssp                        
     100              ;; what about xssp here?
     101              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     102              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     103                                 .if configUSE_CONTEXT_DEBUG == 1
     104              ;; save current PC (and possible loop bits values)
     105              ;; for debug - to see if this is being corrupted
     106                                      mov dbl(*ar7), xar6
     107                                      mov dbl(*ar6), xar7
     108                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
     109                                      mov xssp, xar7
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    3

     110                                      mov dbl(*ar7), xar6
     111                                      mov dbl(*ar6), xar7
     112                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
     113                                      mov xssp, xar7
     114                                      add #-2, ar7
     115                                      mov dbl(*ar7), xar6
     116                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
     117                          mov dbl (*(#_save_xar6)), xar6
     118              
     119              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     120              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     121              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     122                                      .endif
     123              
     124                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     125              
     126                                      mov xar7, dbl(*sp(#8))                          ; save xar7
     127                                      mov ar7, *sp(#7)
     128              
     129                                      mov xar6, dbl(*sp(#10))
     130                                      mov ar6, *sp(#9)
     131              
     132                                      mov xar5, dbl(*sp(#12))
     133                                      mov ar5, *sp(#11)
     134              
     135                                      mov xar4, dbl(*sp(#14))
     136                                      mov ar4, *sp(#13)
     137              
     138                                      mov xar3, dbl(*sp(#16))
     139                                      mov ar3, *sp(#15)
     140              
     141                                      mov xar2, dbl(*sp(#18))
     142                                      mov ar2, *sp(#17)
     143              
     144                                      mov xar1, dbl(*sp(#20))
     145                                      mov ar1, *sp(#19)
     146              
     147                                      mov xar0, dbl(*sp(#22))
     148                                      mov ar0, *sp(#21)
     149              
     150                                      mov t3, *sp(#23)
     151                                      mov t2, *sp(#24)
     152                                      mov t1, *sp(#25)
     153                                      mov t0, *sp(#26)
     154              
     155              ;;                      mov mmap(ST0_55), t0
     156              ; - this is ok - we are not pushing - it's a relative stack frame
     157              ;                       mov t0, *sp(#25)
     158              ;;                      mov t0, *sp(#23)
     159              ;;                      mov mmap(ST1_55), t1
     160              ;                       mov t1, *sp(#26)                ; stomping on own mem
     161              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     162              ;;                      mov mmap(ST2_55), t2
     163              ;;                      mov t2, *sp(#22)
     164              ;                       mov t2, *sp(#27)
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    4

     165              ;;                      mov mmap(ST2_55), t3
     166              ;                       mov t3, *sp(#28)
     167              ;;                      mov t3, *sp(#24)
     168              
     169              ;                       PSH dbl(AR0) ; 32-bit
     170              ;                       PSH dbl(AR1) 
     171              ;                       PSH dbl(AR2) ; 32-bit
     172              ;                       PUSH XAR3 ; 32-bit
     173              ;                       PUSH XAR4 ; 32-bit
     174                              ;-- Comment these to save cycles --------
     175              ;                       PUSH XAR5 ; 32-bit
     176              ;                       PUSH XAR6 ; 32-bit
     177              ;                       PUSH XAR7 ; 32-bit
     178                              ;----------------------------------------
     179              
     180              ;                       PUSH XT   ; 32-bit
     181              
     182              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     183              ;                       push xar6 ; portFLAGS_INT_ENABLED
     184              
     185                                      mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
     186                                      mov xar6, dbl(*sp(#6))
     187                                      
     188              
     189              ;                       movl xar7, @_usCriticalNesting
     190              ;                       push xar7
     191                                      mov dbl (*(#_usCriticalNesting)), xar7
     192                                      mov xar7, dbl(*sp(#4))
     193              
     194                                      mov mmap(ST1_55), ar7
     195                                      mov ar7, *sp(#1)
     196                                      mov  mmap(ST2_55), ar7
     197                                      mov ar7, *sp(#2)
     198              
     199                                      mov ssp, ar7
     200                                      mov mmap(ST0_55), ar6
     201                                      mov ar6, *ar7(#2)
     202              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     203              ;;;                     mov ar6, *ar7(#2)
     204              ;                       mov ar7, mmap(ST0_55)
     205              ;                       mov *ssp(#2), ar7
     206              
     207              ; fix up
     208              ;                       aadd #20, sp
     209              ;                       mov sp, t0
     210              ;                       sub #1, t0
     211              ;                       mov t0, ssp
     212              
     213                                      ; move contents of SP into address of current TCB
     214              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     215              
     216              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     217              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     218              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     219              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    5

     220              ;                       mov dbl (*ar7+), xssp
     221              
     222              ;                       mov sp, t0              ; we've already saved t0
     223              ;                       add #1, t0
     224              ;                       mov t0, ssp
     225              ; ??
     226              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     227              
     228              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     229              ;                       mov al, @sp
     230              ;                       movl  *xar6, acc        
     231              ;;                      mov  ar0, @sp
     232              ;;                      mov  @ar6, alxd
     233              ;;                      mov  ar0, @sp
     234              ;;                      movl 0(xar6), sp
     235              ;                       EDIS
     236              ;                       NASP
     237              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     238              ;                       NOP
     239                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
     240                              mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     241                                      nop
     242                                      nop
     243                                      nop
     244                                      .endm
     245              
     246              portRESTORE_CONTEXT .macro
     247                                      .C54CM_off
     248              ;                       .CPL_off
     249                                      .ARMS_off
     250                                      .align 4
     251              
     252              ; Restore context & return
     253                                      ;CONTEXT_RESTORE
     254              ;                       ASP
     255              ;                       EALLOW
     256              ;                       nop
     257              ;                       nop
     258              ;                       nop
     259              ;                       nop
     260                                      bclr C54CM    
     261              ;               xssp = dbl(*(#_pxCurrentTCB))
     262              ;               xsp  = dbl(*(#_pxCurrentTCB))
     263                                      mov xar7, dbl (*(#_save_xar7))  
     264              
     265                                      aadd #-3, sp
     266              ;            aadd #-3, xsp
     267              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     268              ;            BCC $1,TC1 ; |216|
     269                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
     270                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
     271              ;            B $4
     272              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     273              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     274              
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    6

     275              ;                       aadd #-3, sp
     276              ;$1
     277              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     278              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     279              ;$4
     280                                      mov xsp, xar7
     281                                      mov xssp, xar6
     282              
     283                                      mov dbl (*(#_pxCurrentTCB)), xar5                       
     284              
     285                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     286                                      mov dbl (*ar5(#2)), xar3                        
     287                                      
     288                                      mov *ar4, ar2
     289                                      mov *ar3, ar1
     290              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     291                                      mov ar2, *ar7
     292                                      mov ar1, *ar6
     293              
     294              
     295              ;                       mov #0, ssp     
     296              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     297              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     298                                      ; 32-bit mode - will act on SP and SSP:
     299              ;                       'fix-up' current SP and SSP - is this dangerous????
     300              ;                       aadd #-3, sp
     301              ;;                      mov *ar7, *sp
     302              ;                       mov dbl (*ar7), ar6
     303              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     304              ;                       mov *ar7(#2), *ssp                      
     305              ;                       POP mmap(ST3_55)
     306              ;                       pshboth xar7                            ; should increment both
     307                                      mov mmap(ST1_55), ar7
     308                                      and #0xf7ff, ar7                        ; <here>#0800h
     309                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     310                                      mov mmap(ST2_55), ar7
     311                                      mov ar7, *sp(#2)
     312              
     313                                      mov ssp, ar7
     314                                      mov mmap(ST0_55), ar6
     315                                      mov ar6, *ar7(#2)
     316              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     317              ;;                      mov ar6, *ar7(#1)
     318              
     319                                      mov dbl (*(#_pxCurrentTCB)), xar7
     320              
     321                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     322                                      mov dbl (*ar7(#2)), xssp                        
     323              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     324              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     325                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     326                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     327                                      mov xar6, dbl (*(#_save_xar6))
     328              
     329              ;; this is for debug
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    7

     330                                      mov dbl(*ar7), xar6
     331                                      mov dbl(*ar6), xar7
     332                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     333                                      mov xssp, xar7
     334                                      mov dbl(*ar7), xar6
     335                                      mov dbl(*ar6), xar7
     336                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     337                                      mov xssp, xar7
     338                                      add #-2, ar7
     339                                      mov dbl(*ar7), xar6
     340                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     341                                      mov dbl (*(#_save_xar6)), xar6
     342                                      
     343                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     344                                      .endif
     345              
     346              ;                       mov mmap(ST0_55), *ssp(#1)
     347              ;                       mov mmap(STO_55), *ssp(#2)
     348              ;                       mov mmap(ST1_55), *sp(#1)
     349              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     350              ;                       mov *ar7, t0
     351              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     352              ;                       mov *ar7(#2), t0
     353              ;                       mov t0, *ssp(#0)                        
     354              
     355              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     356              ; what about xssp?
     357              ;                       mov xar6, xsp
     358              ;                       mov xssp, xar7
     359              ;                       add #1, ar7
     360              ;                       mov xar7, xsp
     361              ;                       mov sp, t0
     362              ;                       mov ssp, t1
     363              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     364              ;                       ar0 = *ar6
     365              ;                       xssp = xar0
     366              ;                       mov *xar6, xar0
     367              ;                       mov xar0, xssp  ; stack now points to our TCB
     368              ;;                      mov sp, *ar6
     369              ;;                      mov sp, ar0
     370              ;;                      mov sp, *_pxCurrentTCB
     371              ;;                      clr ar0
     372              ;;                      mov ar0, @xar6
     373              ;;                      mov sp, AR0
     374              ;;                      add sp, xar6
     375              
     376              ;;                      pshboth xar7
     377              ;;                      pshboth xar6
     378              ;;                      pshboth xar5
     379              
     380              ;;                      popboth xar5
     381              ;;                      popboth xar6
     382              ;;                      popboth xar7
     383              
     384              ;;;                     mov *sp(#1), ar7 
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    8

     385              ;                       mov dbl(*sp(#1)), ar7
     386              ;;;                     mov  ar7, mmap(ST1_55)
     387                                      mov *sp(#2), ar7
     388                                      mov ar7, mmap(ST2_55)
     389                                      mov ssp, ar7
     390                                      mov *ar7(#2), ar6
     391                                      mov ar6, mmap(ST0_55)
     392              ;                       mov *ar7(#2), ar6
     393              ;                       mov ar6, *ssp(#2)
     394              ;                       mov *ssp(#2), ar7
     395              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     396              
     397                                      mov dbl(*sp(#4)), xar7
     398              ;                       mov *sp(#1), ar7
     399                                      mov xar7, dbl(*(#_usCriticalNesting))   
     400              
     401                                      mov dbl(*sp(#6)), xar6
     402              ;                       mov *sp(#3), ar6
     403              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     404                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     405              
     406              ;                       POP XT
     407                              ;-- Comment these to save cycles ---
     408                                      mov dbl(*sp(#8)), xar7
     409                                      mov *sp(#7), ar7
     410              ;                       mov *sp(#5), ar7
     411              ;                       mov dbl(*sp(#0)), hi(ar7)
     412              ;                       mov (*sp(#0)), lo(ar7)
     413                                      mov dbl(*sp(#10)), xar6
     414                                      mov *sp(#9), ar6
     415                                      mov dbl(*sp(#12)), xar5
     416                                      mov *sp(#11), ar5
     417              ;; pvPararmeters currently here - needs to be verified --- jcw
     418                                      mov dbl(*sp(#14)), xar4
     419                                      mov *sp(#13), ar4
     420                                      mov dbl(*sp(#16)), xar3
     421                                      mov *sp(#15), ar3
     422                                      mov dbl(*sp(#18)), xar2
     423                                      mov *sp(#17), ar2
     424                                      mov dbl(*sp(#20)), xar1
     425                                      mov *sp(#19), ar1
     426                                      mov dbl(*sp(#22)), xar0
     427                                      mov *sp(#21), ar0
     428              
     429                                      mov *sp(#23), t3
     430                                      mov *sp(#24), t2
     431                                      mov *sp(#25), t1
     432                                      mov *sp(#26), t0
     433              
     434              ;                       mov dbl(*sp(#21)), *xssp(#0)
     435              ;                       mov *sp(#21), *ssp
     436              ;                       mov *sp(#21), RETA
     437              ; need to move 23-16 to XSSP contents
     438              ;                       mov xar0, dbl (*(#_save_xar7))
     439              ;                       mov ssp, ar0
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    9

     440              ;                       mov #0, ssp 
     441              ;                       mov xssp, xar0
     442              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     443              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     444                      ;               add #1, xssp            ; 32-bit return address pointer
     445                      ;               amar *xssp+
     446              ;                       mov sp, t0
     447              ;                       add #1, t0
     448              ;                       mov t0, ssp
     449              ;                       incr ssp
     450              ;                       asub #20, ar0
     451              ;                       mov xar0, xssp
     452              ;                       mov ar0, ssp
     453              ;                       mov ar0, 
     454              ;;                      mov *sp(#1), t0
     455              ;;                      mov *sp(#3), t3         ; ST0
     456              ;;                      mov *sp(#4), t2         ; DBSTAT
     457              ;;                      mov t3, *ar0(#2)
     458                      ;;              mov t2, *ar0(#1)
     459              ;;                      mov t0, *ar0(#0)
     460              
     461              ;;                      mov *sp(#5), t0
     462              ;;                      mov *sp(#6), t1
     463              ;;                      mov *sp(#7), t2
     464                      ;;              mov *sp(#8), t3
     465              
     466              
     467              
     468              ; restore ar0
     469              ;                       mov dbl(*sp(#-2)), xar0
     470              ;                       mov #-1, ar0
     471              ;;                      mov dbl (*(#_save_xar7)), xar0
     472              ;;
     473              ;;                      mov sp, t0
     474              ;;                      add #1, t0
     475              ;;                      mov t0, ssp
     476              
     477              ;                       mov *sp(#3), *(#00004ch+#1)
     478              
     479              ;                       mov t3, *ssp(#1) 
     480              ;                       mov t2, *ssp(#2)
     481              
     482              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     483              ;;                      mov t3, *(ssp(#0))
     484              ;                       mov t3, *ssp
     485              ;                       mov *sp(#3), t3 ; 
     486              ;                       mov t3, *ssp(#1)
     487              ;;                      mov *sp(#21), PC        
     488              
     489              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     490              ;                       mov dbl(xsp), dbl(lcrpc)
     491              ;                       popboth XAR7
     492              ;                       add #1, sp
     493              ;                       add #1, ssp
     494              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   10

     495              ;                       add #2, t1
     496              ;                       mov t0, sp
     497              ;                       mov t1, ssp
     498              ;                       popboth XAR6
     499              ;                       add #2, t0
     500              ;                       add #2, t1
     501              ;                       mov t0, sp
     502              ;                       mov t1, ssp
     503              ;                       popboth XAR5
     504              ;                       add #2, t0
     505              ;                       add #2, t1
     506              ;                       mov t0, sp
     507              ;                       mov t1, ssp
     508                              ;-----------------------------------
     509              ;                       popboth XAR4
     510              ;                       add #2, t0
     511              ;                       add #2, t1
     512              ;                       mov t0, sp
     513              ;                       mov t1, ssp
     514              ;                       popboth XAR3
     515              ;                       add #2, t0
     516              ;                       add #2, t1
     517              ;                       mov t0, sp
     518              ;                       mov t1, ssp
     519              ;                       popboth XAR2
     520              ;                       add #2, t0
     521              ;                       add #2, t1
     522              ;                       mov t0, sp
     523              ;                       mov t1, ssp
     524              ;                       popboth XAR1
     525              ;                       add #2, t0
     526              ;                       add #2, t1
     527              ;                       mov t0, sp
     528              ;                       mov t1, ssp
     529              ;                       popboth XAR0
     530              ;                       add #2, t0
     531              ;                       add #2, t1
     532              ;                       mov t0, sp
     533              ;                       mov t1, ssp
     534              ;                       EDIS
     535              ;                       NASP    ; Un-align stack pointer
     536              ;;                      pop mmap(ST3_55)
     537              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     538              ;            BCC $2,TC1 ; |216|
     539                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
     540                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
     541              ;                       B $3
     542              ;$2
     543              ;            MOV #0, *(#_first_flag) ; |217|
     544              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     545              ;                       mov dbl (*(#_first_save_xssp)), xssp
     546              ;$3
     547              ;                       aadd #-3, sp
     548                                      bclr INTM               ; enable interrupts
     549              ;                       aadd #1, sp
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   11

     550                                      RETI
     551              ;                       mov #1860h, ssp
     552                                      nop
     553                                      nop
     554              ;                       nop
     555                                      .endm
     556              ; /*-----------------------------------------------------------*/
     557              
     558              ; /*
     559              ; * The RTOS tick ISR.
     560              ; *
     561              ; * If the cooperative scheduler is in use this simply increments the tick
     562              ; * count.
     563              ; *
     564              ; * If the preemptive scheduler is in use a context switch can also occur.
     565              ; */
     566              
     567              
     568 000000       _xPortStartScheduler:
     569              
     570              ;                /* Setup the hardware to generate the tick.  Interrupts are disabled
     571              ;                when this function is called. */
     572 000000 4EFF                 aadd #-1, sp
     573 000002 6C00                 call    #_prvSetupTimerInterrupt
         000004 0000!
     574              
     575              ;                /* Restore the context of the first task that is going to run. */
     576              
     577              ;;              INTR INT14      ; force interrupt - just for debug purposes.
     578              
     579              ;;            psh mmap(ST3_55)
     580 000006 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000008 F500 
         00000a 0000!
     581 00000c EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save xar6 
         00000e E500 
         000010 0000!
     582              
     583 000012 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000014 FF00 
         000016 0000!
     584              ; does this *always* work?
     585 000018 EDE1                          mov dbl (*ar7), xar6
         00001a EF   
     586              ;                       mov xsp, dbl (*(#_first_save_xsp))              ; (init) xsp contains our TCB now
     587 00001b EB31                          mov xsp, dbl (*(#_save_xsp))            ; (init) xsp contains our TCB now
         00001d 4500 
         00001f 0000!
     588 000021 EDE3                          mov dbl (*ar7+), xar6
         000023 EF   
     589              ;                       mov xssp, dbl (*(#_first_save_xssp))
     590 000024 EB31                          mov xssp, dbl (*(#_save_xssp))
         000026 5500 
         000028 0000!
     591              ;                       mov #1, *(#_first_flag)
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   12

     592              
     593              ; what about xssp here?
     594 00002a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00002c FF00 
         00002e 0000!
     595 000030 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000032 EF00 
         000034 0000!
     596 000036 4E01                          aadd #1, sp
     597 ****** MACRO             portRESTORE_CONTEXT
     597                                      .C54CM_off
     597              ;                       .CPL_off
     597                                      .ARMS_off
     597                                      .align 4
     597              
     597              ; Restore context & return
     597                                      ;CONTEXT_RESTORE
     597              ;                       ASP
     597              ;                       EALLOW
     597              ;                       nop
     597              ;                       nop
     597              ;                       nop
     597              ;                       nop
     597 000038 4652                          bclr C54CM    
     597              ;               xssp = dbl(*(#_pxCurrentTCB))
     597              ;               xsp  = dbl(*(#_pxCurrentTCB))
     597 00003a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00003c F500 
         00003e 0000!
     597              
     597 000040 4EFD                          aadd #-3, sp
     597              ;            aadd #-3, xsp
     597              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     597              ;            BCC $1,TC1 ; |216|
     597 000042 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         000044 4F00 
         000046 0000!
     597 000048 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         00004a 5F00 
         00004c 0000!
     597              ;            B $4
     597              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     597              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     597              
     597              ;                       aadd #-3, sp
     597              ;$1
     597              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     597              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     597              ;$4
     597 00004e 904F                          mov xsp, xar7
     597 000050 905E                          mov xssp, xar6
     597              
     597 000052 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000054 DF00 
         000056 0000!
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   13

     597              
     597 000058 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00005a CF   
     597 00005b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00005d BF00 
         00005f 02   
     597                                      
     597 000060 AA81                          mov *ar4, ar2
     597 000062 A961                          mov *ar3, ar1
     597              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     597 000064 CAE1                          mov ar2, *ar7
     597 000066 C9C1                          mov ar1, *ar6
     597              
     597              
     597              ;                       mov #0, ssp     
     597              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     597              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     597                                      ; 32-bit mode - will act on SP and SSP:
     597              ;                       'fix-up' current SP and SSP - is this dangerous????
     597              ;                       aadd #-3, sp
     597              ;;                      mov *ar7, *sp
     597              ;                       mov dbl (*ar7), ar6
     597              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     597              ;                       mov *ar7(#2), *ssp                      
     597              ;                       POP mmap(ST3_55)
     597              ;                       pshboth xar7                            ; should increment both
     597 000068 AF06                          mov mmap(ST1_55), ar7
         00006a 98   
     597 00006b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00006d FFFF 
     597 00006f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     597 000071 AF96                          mov mmap(ST2_55), ar7
         000073 98   
     597 000074 CF04                          mov ar7, *sp(#2)
     597              
     597 000076 449F                          mov ssp, ar7
     597 000078 AE04                          mov mmap(ST0_55), ar6
         00007a 98   
     597 00007b CEED                          mov ar6, *ar7(#2)
         00007d 0002 
     597              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     597              ;;                      mov ar6, *ar7(#1)
     597              
     597 00007f ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000081 FF00 
         000083 0000!
     597              
     597 000085 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000087 4F   
     597 000088 EDED                          mov dbl (*ar7(#2)), xssp                        
         00008a 5F00 
         00008c 02   
     597              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     597              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     597                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   14

     597                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     597                                      mov xar6, dbl (*(#_save_xar6))
     597              
     597              ;; this is for debug
     597                                      mov dbl(*ar7), xar6
     597                                      mov dbl(*ar6), xar7
     597                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     597                                      mov xssp, xar7
     597                                      mov dbl(*ar7), xar6
     597                                      mov dbl(*ar6), xar7
     597                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     597                                      mov xssp, xar7
     597                                      add #-2, ar7
     597                                      mov dbl(*ar7), xar6
     597                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     597                                      mov dbl (*(#_save_xar6)), xar6
     597                                      
     597                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     597                                      .endif
     597              
     597              ;                       mov mmap(ST0_55), *ssp(#1)
     597              ;                       mov mmap(STO_55), *ssp(#2)
     597              ;                       mov mmap(ST1_55), *sp(#1)
     597              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     597              ;                       mov *ar7, t0
     597              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     597              ;                       mov *ar7(#2), t0
     597              ;                       mov t0, *ssp(#0)                        
     597              
     597              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     597              ; what about xssp?
     597              ;                       mov xar6, xsp
     597              ;                       mov xssp, xar7
     597              ;                       add #1, ar7
     597              ;                       mov xar7, xsp
     597              ;                       mov sp, t0
     597              ;                       mov ssp, t1
     597              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     597              ;                       ar0 = *ar6
     597              ;                       xssp = xar0
     597              ;                       mov *xar6, xar0
     597              ;                       mov xar0, xssp  ; stack now points to our TCB
     597              ;;                      mov sp, *ar6
     597              ;;                      mov sp, ar0
     597              ;;                      mov sp, *_pxCurrentTCB
     597              ;;                      clr ar0
     597              ;;                      mov ar0, @xar6
     597              ;;                      mov sp, AR0
     597              ;;                      add sp, xar6
     597              
     597              ;;                      pshboth xar7
     597              ;;                      pshboth xar6
     597              ;;                      pshboth xar5
     597              
     597              ;;                      popboth xar5
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   15

     597              ;;                      popboth xar6
     597              ;;                      popboth xar7
     597              
     597              ;;;                     mov *sp(#1), ar7 
     597              ;                       mov dbl(*sp(#1)), ar7
     597              ;;;                     mov  ar7, mmap(ST1_55)
     597 00008d AF04                          mov *sp(#2), ar7
     597 00008f CF96                          mov ar7, mmap(ST2_55)
         000091 98   
     597 000092 449F                          mov ssp, ar7
     597 000094 AEED                          mov *ar7(#2), ar6
         000096 0002 
     597 000098 CE04                          mov ar6, mmap(ST0_55)
         00009a 98   
     597              ;                       mov *ar7(#2), ar6
     597              ;                       mov ar6, *ssp(#2)
     597              ;                       mov *ssp(#2), ar7
     597              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     597              
     597 00009b ED08                          mov dbl(*sp(#4)), xar7
         00009d FF   
     597              ;                       mov *sp(#1), ar7
     597 00009e EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0000a0 F500 
         0000a2 0000!
     597              
     597 0000a4 ED0C                          mov dbl(*sp(#6)), xar6
         0000a6 EF   
     597              ;                       mov *sp(#3), ar6
     597              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     597 0000a7 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0000a9 E500 
         0000ab 0000!
     597              
     597              ;                       POP XT
     597                              ;-- Comment these to save cycles ---
     597 0000ad ED10                          mov dbl(*sp(#8)), xar7
         0000af FF   
     597 0000b0 AF0E                          mov *sp(#7), ar7
     597              ;                       mov *sp(#5), ar7
     597              ;                       mov dbl(*sp(#0)), hi(ar7)
     597              ;                       mov (*sp(#0)), lo(ar7)
     597 0000b2 ED14                          mov dbl(*sp(#10)), xar6
         0000b4 EF   
     597 0000b5 AE12                          mov *sp(#9), ar6
     597 0000b7 ED18                          mov dbl(*sp(#12)), xar5
         0000b9 DF   
     597 0000ba AD16                          mov *sp(#11), ar5
     597              ;; pvPararmeters currently here - needs to be verified --- jcw
     597 0000bc ED1C                          mov dbl(*sp(#14)), xar4
         0000be CF   
     597 0000bf AC1A                          mov *sp(#13), ar4
     597 0000c1 ED20                          mov dbl(*sp(#16)), xar3
         0000c3 BF   
     597 0000c4 AB1E                          mov *sp(#15), ar3
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   16

     597 0000c6 ED24                          mov dbl(*sp(#18)), xar2
         0000c8 AF   
     597 0000c9 AA22                          mov *sp(#17), ar2
     597 0000cb ED28                          mov dbl(*sp(#20)), xar1
         0000cd 9F   
     597 0000ce A926                          mov *sp(#19), ar1
     597 0000d0 ED2C                          mov dbl(*sp(#22)), xar0
         0000d2 8F   
     597 0000d3 A82A                          mov *sp(#21), ar0
     597              
     597 0000d5 A72E                          mov *sp(#23), t3
     597 0000d7 A630                          mov *sp(#24), t2
     597 0000d9 A532                          mov *sp(#25), t1
     597 0000db A434                          mov *sp(#26), t0
     597              
     597              ;                       mov dbl(*sp(#21)), *xssp(#0)
     597              ;                       mov *sp(#21), *ssp
     597              ;                       mov *sp(#21), RETA
     597              ; need to move 23-16 to XSSP contents
     597              ;                       mov xar0, dbl (*(#_save_xar7))
     597              ;                       mov ssp, ar0
     597              ;                       mov #0, ssp 
     597              ;                       mov xssp, xar0
     597              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     597              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     597                      ;               add #1, xssp            ; 32-bit return address pointer
     597                      ;               amar *xssp+
     597              ;                       mov sp, t0
     597              ;                       add #1, t0
     597              ;                       mov t0, ssp
     597              ;                       incr ssp
     597              ;                       asub #20, ar0
     597              ;                       mov xar0, xssp
     597              ;                       mov ar0, ssp
     597              ;                       mov ar0, 
     597              ;;                      mov *sp(#1), t0
     597              ;;                      mov *sp(#3), t3         ; ST0
     597              ;;                      mov *sp(#4), t2         ; DBSTAT
     597              ;;                      mov t3, *ar0(#2)
     597                      ;;              mov t2, *ar0(#1)
     597              ;;                      mov t0, *ar0(#0)
     597              
     597              ;;                      mov *sp(#5), t0
     597              ;;                      mov *sp(#6), t1
     597              ;;                      mov *sp(#7), t2
     597                      ;;              mov *sp(#8), t3
     597              
     597              
     597              
     597              ; restore ar0
     597              ;                       mov dbl(*sp(#-2)), xar0
     597              ;                       mov #-1, ar0
     597              ;;                      mov dbl (*(#_save_xar7)), xar0
     597              ;;
     597              ;;                      mov sp, t0
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   17

     597              ;;                      add #1, t0
     597              ;;                      mov t0, ssp
     597              
     597              ;                       mov *sp(#3), *(#00004ch+#1)
     597              
     597              ;                       mov t3, *ssp(#1) 
     597              ;                       mov t2, *ssp(#2)
     597              
     597              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     597              ;;                      mov t3, *(ssp(#0))
     597              ;                       mov t3, *ssp
     597              ;                       mov *sp(#3), t3 ; 
     597              ;                       mov t3, *ssp(#1)
     597              ;;                      mov *sp(#21), PC        
     597              
     597              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     597              ;                       mov dbl(xsp), dbl(lcrpc)
     597              ;                       popboth XAR7
     597              ;                       add #1, sp
     597              ;                       add #1, ssp
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
     597              ;                       popboth XAR6
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
     597              ;                       popboth XAR5
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
     597                              ;-----------------------------------
     597              ;                       popboth XAR4
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
     597              ;                       popboth XAR3
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
     597              ;                       popboth XAR2
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
     597              ;                       popboth XAR1
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   18

     597              ;                       popboth XAR0
     597              ;                       add #2, t0
     597              ;                       add #2, t1
     597              ;                       mov t0, sp
     597              ;                       mov t1, ssp
     597              ;                       EDIS
     597              ;                       NASP    ; Un-align stack pointer
     597              ;;                      pop mmap(ST3_55)
     597              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     597              ;            BCC $2,TC1 ; |216|
     597 0000dd ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         0000df 4F00 
         0000e1 0000!
     597 0000e3 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         0000e5 5F00 
         0000e7 0000!
     597              ;                       B $3
     597              ;$2
     597              ;            MOV #0, *(#_first_flag) ; |217|
     597              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     597              ;                       mov dbl (*(#_first_save_xssp)), xssp
     597              ;$3
     597              ;                       aadd #-3, sp
     597 0000e9 46B2                          bclr INTM               ; enable interrupts
     597              ;                       aadd #1, sp
     597 0000eb 4805                          RETI
     597              ;                       mov #1860h, ssp
     597 0000ed 20                            nop
     597 0000ee 20                            nop
     597              ;                       nop
     598              
     599              
     600 0000ef       _vTickISR:              ; the timer ISR is aggregated for this processor architecture
     601               ;               bclr IFR0.IF4          ; enable interrupts
     602                              
     603 0000ef 4EFF                  aadd #-1, sp
     604 0000f1 E651                  MOV #0, *port(#6166) ; |119|
         0000f3 0018 
         0000f5 16   
     605 0000f6 F402                  AND #0x0010, mmap(@IFR0)
         0000f8 0010 
         0000fa 98   
     606 0000fb 46B3                  bset INTM
     607              ;           MOV *port(#7188), AR1 ; |68|                ;; TIMER0 is only timer that is active
     608              ;        BSET @#0, AR1 ; |68|
     609              ;        BCC $1,AR1 == #0 ; |68|
     610              ;        AND #0x0010, *(#1)
     611                          .if configDEBUG_NEW_PX == 1
     612                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     613                                      mov xar6, dbl (*(#_save_xar6))                  ; save x
     614                                      .endif
     615              ;               bset INTM               ; disable interrupts
     616                              .if configUSE_TICK_CTR == 1
     617 0000fd F731                  add #1, *(#_tickIRQctr)
         0000ff 0001 
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   19

         000101 0000 
         000103 00!  
     618                              .endif
     619                                      .if configDEBUG_NEW_PX == 1
     620                                  mov dbl(*sp(#0)), xar7
     621                                  mov xar7, dbl(*(#_save_new_pxcode))
     622                                      mov ssp, ar6
     623                                      mov *(ar6), ar7
     624                                      mov xar7, dbl(*(#_save_new_pxlcode))
     625              
     626                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     627                                      mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
     628                                  .endif
     629              ;;              psh mmap(ST3_55)
     630 ****** MACRO         portSAVE_CONTEXT
     630              ;                       ;CONTEXT_SAVE
     630              ;                       ASP  ; Align Stack Pointer
     630              ;                       CLRC       OVM,PAGE0
     630              ;                       CLRC       AMODE
     630              ;                       EALLOW
     630              
     630 000104 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     630              
     630 000106 46B3                          bset INTM               ; disable interrupts
     630              
     630              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     630              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     630                                      
     630              ;                       pshboth xar7
     630              ;                       pshboth xar6
     630              ;                       pshboth xar5
     630                          .if configDEBUG_NEW_PX_S == 1
     630                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     630                                      mov xar6, dbl (*(#_save_xar6))                  ; save x
     630                                      .endif
     630              
     630                                      .if configDEBUG_NEW_PX_S == 1
     630                                  mov dbl(*sp(#0)), xar7
     630                                  mov xar7, dbl(*(#_save_new_pxcode))
     630                                      mov ssp, ar6
     630                                      mov *(ar6), ar7
     630                                      mov xar7, dbl(*(#_save_new_pxlcode))
     630              
     630                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     630                                      mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
     630                                  .endif
     630              
     630 000108 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         00010a F500 
         00010c 0000!
     630                                      .if configUSE_CONTEXT_DEBUG == 1
     630                                      mov xar6, dbl (*(#_save_xar6))
     630                                      .endif
     630              
     630 00010e ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   20

         000110 FF00 
         000112 0000!
     630              ; does this *always* work?
     630 000114 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000116 4F   
     630 000117 EDED                          mov dbl (*ar7(#2)), xssp                        
         000119 5F00 
         00011b 02   
     630              ;; what about xssp here?
     630              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     630              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     630                                 .if configUSE_CONTEXT_DEBUG == 1
     630              ;; save current PC (and possible loop bits values)
     630              ;; for debug - to see if this is being corrupted
     630                                      mov dbl(*ar7), xar6
     630                                      mov dbl(*ar6), xar7
     630                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
     630                                      mov xssp, xar7
     630                                      mov dbl(*ar7), xar6
     630                                      mov dbl(*ar6), xar7
     630                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
     630                                      mov xssp, xar7
     630                                      add #-2, ar7
     630                                      mov dbl(*ar7), xar6
     630                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
     630                          mov dbl (*(#_save_xar6)), xar6
     630              
     630              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     630              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     630              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     630                                      .endif
     630              
     630 00011c ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00011e FF00 
         000120 0000!
     630              
     630 000122 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         000124 F5   
     630 000125 CF0E                          mov ar7, *sp(#7)
     630              
     630 000127 EB14                          mov xar6, dbl(*sp(#10))
         000129 E5   
     630 00012a CE12                          mov ar6, *sp(#9)
     630              
     630 00012c EB18                          mov xar5, dbl(*sp(#12))
         00012e D5   
     630 00012f CD16                          mov ar5, *sp(#11)
     630              
     630 000131 EB1C                          mov xar4, dbl(*sp(#14))
         000133 C5   
     630 000134 CC1A                          mov ar4, *sp(#13)
     630              
     630 000136 EB20                          mov xar3, dbl(*sp(#16))
         000138 B5   
     630 000139 CB1E                          mov ar3, *sp(#15)
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   21

     630              
     630 00013b EB24                          mov xar2, dbl(*sp(#18))
         00013d A5   
     630 00013e CA22                          mov ar2, *sp(#17)
     630              
     630 000140 EB28                          mov xar1, dbl(*sp(#20))
         000142 95   
     630 000143 C926                          mov ar1, *sp(#19)
     630              
     630 000145 EB2C                          mov xar0, dbl(*sp(#22))
         000147 85   
     630 000148 C82A                          mov ar0, *sp(#21)
     630              
     630 00014a C72E                          mov t3, *sp(#23)
     630 00014c C630                          mov t2, *sp(#24)
     630 00014e C532                          mov t1, *sp(#25)
     630 000150 C434                          mov t0, *sp(#26)
     630              
     630              ;;                      mov mmap(ST0_55), t0
     630              ; - this is ok - we are not pushing - it's a relative stack frame
     630              ;                       mov t0, *sp(#25)
     630              ;;                      mov t0, *sp(#23)
     630              ;;                      mov mmap(ST1_55), t1
     630              ;                       mov t1, *sp(#26)                ; stomping on own mem
     630              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     630              ;;                      mov mmap(ST2_55), t2
     630              ;;                      mov t2, *sp(#22)
     630              ;                       mov t2, *sp(#27)
     630              ;;                      mov mmap(ST2_55), t3
     630              ;                       mov t3, *sp(#28)
     630              ;;                      mov t3, *sp(#24)
     630              
     630              ;                       PSH dbl(AR0) ; 32-bit
     630              ;                       PSH dbl(AR1) 
     630              ;                       PSH dbl(AR2) ; 32-bit
     630              ;                       PUSH XAR3 ; 32-bit
     630              ;                       PUSH XAR4 ; 32-bit
     630                              ;-- Comment these to save cycles --------
     630              ;                       PUSH XAR5 ; 32-bit
     630              ;                       PUSH XAR6 ; 32-bit
     630              ;                       PUSH XAR7 ; 32-bit
     630                              ;----------------------------------------
     630              
     630              ;                       PUSH XT   ; 32-bit
     630              
     630              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     630              ;                       push xar6 ; portFLAGS_INT_ENABLED
     630              
     630 000152 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         000154 EF00 
         000156 0000!
     630 000158 EB0C                          mov xar6, dbl(*sp(#6))
         00015a E5   
     630                                      
     630              
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   22

     630              ;                       movl xar7, @_usCriticalNesting
     630              ;                       push xar7
     630 00015b ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         00015d FF00 
         00015f 0000!
     630 000161 EB08                          mov xar7, dbl(*sp(#4))
         000163 F5   
     630              
     630 000164 AF06                          mov mmap(ST1_55), ar7
         000166 98   
     630 000167 CF02                          mov ar7, *sp(#1)
     630 000169 AF96                          mov  mmap(ST2_55), ar7
         00016b 98   
     630 00016c CF04                          mov ar7, *sp(#2)
     630              
     630 00016e 449F                          mov ssp, ar7
     630 000170 AE04                          mov mmap(ST0_55), ar6
         000172 98   
     630 000173 CEED                          mov ar6, *ar7(#2)
         000175 0002 
     630              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     630              ;;;                     mov ar6, *ar7(#2)
     630              ;                       mov ar7, mmap(ST0_55)
     630              ;                       mov *ssp(#2), ar7
     630              
     630              ; fix up
     630              ;                       aadd #20, sp
     630              ;                       mov sp, t0
     630              ;                       sub #1, t0
     630              ;                       mov t0, ssp
     630              
     630                                      ; move contents of SP into address of current TCB
     630              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     630              
     630              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     630              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     630              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     630              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     630              ;                       mov dbl (*ar7+), xssp
     630              
     630              ;                       mov sp, t0              ; we've already saved t0
     630              ;                       add #1, t0
     630              ;                       mov t0, ssp
     630              ; ??
     630              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     630              
     630              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     630              ;                       mov al, @sp
     630              ;                       movl  *xar6, acc        
     630              ;;                      mov  ar0, @sp
     630              ;;                      mov  @ar6, alxd
     630              ;;                      mov  ar0, @sp
     630              ;;                      movl 0(xar6), sp
     630              ;                       EDIS
     630              ;                       NASP
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   23

     630              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     630              ;                       NOP
     630 000177 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
         000179 4F00 
         00017b 0000!
     630 00017d ED31                  mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00017f 5F00 
         000181 0000!
     630 000183 20                            nop
     630 000184 20                            nop
     630 000185 20                            nop
     631              
     632 000186 6C00          call     #_xTaskIncrementTick
         000188 0000!
     633              
     634                      .if configUSE_PREEMPTION == 1
     635              ;        mov xsp, dbl (*(#_save_xsp))                   ; save xsp
     636              ;           mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     637 00018a 6C00          call    #_vTaskSwitchContext
         00018c 0000!
     638                      .endif
     639              ;$1:
     640              ;               bclr INTM
     641 00018e E651                  mov #1, *port(#6166) ; |127|
         000190 0118 
         000192 16   
     642              ;               MOV #0, *port(#6294) ; |92|
     643 000193 F551                  or #0x0001, *port(#7188) ; |130|
         000195 0001 
         000197 1C14 
     644               ;       OR #0x0007, *port(#7188) ; |100|
     645 000199 4E01                  aadd #1, sp
     646 ****** MACRO         portRESTORE_CONTEXT
     646                                      .C54CM_off
     646              ;                       .CPL_off
     646                                      .ARMS_off
     646                                      .align 4
     646              
     646              ; Restore context & return
     646                                      ;CONTEXT_RESTORE
     646              ;                       ASP
     646              ;                       EALLOW
     646              ;                       nop
     646              ;                       nop
     646              ;                       nop
     646              ;                       nop
     646 00019c 4652                          bclr C54CM    
     646              ;               xssp = dbl(*(#_pxCurrentTCB))
     646              ;               xsp  = dbl(*(#_pxCurrentTCB))
     646 00019e EB31                          mov xar7, dbl (*(#_save_xar7))  
         0001a0 F500 
         0001a2 0000!
     646              
     646 0001a4 4EFD                          aadd #-3, sp
     646              ;            aadd #-3, xsp
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   24

     646              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     646              ;            BCC $1,TC1 ; |216|
     646 0001a6 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         0001a8 4F00 
         0001aa 0000!
     646 0001ac ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         0001ae 5F00 
         0001b0 0000!
     646              ;            B $4
     646              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     646              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     646              
     646              ;                       aadd #-3, sp
     646              ;$1
     646              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     646              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     646              ;$4
     646 0001b2 904F                          mov xsp, xar7
     646 0001b4 905E                          mov xssp, xar6
     646              
     646 0001b6 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         0001b8 DF00 
         0001ba 0000!
     646              
     646 0001bc EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         0001be CF   
     646 0001bf EDAD                          mov dbl (*ar5(#2)), xar3                        
         0001c1 BF00 
         0001c3 02   
     646                                      
     646 0001c4 AA81                          mov *ar4, ar2
     646 0001c6 A961                          mov *ar3, ar1
     646              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     646 0001c8 CAE1                          mov ar2, *ar7
     646 0001ca C9C1                          mov ar1, *ar6
     646              
     646              
     646              ;                       mov #0, ssp     
     646              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     646              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     646                                      ; 32-bit mode - will act on SP and SSP:
     646              ;                       'fix-up' current SP and SSP - is this dangerous????
     646              ;                       aadd #-3, sp
     646              ;;                      mov *ar7, *sp
     646              ;                       mov dbl (*ar7), ar6
     646              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     646              ;                       mov *ar7(#2), *ssp                      
     646              ;                       POP mmap(ST3_55)
     646              ;                       pshboth xar7                            ; should increment both
     646 0001cc AF06                          mov mmap(ST1_55), ar7
         0001ce 98   
     646 0001cf 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         0001d1 FFFF 
     646 0001d3 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     646 0001d5 AF96                          mov mmap(ST2_55), ar7
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   25

         0001d7 98   
     646 0001d8 CF04                          mov ar7, *sp(#2)
     646              
     646 0001da 449F                          mov ssp, ar7
     646 0001dc AE04                          mov mmap(ST0_55), ar6
         0001de 98   
     646 0001df CEED                          mov ar6, *ar7(#2)
         0001e1 0002 
     646              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     646              ;;                      mov ar6, *ar7(#1)
     646              
     646 0001e3 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         0001e5 FF00 
         0001e7 0000!
     646              
     646 0001e9 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         0001eb 4F   
     646 0001ec EDED                          mov dbl (*ar7(#2)), xssp                        
         0001ee 5F00 
         0001f0 02   
     646              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     646              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     646                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     646                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     646                                      mov xar6, dbl (*(#_save_xar6))
     646              
     646              ;; this is for debug
     646                                      mov dbl(*ar7), xar6
     646                                      mov dbl(*ar6), xar7
     646                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     646                                      mov xssp, xar7
     646                                      mov dbl(*ar7), xar6
     646                                      mov dbl(*ar6), xar7
     646                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     646                                      mov xssp, xar7
     646                                      add #-2, ar7
     646                                      mov dbl(*ar7), xar6
     646                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     646                                      mov dbl (*(#_save_xar6)), xar6
     646                                      
     646                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     646                                      .endif
     646              
     646              ;                       mov mmap(ST0_55), *ssp(#1)
     646              ;                       mov mmap(STO_55), *ssp(#2)
     646              ;                       mov mmap(ST1_55), *sp(#1)
     646              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     646              ;                       mov *ar7, t0
     646              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     646              ;                       mov *ar7(#2), t0
     646              ;                       mov t0, *ssp(#0)                        
     646              
     646              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     646              ; what about xssp?
     646              ;                       mov xar6, xsp
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   26

     646              ;                       mov xssp, xar7
     646              ;                       add #1, ar7
     646              ;                       mov xar7, xsp
     646              ;                       mov sp, t0
     646              ;                       mov ssp, t1
     646              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     646              ;                       ar0 = *ar6
     646              ;                       xssp = xar0
     646              ;                       mov *xar6, xar0
     646              ;                       mov xar0, xssp  ; stack now points to our TCB
     646              ;;                      mov sp, *ar6
     646              ;;                      mov sp, ar0
     646              ;;                      mov sp, *_pxCurrentTCB
     646              ;;                      clr ar0
     646              ;;                      mov ar0, @xar6
     646              ;;                      mov sp, AR0
     646              ;;                      add sp, xar6
     646              
     646              ;;                      pshboth xar7
     646              ;;                      pshboth xar6
     646              ;;                      pshboth xar5
     646              
     646              ;;                      popboth xar5
     646              ;;                      popboth xar6
     646              ;;                      popboth xar7
     646              
     646              ;;;                     mov *sp(#1), ar7 
     646              ;                       mov dbl(*sp(#1)), ar7
     646              ;;;                     mov  ar7, mmap(ST1_55)
     646 0001f1 AF04                          mov *sp(#2), ar7
     646 0001f3 CF96                          mov ar7, mmap(ST2_55)
         0001f5 98   
     646 0001f6 449F                          mov ssp, ar7
     646 0001f8 AEED                          mov *ar7(#2), ar6
         0001fa 0002 
     646 0001fc CE04                          mov ar6, mmap(ST0_55)
         0001fe 98   
     646              ;                       mov *ar7(#2), ar6
     646              ;                       mov ar6, *ssp(#2)
     646              ;                       mov *ssp(#2), ar7
     646              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     646              
     646 0001ff ED08                          mov dbl(*sp(#4)), xar7
         000201 FF   
     646              ;                       mov *sp(#1), ar7
     646 000202 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000204 F500 
         000206 0000!
     646              
     646 000208 ED0C                          mov dbl(*sp(#6)), xar6
         00020a EF   
     646              ;                       mov *sp(#3), ar6
     646              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     646 00020b EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         00020d E500 
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   27

         00020f 0000!
     646              
     646              ;                       POP XT
     646                              ;-- Comment these to save cycles ---
     646 000211 ED10                          mov dbl(*sp(#8)), xar7
         000213 FF   
     646 000214 AF0E                          mov *sp(#7), ar7
     646              ;                       mov *sp(#5), ar7
     646              ;                       mov dbl(*sp(#0)), hi(ar7)
     646              ;                       mov (*sp(#0)), lo(ar7)
     646 000216 ED14                          mov dbl(*sp(#10)), xar6
         000218 EF   
     646 000219 AE12                          mov *sp(#9), ar6
     646 00021b ED18                          mov dbl(*sp(#12)), xar5
         00021d DF   
     646 00021e AD16                          mov *sp(#11), ar5
     646              ;; pvPararmeters currently here - needs to be verified --- jcw
     646 000220 ED1C                          mov dbl(*sp(#14)), xar4
         000222 CF   
     646 000223 AC1A                          mov *sp(#13), ar4
     646 000225 ED20                          mov dbl(*sp(#16)), xar3
         000227 BF   
     646 000228 AB1E                          mov *sp(#15), ar3
     646 00022a ED24                          mov dbl(*sp(#18)), xar2
         00022c AF   
     646 00022d AA22                          mov *sp(#17), ar2
     646 00022f ED28                          mov dbl(*sp(#20)), xar1
         000231 9F   
     646 000232 A926                          mov *sp(#19), ar1
     646 000234 ED2C                          mov dbl(*sp(#22)), xar0
         000236 8F   
     646 000237 A82A                          mov *sp(#21), ar0
     646              
     646 000239 A72E                          mov *sp(#23), t3
     646 00023b A630                          mov *sp(#24), t2
     646 00023d A532                          mov *sp(#25), t1
     646 00023f A434                          mov *sp(#26), t0
     646              
     646              ;                       mov dbl(*sp(#21)), *xssp(#0)
     646              ;                       mov *sp(#21), *ssp
     646              ;                       mov *sp(#21), RETA
     646              ; need to move 23-16 to XSSP contents
     646              ;                       mov xar0, dbl (*(#_save_xar7))
     646              ;                       mov ssp, ar0
     646              ;                       mov #0, ssp 
     646              ;                       mov xssp, xar0
     646              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     646              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     646                      ;               add #1, xssp            ; 32-bit return address pointer
     646                      ;               amar *xssp+
     646              ;                       mov sp, t0
     646              ;                       add #1, t0
     646              ;                       mov t0, ssp
     646              ;                       incr ssp
     646              ;                       asub #20, ar0
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   28

     646              ;                       mov xar0, xssp
     646              ;                       mov ar0, ssp
     646              ;                       mov ar0, 
     646              ;;                      mov *sp(#1), t0
     646              ;;                      mov *sp(#3), t3         ; ST0
     646              ;;                      mov *sp(#4), t2         ; DBSTAT
     646              ;;                      mov t3, *ar0(#2)
     646                      ;;              mov t2, *ar0(#1)
     646              ;;                      mov t0, *ar0(#0)
     646              
     646              ;;                      mov *sp(#5), t0
     646              ;;                      mov *sp(#6), t1
     646              ;;                      mov *sp(#7), t2
     646                      ;;              mov *sp(#8), t3
     646              
     646              
     646              
     646              ; restore ar0
     646              ;                       mov dbl(*sp(#-2)), xar0
     646              ;                       mov #-1, ar0
     646              ;;                      mov dbl (*(#_save_xar7)), xar0
     646              ;;
     646              ;;                      mov sp, t0
     646              ;;                      add #1, t0
     646              ;;                      mov t0, ssp
     646              
     646              ;                       mov *sp(#3), *(#00004ch+#1)
     646              
     646              ;                       mov t3, *ssp(#1) 
     646              ;                       mov t2, *ssp(#2)
     646              
     646              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     646              ;;                      mov t3, *(ssp(#0))
     646              ;                       mov t3, *ssp
     646              ;                       mov *sp(#3), t3 ; 
     646              ;                       mov t3, *ssp(#1)
     646              ;;                      mov *sp(#21), PC        
     646              
     646              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     646              ;                       mov dbl(xsp), dbl(lcrpc)
     646              ;                       popboth XAR7
     646              ;                       add #1, sp
     646              ;                       add #1, ssp
     646              ;                       add #2, t0
     646              ;                       add #2, t1
     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646              ;                       popboth XAR6
     646              ;                       add #2, t0
     646              ;                       add #2, t1
     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646              ;                       popboth XAR5
     646              ;                       add #2, t0
     646              ;                       add #2, t1
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   29

     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646                              ;-----------------------------------
     646              ;                       popboth XAR4
     646              ;                       add #2, t0
     646              ;                       add #2, t1
     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646              ;                       popboth XAR3
     646              ;                       add #2, t0
     646              ;                       add #2, t1
     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646              ;                       popboth XAR2
     646              ;                       add #2, t0
     646              ;                       add #2, t1
     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646              ;                       popboth XAR1
     646              ;                       add #2, t0
     646              ;                       add #2, t1
     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646              ;                       popboth XAR0
     646              ;                       add #2, t0
     646              ;                       add #2, t1
     646              ;                       mov t0, sp
     646              ;                       mov t1, ssp
     646              ;                       EDIS
     646              ;                       NASP    ; Un-align stack pointer
     646              ;;                      pop mmap(ST3_55)
     646              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     646              ;            BCC $2,TC1 ; |216|
     646 000241 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         000243 4F00 
         000245 0000!
     646 000247 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         000249 5F00 
         00024b 0000!
     646              ;                       B $3
     646              ;$2
     646              ;            MOV #0, *(#_first_flag) ; |217|
     646              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     646              ;                       mov dbl (*(#_first_save_xssp)), xssp
     646              ;$3
     646              ;                       aadd #-3, sp
     646 00024d 46B2                          bclr INTM               ; enable interrupts
     646              ;                       aadd #1, sp
     646 00024f 4805                          RETI
     646              ;                       mov #1860h, ssp
     646 000251 20                            nop
     646 000252 20                            nop
     646              ;                       nop
     647                                              
     648              ; /*-----------------------------------------------------------*/
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   30

     649              
     650              
     651              ;/*
     652              ; * Manual context switch called by the portYIELD() macro.
     653              ; */
     654              
     655              ; We are using the slow return model:
     656              
     657              ; System Stack (SSP)                    Data Stack (SP)
     658              ; SSP = x - 3:  (Loop Bits):PC(23-16)   SP = y - 3: PC(15-0)  <<= Last pushed - first to POP
     659              ; SSP = x - 2:  DBSTAT                  SP = y - 2: ST1_55
     660              ; SSP = x - 1:  ST0_55                  SP = y - 1: ST2_55
     661              ; SSP = x:      Previously saved data   SP = y:     Previously saved data
     662              
     663              
     664 000253       _vPortYield:
     665              
     666 000253 4EFF                  aadd #-1, sp
     667 000255 F402                  AND #0x0010, mmap(@IFR0)
         000257 0010 
         000259 98   
     668              ;                /* Mimic an interrupt by pushing the SR. */
     669              
     670              ;               /* SR is 16-bits in 430X architecture */
     671              
     672              ;;                pushx.w    SR
     673              
     674              ;                /* Now the SR is stacked we can disable interrupts. */
     675              
     676              ;                dint
     677              
     678 00025a 46B3                    bset INTM             ; disable interrupts
     679              
     680              ;;                bicx.w #0xF000,0(r1)
     681              ;;                swpbx.w +4(r1)
     682              ;;                rlax.w +4(r1)
     683              ;;                rlax.w +4(r1)
     684              ;;                rlax.w +4(r1)
     685              ;;                rlax.w +4(r1)
     686              ;;                addx.w +4(r1),0(r1)
     687              ;;                movx.w +2(r1),+4(r1)
     688              ;;                movx.w 0(r1),+2(r1)
     689              ;;                incdx.a r1
     690              
     691              ;                /* Save the context of the current task. */
     692              ;;        psh mmap(ST3_55)
     693 ****** MACRO         portSAVE_CONTEXT
     693              ;                       ;CONTEXT_SAVE
     693              ;                       ASP  ; Align Stack Pointer
     693              ;                       CLRC       OVM,PAGE0
     693              ;                       CLRC       AMODE
     693              ;                       EALLOW
     693              
     693 00025c 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     693              
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   31

     693 00025e 46B3                          bset INTM               ; disable interrupts
     693              
     693              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     693              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     693                                      
     693              ;                       pshboth xar7
     693              ;                       pshboth xar6
     693              ;                       pshboth xar5
     693                          .if configDEBUG_NEW_PX_S == 1
     693                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     693                                      mov xar6, dbl (*(#_save_xar6))                  ; save x
     693                                      .endif
     693              
     693                                      .if configDEBUG_NEW_PX_S == 1
     693                                  mov dbl(*sp(#0)), xar7
     693                                  mov xar7, dbl(*(#_save_new_pxcode))
     693                                      mov ssp, ar6
     693                                      mov *(ar6), ar7
     693                                      mov xar7, dbl(*(#_save_new_pxlcode))
     693              
     693                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     693                                      mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
     693                                  .endif
     693              
     693 000260 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000262 F500 
         000264 0000!
     693                                      .if configUSE_CONTEXT_DEBUG == 1
     693                                      mov xar6, dbl (*(#_save_xar6))
     693                                      .endif
     693              
     693 000266 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000268 FF00 
         00026a 0000!
     693              ; does this *always* work?
     693 00026c EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00026e 4F   
     693 00026f EDED                          mov dbl (*ar7(#2)), xssp                        
         000271 5F00 
         000273 02   
     693              ;; what about xssp here?
     693              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     693              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     693                                 .if configUSE_CONTEXT_DEBUG == 1
     693              ;; save current PC (and possible loop bits values)
     693              ;; for debug - to see if this is being corrupted
     693                                      mov dbl(*ar7), xar6
     693                                      mov dbl(*ar6), xar7
     693                                      mov xar7, dbl (*(#_PC_REG_LOW_SAVE))            ; save off the PC
     693                                      mov xssp, xar7
     693                                      mov dbl(*ar7), xar6
     693                                      mov dbl(*ar6), xar7
     693                                      mov xar7, dbl (*(#_PC_REG_HIGH_SAVE))           ; save off the PC
     693                                      mov xssp, xar7
     693                                      add #-2, ar7
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   32

     693                                      mov dbl(*ar7), xar6
     693                                      mov xar6,  dbl (*(_DBSTAT_SAVE))
     693                          mov dbl (*(#_save_xar6)), xar6
     693              
     693              ;            mov (*ar7), (*(#_PC_REG_LOW_SAVE))
     693              ;            mov dbl(*xssp),(*(#_PC_REG_HIGH_SAVE))
     693              ;                       mov (*ssp(#-2)), (*(#_DBSTAT_SAVE))
     693                                      .endif
     693              
     693 000274 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000276 FF00 
         000278 0000!
     693              
     693 00027a EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         00027c F5   
     693 00027d CF0E                          mov ar7, *sp(#7)
     693              
     693 00027f EB14                          mov xar6, dbl(*sp(#10))
         000281 E5   
     693 000282 CE12                          mov ar6, *sp(#9)
     693              
     693 000284 EB18                          mov xar5, dbl(*sp(#12))
         000286 D5   
     693 000287 CD16                          mov ar5, *sp(#11)
     693              
     693 000289 EB1C                          mov xar4, dbl(*sp(#14))
         00028b C5   
     693 00028c CC1A                          mov ar4, *sp(#13)
     693              
     693 00028e EB20                          mov xar3, dbl(*sp(#16))
         000290 B5   
     693 000291 CB1E                          mov ar3, *sp(#15)
     693              
     693 000293 EB24                          mov xar2, dbl(*sp(#18))
         000295 A5   
     693 000296 CA22                          mov ar2, *sp(#17)
     693              
     693 000298 EB28                          mov xar1, dbl(*sp(#20))
         00029a 95   
     693 00029b C926                          mov ar1, *sp(#19)
     693              
     693 00029d EB2C                          mov xar0, dbl(*sp(#22))
         00029f 85   
     693 0002a0 C82A                          mov ar0, *sp(#21)
     693              
     693 0002a2 C72E                          mov t3, *sp(#23)
     693 0002a4 C630                          mov t2, *sp(#24)
     693 0002a6 C532                          mov t1, *sp(#25)
     693 0002a8 C434                          mov t0, *sp(#26)
     693              
     693              ;;                      mov mmap(ST0_55), t0
     693              ; - this is ok - we are not pushing - it's a relative stack frame
     693              ;                       mov t0, *sp(#25)
     693              ;;                      mov t0, *sp(#23)
     693              ;;                      mov mmap(ST1_55), t1
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   33

     693              ;                       mov t1, *sp(#26)                ; stomping on own mem
     693              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     693              ;;                      mov mmap(ST2_55), t2
     693              ;;                      mov t2, *sp(#22)
     693              ;                       mov t2, *sp(#27)
     693              ;;                      mov mmap(ST2_55), t3
     693              ;                       mov t3, *sp(#28)
     693              ;;                      mov t3, *sp(#24)
     693              
     693              ;                       PSH dbl(AR0) ; 32-bit
     693              ;                       PSH dbl(AR1) 
     693              ;                       PSH dbl(AR2) ; 32-bit
     693              ;                       PUSH XAR3 ; 32-bit
     693              ;                       PUSH XAR4 ; 32-bit
     693                              ;-- Comment these to save cycles --------
     693              ;                       PUSH XAR5 ; 32-bit
     693              ;                       PUSH XAR6 ; 32-bit
     693              ;                       PUSH XAR7 ; 32-bit
     693                              ;----------------------------------------
     693              
     693              ;                       PUSH XT   ; 32-bit
     693              
     693              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     693              ;                       push xar6 ; portFLAGS_INT_ENABLED
     693              
     693 0002aa ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0002ac EF00 
         0002ae 0000!
     693 0002b0 EB0C                          mov xar6, dbl(*sp(#6))
         0002b2 E5   
     693                                      
     693              
     693              ;                       movl xar7, @_usCriticalNesting
     693              ;                       push xar7
     693 0002b3 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0002b5 FF00 
         0002b7 0000!
     693 0002b9 EB08                          mov xar7, dbl(*sp(#4))
         0002bb F5   
     693              
     693 0002bc AF06                          mov mmap(ST1_55), ar7
         0002be 98   
     693 0002bf CF02                          mov ar7, *sp(#1)
     693 0002c1 AF96                          mov  mmap(ST2_55), ar7
         0002c3 98   
     693 0002c4 CF04                          mov ar7, *sp(#2)
     693              
     693 0002c6 449F                          mov ssp, ar7
     693 0002c8 AE04                          mov mmap(ST0_55), ar6
         0002ca 98   
     693 0002cb CEED                          mov ar6, *ar7(#2)
         0002cd 0002 
     693              ;;;                     mov  dbl (*(_DBSTAT_SAVE)), *xar7(#2)   ; needs to be DBSTAT - don't overwrite DBSTAT
     693              ;;;                     mov ar6, *ar7(#2)
     693              ;                       mov ar7, mmap(ST0_55)
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   34

     693              ;                       mov *ssp(#2), ar7
     693              
     693              ; fix up
     693              ;                       aadd #20, sp
     693              ;                       mov sp, t0
     693              ;                       sub #1, t0
     693              ;                       mov t0, ssp
     693              
     693                                      ; move contents of SP into address of current TCB
     693              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     693              
     693              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     693              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     693              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     693              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     693              ;                       mov dbl (*ar7+), xssp
     693              
     693              ;                       mov sp, t0              ; we've already saved t0
     693              ;                       add #1, t0
     693              ;                       mov t0, ssp
     693              ; ??
     693              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     693              
     693              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     693              ;                       mov al, @sp
     693              ;                       movl  *xar6, acc        
     693              ;;                      mov  ar0, @sp
     693              ;;                      mov  @ar6, alxd
     693              ;;                      mov  ar0, @sp
     693              ;;                      movl 0(xar6), sp
     693              ;                       EDIS
     693              ;                       NASP
     693              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     693              ;                       NOP
     693 0002cf ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp*
         0002d1 4F00 
         0002d3 0000!
     693 0002d5 ED31                  mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0002d7 5F00 
         0002d9 0000!
     693 0002db 20                            nop
     693 0002dc 20                            nop
     693 0002dd 20                            nop
     694              
     695              ;        /* Switch to the highest priority task that is ready to run. */
     696 0002de 6C00          call    #_vTaskSwitchContext
         0002e0 0000!
     697 0002e2 E651          mov #1, *port(#6166) ; |127|
         0002e4 0118 
         0002e6 16   
     698 0002e7 F551                  or #0x0001, *port(#7188) ; |130|
         0002e9 0001 
         0002eb 1C14 
     699 0002ed 4E01                  aadd #1, sp
     700 ****** MACRO         portRESTORE_CONTEXT
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   35

     700                                      .C54CM_off
     700              ;                       .CPL_off
     700                                      .ARMS_off
     700                                      .align 4
     700              
     700              ; Restore context & return
     700                                      ;CONTEXT_RESTORE
     700              ;                       ASP
     700              ;                       EALLOW
     700              ;                       nop
     700              ;                       nop
     700              ;                       nop
     700              ;                       nop
     700 0002f0 4652                          bclr C54CM    
     700              ;               xssp = dbl(*(#_pxCurrentTCB))
     700              ;               xsp  = dbl(*(#_pxCurrentTCB))
     700 0002f2 EB31                          mov xar7, dbl (*(#_save_xar7))  
         0002f4 F500 
         0002f6 0000!
     700              
     700 0002f8 4EFD                          aadd #-3, sp
     700              ;            aadd #-3, xsp
     700              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     700              ;            BCC $1,TC1 ; |216|
     700 0002fa ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         0002fc 4F00 
         0002fe 0000!
     700 000300 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         000302 5F00 
         000304 0000!
     700              ;            B $4
     700              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     700              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     700              
     700              ;                       aadd #-3, sp
     700              ;$1
     700              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     700              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     700              ;$4
     700 000306 904F                          mov xsp, xar7
     700 000308 905E                          mov xssp, xar6
     700              
     700 00030a ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         00030c DF00 
         00030e 0000!
     700              
     700 000310 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         000312 CF   
     700 000313 EDAD                          mov dbl (*ar5(#2)), xar3                        
         000315 BF00 
         000317 02   
     700                                      
     700 000318 AA81                          mov *ar4, ar2
     700 00031a A961                          mov *ar3, ar1
     700              ;                       mov ar4, *ar6                           ; stack pointers fixed up
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   36

     700 00031c CAE1                          mov ar2, *ar7
     700 00031e C9C1                          mov ar1, *ar6
     700              
     700              
     700              ;                       mov #0, ssp     
     700              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     700              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     700                                      ; 32-bit mode - will act on SP and SSP:
     700              ;                       'fix-up' current SP and SSP - is this dangerous????
     700              ;                       aadd #-3, sp
     700              ;;                      mov *ar7, *sp
     700              ;                       mov dbl (*ar7), ar6
     700              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     700              ;                       mov *ar7(#2), *ssp                      
     700              ;                       POP mmap(ST3_55)
     700              ;                       pshboth xar7                            ; should increment both
     700 000320 AF06                          mov mmap(ST1_55), ar7
         000322 98   
     700 000323 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         000325 FFFF 
     700 000327 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     700 000329 AF96                          mov mmap(ST2_55), ar7
         00032b 98   
     700 00032c CF04                          mov ar7, *sp(#2)
     700              
     700 00032e 449F                          mov ssp, ar7
     700 000330 AE04                          mov mmap(ST0_55), ar6
         000332 98   
     700 000333 CEED                          mov ar6, *ar7(#2)
         000335 0002 
     700              ;;                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     700              ;;                      mov ar6, *ar7(#1)
     700              
     700 000337 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000339 FF00 
         00033b 0000!
     700              
     700 00033d EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00033f 4F   
     700 000340 EDED                          mov dbl (*ar7(#2)), xssp                        
         000342 5F00 
         000344 02   
     700              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     700              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     700                                      .if configUSE_CONTEXT_RESTORE_DEBUG == 1
     700                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7
     700                                      mov xar6, dbl (*(#_save_xar6))
     700              
     700              ;; this is for debug
     700                                      mov dbl(*ar7), xar6
     700                                      mov dbl(*ar6), xar7
     700                                      mov xar7, dbl (*(#_PC_REG_LOW_RESTORE))         ; save off the PC
     700                                      mov xssp, xar7
     700                                      mov dbl(*ar7), xar6
     700                                      mov dbl(*ar6), xar7
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   37

     700                                      mov xar7, dbl (*(#_PC_REG_HIGH_RESTORE))                ; save off the PC
     700                                      mov xssp, xar7
     700                                      add #-2, ar7
     700                                      mov dbl(*ar7), xar6
     700                                      mov xar6,  dbl (*(_DBSTAT_RESTORE))
     700                                      mov dbl (*(#_save_xar6)), xar6
     700                                      
     700                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
     700                                      .endif
     700              
     700              ;                       mov mmap(ST0_55), *ssp(#1)
     700              ;                       mov mmap(STO_55), *ssp(#2)
     700              ;                       mov mmap(ST1_55), *sp(#1)
     700              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     700              ;                       mov *ar7, t0
     700              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     700              ;                       mov *ar7(#2), t0
     700              ;                       mov t0, *ssp(#0)                        
     700              
     700              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     700              ; what about xssp?
     700              ;                       mov xar6, xsp
     700              ;                       mov xssp, xar7
     700              ;                       add #1, ar7
     700              ;                       mov xar7, xsp
     700              ;                       mov sp, t0
     700              ;                       mov ssp, t1
     700              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     700              ;                       ar0 = *ar6
     700              ;                       xssp = xar0
     700              ;                       mov *xar6, xar0
     700              ;                       mov xar0, xssp  ; stack now points to our TCB
     700              ;;                      mov sp, *ar6
     700              ;;                      mov sp, ar0
     700              ;;                      mov sp, *_pxCurrentTCB
     700              ;;                      clr ar0
     700              ;;                      mov ar0, @xar6
     700              ;;                      mov sp, AR0
     700              ;;                      add sp, xar6
     700              
     700              ;;                      pshboth xar7
     700              ;;                      pshboth xar6
     700              ;;                      pshboth xar5
     700              
     700              ;;                      popboth xar5
     700              ;;                      popboth xar6
     700              ;;                      popboth xar7
     700              
     700              ;;;                     mov *sp(#1), ar7 
     700              ;                       mov dbl(*sp(#1)), ar7
     700              ;;;                     mov  ar7, mmap(ST1_55)
     700 000345 AF04                          mov *sp(#2), ar7
     700 000347 CF96                          mov ar7, mmap(ST2_55)
         000349 98   
     700 00034a 449F                          mov ssp, ar7
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   38

     700 00034c AEED                          mov *ar7(#2), ar6
         00034e 0002 
     700 000350 CE04                          mov ar6, mmap(ST0_55)
         000352 98   
     700              ;                       mov *ar7(#2), ar6
     700              ;                       mov ar6, *ssp(#2)
     700              ;                       mov *ssp(#2), ar7
     700              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     700              
     700 000353 ED08                          mov dbl(*sp(#4)), xar7
         000355 FF   
     700              ;                       mov *sp(#1), ar7
     700 000356 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000358 F500 
         00035a 0000!
     700              
     700 00035c ED0C                          mov dbl(*sp(#6)), xar6
         00035e EF   
     700              ;                       mov *sp(#3), ar6
     700              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     700 00035f EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         000361 E500 
         000363 0000!
     700              
     700              ;                       POP XT
     700                              ;-- Comment these to save cycles ---
     700 000365 ED10                          mov dbl(*sp(#8)), xar7
         000367 FF   
     700 000368 AF0E                          mov *sp(#7), ar7
     700              ;                       mov *sp(#5), ar7
     700              ;                       mov dbl(*sp(#0)), hi(ar7)
     700              ;                       mov (*sp(#0)), lo(ar7)
     700 00036a ED14                          mov dbl(*sp(#10)), xar6
         00036c EF   
     700 00036d AE12                          mov *sp(#9), ar6
     700 00036f ED18                          mov dbl(*sp(#12)), xar5
         000371 DF   
     700 000372 AD16                          mov *sp(#11), ar5
     700              ;; pvPararmeters currently here - needs to be verified --- jcw
     700 000374 ED1C                          mov dbl(*sp(#14)), xar4
         000376 CF   
     700 000377 AC1A                          mov *sp(#13), ar4
     700 000379 ED20                          mov dbl(*sp(#16)), xar3
         00037b BF   
     700 00037c AB1E                          mov *sp(#15), ar3
     700 00037e ED24                          mov dbl(*sp(#18)), xar2
         000380 AF   
     700 000381 AA22                          mov *sp(#17), ar2
     700 000383 ED28                          mov dbl(*sp(#20)), xar1
         000385 9F   
     700 000386 A926                          mov *sp(#19), ar1
     700 000388 ED2C                          mov dbl(*sp(#22)), xar0
         00038a 8F   
     700 00038b A82A                          mov *sp(#21), ar0
     700              
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   39

     700 00038d A72E                          mov *sp(#23), t3
     700 00038f A630                          mov *sp(#24), t2
     700 000391 A532                          mov *sp(#25), t1
     700 000393 A434                          mov *sp(#26), t0
     700              
     700              ;                       mov dbl(*sp(#21)), *xssp(#0)
     700              ;                       mov *sp(#21), *ssp
     700              ;                       mov *sp(#21), RETA
     700              ; need to move 23-16 to XSSP contents
     700              ;                       mov xar0, dbl (*(#_save_xar7))
     700              ;                       mov ssp, ar0
     700              ;                       mov #0, ssp 
     700              ;                       mov xssp, xar0
     700              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     700              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     700                      ;               add #1, xssp            ; 32-bit return address pointer
     700                      ;               amar *xssp+
     700              ;                       mov sp, t0
     700              ;                       add #1, t0
     700              ;                       mov t0, ssp
     700              ;                       incr ssp
     700              ;                       asub #20, ar0
     700              ;                       mov xar0, xssp
     700              ;                       mov ar0, ssp
     700              ;                       mov ar0, 
     700              ;;                      mov *sp(#1), t0
     700              ;;                      mov *sp(#3), t3         ; ST0
     700              ;;                      mov *sp(#4), t2         ; DBSTAT
     700              ;;                      mov t3, *ar0(#2)
     700                      ;;              mov t2, *ar0(#1)
     700              ;;                      mov t0, *ar0(#0)
     700              
     700              ;;                      mov *sp(#5), t0
     700              ;;                      mov *sp(#6), t1
     700              ;;                      mov *sp(#7), t2
     700                      ;;              mov *sp(#8), t3
     700              
     700              
     700              
     700              ; restore ar0
     700              ;                       mov dbl(*sp(#-2)), xar0
     700              ;                       mov #-1, ar0
     700              ;;                      mov dbl (*(#_save_xar7)), xar0
     700              ;;
     700              ;;                      mov sp, t0
     700              ;;                      add #1, t0
     700              ;;                      mov t0, ssp
     700              
     700              ;                       mov *sp(#3), *(#00004ch+#1)
     700              
     700              ;                       mov t3, *ssp(#1) 
     700              ;                       mov t2, *ssp(#2)
     700              
     700              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     700              ;;                      mov t3, *(ssp(#0))
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   40

     700              ;                       mov t3, *ssp
     700              ;                       mov *sp(#3), t3 ; 
     700              ;                       mov t3, *ssp(#1)
     700              ;;                      mov *sp(#21), PC        
     700              
     700              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     700              ;                       mov dbl(xsp), dbl(lcrpc)
     700              ;                       popboth XAR7
     700              ;                       add #1, sp
     700              ;                       add #1, ssp
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700              ;                       popboth XAR6
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700              ;                       popboth XAR5
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700                              ;-----------------------------------
     700              ;                       popboth XAR4
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700              ;                       popboth XAR3
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700              ;                       popboth XAR2
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700              ;                       popboth XAR1
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700              ;                       popboth XAR0
     700              ;                       add #2, t0
     700              ;                       add #2, t1
     700              ;                       mov t0, sp
     700              ;                       mov t1, ssp
     700              ;                       EDIS
     700              ;                       NASP    ; Un-align stack pointer
     700              ;;                      pop mmap(ST3_55)
     700              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     700              ;            BCC $2,TC1 ; |216|
TMS320C55x Assembler PC v4.4.1 Tue Sep 18 04:49:57 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   41

     700 000395 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp***
         000397 4F00 
         000399 0000!
     700 00039b ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp***
         00039d 5F00 
         00039f 0000!
     700              ;                       B $3
     700              ;$2
     700              ;            MOV #0, *(#_first_flag) ; |217|
     700              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     700              ;                       mov dbl (*(#_first_save_xssp)), xssp
     700              ;$3
     700              ;                       aadd #-3, sp
     700 0003a1 46B2                          bclr INTM               ; enable interrupts
     700              ;                       aadd #1, sp
     700 0003a3 4805                          RETI
     700              ;                       mov #1860h, ssp
     700 0003a5 20                            nop
     700 0003a6 20                            nop
     700              ;                       nop
     701              
     702              ;;;
     703              
     704              ;                /* Place the tick ISR in the correct vector. */
     705              
     706              ;;;                .sect ".int49"                       ; TIMER1_A0_VECTOR                      
     707              ;;                .sect ".int14"                        ; CPUTIMER2
     708              ;                 .sect ".text"                 ; CPUTIMER2
     709              ;;;;             .sect ".INT14_ISR"
     710              ;               .global _INT14_ISR
     711              ;;;; _INT14_ISR:
     712              ;;;;                .short   _vTickISR
     713              ;;;;            LCR #_vTickISR
     714                              .end

No Assembly Errors, No Assembly Warnings
