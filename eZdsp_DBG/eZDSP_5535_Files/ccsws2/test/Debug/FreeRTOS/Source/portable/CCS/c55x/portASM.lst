TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    1

     620              ; Temporary Registers Used: None
       1              ;       .cdecls C,LIST,"FreeRTOSConfig.h"
       2                      .mmregs
       3              
       4              
       5                       .C54CM_off
       6                       .CPL_on
       7                       .ARMS_off
       8                       .align 4
       9                       
      10              ;       .c28_amode
      11                           .global _usCriticalNesting
      12                           .global _save_xsp
      13                           .global _save_xssp
      14                           .global _save_xar7
      15                           .global _tZero
      16                           .global _save_xar6
      17                           .global _pxCurrentTCB
      18                           .global _xTaskIncrementTick
      19                           .ref    _xTaskIncrementTick
      20                           .global _vTaskSwitchContext
      21                           .global _prvSetupTimerInterrupt
      22                                       .global _tickIRQctr
      23              
      24                           .def _vPortYield
      25                           .def _xPortStartScheduler
      26                           .def _vTickISR
      27                           .global _vPortYield
      28                           .global _xPortStartScheduler
      29                           .global _vTickISR
      30                           .global _INT14_ISR
      31                           .global _portFLAGS_INT_ENABLED
      32                           .global _portFLAGS_INT_ENABLED_POPPED
      33                           .global _DBSTAT_LOW
      34                           .global _DBSTAT_HIGH
      35                           .global _STATUS0_LOW
      36                           .global _STATUS0_HIGH
      37                           .global _STATUS1_LOW
      38                           .global _STATUS1_HIGH
      39                           .global _STATUS2_LOW
      40                           .global _STATUS2_HIGH
      41              ;            .cdecls C,NOLIST,"portmacro.h"
      42              ;            .cdecls C,LIST,"FreeRTOSConfig.h"
      43              
      44              
      45              ;                       CLRC AMODE
      46              
      47              ;       System Stack
      48              
      49              
      50              
      51              
      52 000000               .text
      53              portSAVE_CONTEXT .macro 
      54              ;                       ;CONTEXT_SAVE
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    2

      55              ;                       ASP  ; Align Stack Pointer
      56              ;                       CLRC       OVM,PAGE0
      57              ;                       CLRC       AMODE
      58              ;                       EALLOW
      59              
      60                                      bclr C54CM      ; temp - until we figure out what is setting this
      61              
      62                                      bset INTM               ; disable interrupts
      63              
      64              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
      65              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
      66                                      
      67              ;                       pshboth xar7
      68              ;                       pshboth xar6
      69              ;                       pshboth xar5
      70              
      71                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
      72              
      73                                      mov dbl (*(#_pxCurrentTCB)), xar7
      74              ; does this *always* work?
      75                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
      76                                      mov dbl (*ar7(#2)), xssp                        
      77              ;; what about xssp here?
      78              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
      79              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
      80              
      81              
      82                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
      83              
      84                                      mov xar7, dbl(*sp(#8))                          ; save xar7
      85                                      mov ar7, *sp(#7)
      86              
      87                                      mov xar6, dbl(*sp(#10))
      88                                      mov ar6, *sp(#9)
      89              
      90                                      mov xar5, dbl(*sp(#12))
      91                                      mov ar5, *sp(#11)
      92              
      93                                      mov xar4, dbl(*sp(#14))
      94                                      mov ar4, *sp(#13)
      95              
      96                                      mov xar3, dbl(*sp(#16))
      97                                      mov ar3, *sp(#15)
      98              
      99                                      mov xar2, dbl(*sp(#18))
     100                                      mov ar2, *sp(#17)
     101              
     102                                      mov xar1, dbl(*sp(#20))
     103                                      mov ar1, *sp(#19)
     104              
     105                                      mov xar0, dbl(*sp(#22))
     106                                      mov ar0, *sp(#21)
     107              
     108                                      mov t3, *sp(#23)
     109                                      mov t2, *sp(#24)
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    3

     110                                      mov t1, *sp(#25)
     111                                      mov t0, *sp(#26)
     112              
     113              ;;                      mov mmap(ST0_55), t0
     114              ; - this is ok - we are not pushing - it's a relative stack frame
     115              ;                       mov t0, *sp(#25)
     116              ;;                      mov t0, *sp(#23)
     117              ;;                      mov mmap(ST1_55), t1
     118              ;                       mov t1, *sp(#26)                ; stomping on own mem
     119              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     120              ;;                      mov mmap(ST2_55), t2
     121              ;;                      mov t2, *sp(#22)
     122              ;                       mov t2, *sp(#27)
     123              ;;                      mov mmap(ST2_55), t3
     124              ;                       mov t3, *sp(#28)
     125              ;;                      mov t3, *sp(#24)
     126              
     127              ;                       PSH dbl(AR0) ; 32-bit
     128              ;                       PSH dbl(AR1) 
     129              ;                       PSH dbl(AR2) ; 32-bit
     130              ;                       PUSH XAR3 ; 32-bit
     131              ;                       PUSH XAR4 ; 32-bit
     132                              ;-- Comment these to save cycles --------
     133              ;                       PUSH XAR5 ; 32-bit
     134              ;                       PUSH XAR6 ; 32-bit
     135              ;                       PUSH XAR7 ; 32-bit
     136                              ;----------------------------------------
     137              
     138              ;                       PUSH XT   ; 32-bit
     139              
     140              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     141              ;                       push xar6 ; portFLAGS_INT_ENABLED
     142              
     143                                      mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
     144                                      mov xar6, dbl(*sp(#6))
     145                                      
     146              
     147              ;                       movl xar7, @_usCriticalNesting
     148              ;                       push xar7
     149                                      mov dbl (*(#_usCriticalNesting)), xar7
     150                                      mov xar7, dbl(*sp(#4))
     151              
     152                                      mov mmap(ST1_55), ar7
     153                                      mov ar7, *sp(#1)
     154                                      mov  mmap(ST2_55), ar7
     155                                      mov ar7, *sp(#2)
     156              
     157                                      mov ssp, ar7
     158                                      mov mmap(ST0_55), ar6
     159                                      mov ar6, *ar7(#1)
     160                                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     161                                      mov ar6, *ar7(#2)
     162              ;                       mov ar7, mmap(ST0_55)
     163              ;                       mov *ssp(#2), ar7
     164              
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    4

     165              ; fix up
     166              ;                       aadd #20, sp
     167              ;                       mov sp, t0
     168              ;                       sub #1, t0
     169              ;                       mov t0, ssp
     170              
     171                                      ; move contents of SP into address of current TCB
     172              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     173              
     174              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     175              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     176              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     177              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     178              ;                       mov dbl (*ar7+), xssp
     179              
     180              ;                       mov sp, t0              ; we've already saved t0
     181              ;                       add #1, t0
     182              ;                       mov t0, ssp
     183              ; ??
     184              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     185              
     186              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     187              ;                       mov al, @sp
     188              ;                       movl  *xar6, acc        
     189              ;;                      mov  ar0, @sp
     190              ;;                      mov  @ar6, alxd
     191              ;;                      mov  ar0, @sp
     192              ;;                      movl 0(xar6), sp
     193              ;                       EDIS
     194              ;                       NASP
     195              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     196              ;                       NOP
     197                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     198                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     199                                      nop
     200                                      nop
     201                                      nop
     202                                      .endm
     203              
     204              portRESTORE_CONTEXT .macro
     205                                      .C54CM_off
     206                                      .CPL_on
     207                                      .ARMS_off
     208                                      .align 4
     209              
     210              ; Restore context & return
     211                                      ;CONTEXT_RESTORE
     212              ;                       ASP
     213              ;                       EALLOW
     214              ;                       nop
     215              ;                       nop
     216              ;                       nop
     217              ;                       nop
     218                                      bclr C54CM    
     219              ;               xssp = dbl(*(#_pxCurrentTCB))
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    5

     220              ;               xsp  = dbl(*(#_pxCurrentTCB))
     221                                      mov xar7, dbl (*(#_save_xar7))  
     222              
     223                                      aadd #-3, sp
     224              
     225                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     226                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     227              
     228              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     229              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     230              
     231              ;                       aadd #-3, sp
     232              
     233                                      mov xsp, xar7
     234                                      mov xssp, xar6
     235              
     236                                      mov dbl (*(#_pxCurrentTCB)), xar5                       
     237              
     238                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     239                                      mov dbl (*ar5(#2)), xar3                        
     240                                      
     241                                      mov *ar4, ar2
     242                                      mov *ar3, ar1
     243              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     244                                      mov ar2, *ar7
     245                                      mov ar1, *ar6
     246                                      
     247              
     248              
     249              
     250              ;                       mov #0, ssp     
     251              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     252              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     253                                      ; 32-bit mode - will act on SP and SSP:
     254              ;                       'fix-up' current SP and SSP - is this dangerous????
     255              ;                       aadd #-3, sp
     256              ;;                      mov *ar7, *sp
     257              ;                       mov dbl (*ar7), ar6
     258              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     259              ;                       mov *ar7(#2), *ssp                      
     260              ;                       POP mmap(ST3_55)
     261              ;                       pshboth xar7                            ; should increment both
     262                                      mov mmap(ST1_55), ar7
     263                                      and #0xf7ff, ar7                        ; <here>#0800h
     264                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     265                                      mov mmap(ST2_55), ar7
     266                                      mov ar7, *sp(#2)
     267              
     268                                      mov ssp, ar7
     269                                      mov mmap(ST0_55), ar6
     270                                      mov ar6, *ar7(#1)
     271                                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     272                                      mov ar6, *ar7(#2)
     273              
     274                                      mov dbl (*(#_pxCurrentTCB)), xar7
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    6

     275              
     276                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     277                                      mov dbl (*ar7(#2)), xssp                        
     278              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     279              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     280              
     281              ;                       mov mmap(ST0_55), *ssp(#1)
     282              ;                       mov mmap(STO_55), *ssp(#2)
     283              ;                       mov mmap(ST1_55), *sp(#1)
     284              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     285              ;                       mov *ar7, t0
     286              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     287              ;                       mov *ar7(#2), t0
     288              ;                       mov t0, *ssp(#0)                        
     289              
     290              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     291              ; what about xssp?
     292              ;                       mov xar6, xsp
     293              ;                       mov xssp, xar7
     294              ;                       add #1, ar7
     295              ;                       mov xar7, xsp
     296              ;                       mov sp, t0
     297              ;                       mov ssp, t1
     298              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     299              ;                       ar0 = *ar6
     300              ;                       xssp = xar0
     301              ;                       mov *xar6, xar0
     302              ;                       mov xar0, xssp  ; stack now points to our TCB
     303              ;;                      mov sp, *ar6
     304              ;;                      mov sp, ar0
     305              ;;                      mov sp, *_pxCurrentTCB
     306              ;;                      clr ar0
     307              ;;                      mov ar0, @xar6
     308              ;;                      mov sp, AR0
     309              ;;                      add sp, xar6
     310              
     311              ;;                      pshboth xar7
     312              ;;                      pshboth xar6
     313              ;;                      pshboth xar5
     314              
     315              ;;                      popboth xar5
     316              ;;                      popboth xar6
     317              ;;                      popboth xar7
     318              
     319              ;;;                     mov *sp(#1), ar7 
     320              ;                       mov dbl(*sp(#1)), ar7
     321              ;;;                     mov  ar7, mmap(ST1_55)
     322                                      mov *sp(#2), ar7
     323                                      mov ar7, mmap(ST2_55)
     324                                      mov ssp, ar7
     325                                      mov *ar7(#1), ar6
     326                                      mov ar6, mmap(ST0_55)
     327                                      mov *ar7(#2), ar6
     328                                      mov ar7, mmap(ST0_55)
     329              ;                       mov *ssp(#2), ar7
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    7

     330              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     331              
     332                                      mov dbl(*sp(#4)), xar7
     333              ;                       mov *sp(#1), ar7
     334                                      mov xar7, dbl(*(#_usCriticalNesting))   
     335              
     336                                      mov dbl(*sp(#6)), xar6
     337              ;                       mov *sp(#3), ar6
     338              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     339                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     340              
     341              ;                       POP XT
     342                              ;-- Comment these to save cycles ---
     343                                      mov dbl(*sp(#8)), xar7
     344                                      mov *sp(#7), ar7
     345              ;                       mov *sp(#5), ar7
     346              ;                       mov dbl(*sp(#0)), hi(ar7)
     347              ;                       mov (*sp(#0)), lo(ar7)
     348                                      mov dbl(*sp(#10)), xar6
     349                                      mov *sp(#9), ar6
     350                                      mov dbl(*sp(#12)), xar5
     351                                      mov *sp(#11), ar5
     352              ;; pvPararmeters currently here - needs to be verified --- jcw
     353                                      mov dbl(*sp(#14)), xar4
     354                                      mov *sp(#13), ar4
     355                                      mov dbl(*sp(#16)), xar3
     356                                      mov *sp(#15), ar3
     357                                      mov dbl(*sp(#18)), xar2
     358                                      mov *sp(#17), ar2
     359                                      mov dbl(*sp(#20)), xar1
     360                                      mov *sp(#19), ar1
     361                                      mov dbl(*sp(#22)), xar0
     362                                      mov *sp(#21), ar0
     363              
     364                                      mov *sp(#23), t3
     365                                      mov *sp(#24), t2
     366                                      mov *sp(#25), t1
     367                                      mov *sp(#26), t0
     368              
     369              ;                       mov dbl(*sp(#21)), *xssp(#0)
     370              ;                       mov *sp(#21), *ssp
     371              ;                       mov *sp(#21), RETA
     372              ; need to move 23-16 to XSSP contents
     373              ;                       mov xar0, dbl (*(#_save_xar7))
     374              ;                       mov ssp, ar0
     375              ;                       mov #0, ssp 
     376              ;                       mov xssp, xar0
     377              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     378              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     379                      ;               add #1, xssp            ; 32-bit return address pointer
     380                      ;               amar *xssp+
     381              ;                       mov sp, t0
     382              ;                       add #1, t0
     383              ;                       mov t0, ssp
     384              ;                       incr ssp
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    8

     385              ;                       asub #20, ar0
     386              ;                       mov xar0, xssp
     387              ;                       mov ar0, ssp
     388              ;                       mov ar0, 
     389              ;;                      mov *sp(#1), t0
     390              ;;                      mov *sp(#3), t3         ; ST0
     391              ;;                      mov *sp(#4), t2         ; DBSTAT
     392              ;;                      mov t3, *ar0(#2)
     393                      ;;              mov t2, *ar0(#1)
     394              ;;                      mov t0, *ar0(#0)
     395              
     396              ;;                      mov *sp(#5), t0
     397              ;;                      mov *sp(#6), t1
     398              ;;                      mov *sp(#7), t2
     399                      ;;              mov *sp(#8), t3
     400              
     401              
     402              
     403              ; restore ar0
     404              ;                       mov dbl(*sp(#-2)), xar0
     405              ;                       mov #-1, ar0
     406              ;;                      mov dbl (*(#_save_xar7)), xar0
     407              ;;
     408              ;;                      mov sp, t0
     409              ;;                      add #1, t0
     410              ;;                      mov t0, ssp
     411              
     412              ;                       mov *sp(#3), *(#00004ch+#1)
     413              
     414              ;                       mov t3, *ssp(#1) 
     415              ;                       mov t2, *ssp(#2)
     416              
     417              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     418              ;;                      mov t3, *(ssp(#0))
     419              ;                       mov t3, *ssp
     420              ;                       mov *sp(#3), t3 ; 
     421              ;                       mov t3, *ssp(#1)
     422              ;;                      mov *sp(#21), PC        
     423              
     424              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     425              ;                       mov dbl(xsp), dbl(lcrpc)
     426              ;                       popboth XAR7
     427              ;                       add #1, sp
     428              ;                       add #1, ssp
     429              ;                       add #2, t0
     430              ;                       add #2, t1
     431              ;                       mov t0, sp
     432              ;                       mov t1, ssp
     433              ;                       popboth XAR6
     434              ;                       add #2, t0
     435              ;                       add #2, t1
     436              ;                       mov t0, sp
     437              ;                       mov t1, ssp
     438              ;                       popboth XAR5
     439              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    9

     440              ;                       add #2, t1
     441              ;                       mov t0, sp
     442              ;                       mov t1, ssp
     443                              ;-----------------------------------
     444              ;                       popboth XAR4
     445              ;                       add #2, t0
     446              ;                       add #2, t1
     447              ;                       mov t0, sp
     448              ;                       mov t1, ssp
     449              ;                       popboth XAR3
     450              ;                       add #2, t0
     451              ;                       add #2, t1
     452              ;                       mov t0, sp
     453              ;                       mov t1, ssp
     454              ;                       popboth XAR2
     455              ;                       add #2, t0
     456              ;                       add #2, t1
     457              ;                       mov t0, sp
     458              ;                       mov t1, ssp
     459              ;                       popboth XAR1
     460              ;                       add #2, t0
     461              ;                       add #2, t1
     462              ;                       mov t0, sp
     463              ;                       mov t1, ssp
     464              ;                       popboth XAR0
     465              ;                       add #2, t0
     466              ;                       add #2, t1
     467              ;                       mov t0, sp
     468              ;                       mov t1, ssp
     469              ;                       EDIS
     470              ;                       NASP    ; Un-align stack pointer
     471              ;;                      pop mmap(ST3_55)
     472                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     473                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     474              
     475              ;                       aadd #-3, sp
     476                                      bclr INTM               ; enable interrupts
     477              ;                       aadd #1, sp
     478                                      RETI
     479              ;                       mov #1860h, ssp
     480                                      nop
     481                                      nop
     482              ;                       nop
     483                                      .endm
     484              ; /*-----------------------------------------------------------*/
     485              
     486              ; /*
     487              ; * The RTOS tick ISR.
     488              ; *
     489              ; * If the cooperative scheduler is in use this simply increments the tick
     490              ; * count.
     491              ; *
     492              ; * If the preemptive scheduler is in use a context switch can also occur.
     493              ; */
     494              
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   10

     495              
     496 000000       _xPortStartScheduler:
     497              
     498              ;                /* Setup the hardware to generate the tick.  Interrupts are disabled
     499              ;                when this function is called. */
     500 000000 4EFF                 aadd #-1, sp
     501 000002 6C00                 call    #_prvSetupTimerInterrupt
         000004 0000!
     502              
     503              ;                /* Restore the context of the first task that is going to run. */
     504              
     505              ;;              INTR INT14      ; force interrupt - just for debug purposes.
     506              
     507              ;;            psh mmap(ST3_55)
     508 000006 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000008 F500 
         00000a 0000!
     509 00000c EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save xar6 
         00000e E500 
         000010 0000!
     510              
     511 000012 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000014 FF00 
         000016 0000!
     512              ; does this *always* work?
     513 000018 EDE1                          mov dbl (*ar7), xar6
         00001a EF   
     514 00001b EB31                          mov xsp, dbl (*(#_save_xsp))            ; (init) xsp contains our TCB now
         00001d 4500 
         00001f 0000!
     515 000021 EDE3                          mov dbl (*ar7+), xar6
         000023 EF   
     516 000024 EB31                          mov xssp, dbl (*(#_save_xssp))
         000026 5500 
         000028 0000!
     517              
     518              ; what about xssp here?
     519 00002a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00002c FF00 
         00002e 0000!
     520 000030 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000032 EF00 
         000034 0000!
     521 000036 4E01                          aadd #1, sp
     522 ****** MACRO             portRESTORE_CONTEXT
     522                                      .C54CM_off
     522                                      .CPL_on
     522                                      .ARMS_off
     522                                      .align 4
     522              
     522              ; Restore context & return
     522                                      ;CONTEXT_RESTORE
     522              ;                       ASP
     522              ;                       EALLOW
     522              ;                       nop
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   11

     522              ;                       nop
     522              ;                       nop
     522              ;                       nop
     522 000038 4652                          bclr C54CM    
     522              ;               xssp = dbl(*(#_pxCurrentTCB))
     522              ;               xsp  = dbl(*(#_pxCurrentTCB))
     522 00003a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00003c F500 
         00003e 0000!
     522              
     522 000040 4EFD                          aadd #-3, sp
     522              
     522 000042 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000044 4F00 
         000046 0000!
     522 000048 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00004a 5F00 
         00004c 0000!
     522              
     522              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     522              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     522              
     522              ;                       aadd #-3, sp
     522              
     522 00004e 904F                          mov xsp, xar7
     522 000050 905E                          mov xssp, xar6
     522              
     522 000052 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000054 DF00 
         000056 0000!
     522              
     522 000058 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00005a CF   
     522 00005b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00005d BF00 
         00005f 02   
     522                                      
     522 000060 AA81                          mov *ar4, ar2
     522 000062 A961                          mov *ar3, ar1
     522              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     522 000064 CAE1                          mov ar2, *ar7
     522 000066 C9C1                          mov ar1, *ar6
     522                                      
     522              
     522              
     522              
     522              ;                       mov #0, ssp     
     522              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     522              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     522                                      ; 32-bit mode - will act on SP and SSP:
     522              ;                       'fix-up' current SP and SSP - is this dangerous????
     522              ;                       aadd #-3, sp
     522              ;;                      mov *ar7, *sp
     522              ;                       mov dbl (*ar7), ar6
     522              ;                       mov ar6, *sp                            ; xsp contains our TCB now
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   12

     522              ;                       mov *ar7(#2), *ssp                      
     522              ;                       POP mmap(ST3_55)
     522              ;                       pshboth xar7                            ; should increment both
     522 000068 AF06                          mov mmap(ST1_55), ar7
         00006a 98   
     522 00006b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00006d FFFF 
     522 00006f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     522 000071 AF96                          mov mmap(ST2_55), ar7
         000073 98   
     522 000074 CF04                          mov ar7, *sp(#2)
     522              
     522 000076 449F                          mov ssp, ar7
     522 000078 AE04                          mov mmap(ST0_55), ar6
         00007a 98   
     522 00007b CEED                          mov ar6, *ar7(#1)
         00007d 0001 
     522 00007f AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000081 98   
     522 000082 CEED                          mov ar6, *ar7(#2)
         000084 0002 
     522              
     522 000086 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000088 FF00 
         00008a 0000!
     522              
     522 00008c EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00008e 4F   
     522 00008f EDED                          mov dbl (*ar7(#2)), xssp                        
         000091 5F00 
         000093 02   
     522              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     522              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     522              
     522              ;                       mov mmap(ST0_55), *ssp(#1)
     522              ;                       mov mmap(STO_55), *ssp(#2)
     522              ;                       mov mmap(ST1_55), *sp(#1)
     522              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     522              ;                       mov *ar7, t0
     522              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     522              ;                       mov *ar7(#2), t0
     522              ;                       mov t0, *ssp(#0)                        
     522              
     522              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     522              ; what about xssp?
     522              ;                       mov xar6, xsp
     522              ;                       mov xssp, xar7
     522              ;                       add #1, ar7
     522              ;                       mov xar7, xsp
     522              ;                       mov sp, t0
     522              ;                       mov ssp, t1
     522              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     522              ;                       ar0 = *ar6
     522              ;                       xssp = xar0
     522              ;                       mov *xar6, xar0
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   13

     522              ;                       mov xar0, xssp  ; stack now points to our TCB
     522              ;;                      mov sp, *ar6
     522              ;;                      mov sp, ar0
     522              ;;                      mov sp, *_pxCurrentTCB
     522              ;;                      clr ar0
     522              ;;                      mov ar0, @xar6
     522              ;;                      mov sp, AR0
     522              ;;                      add sp, xar6
     522              
     522              ;;                      pshboth xar7
     522              ;;                      pshboth xar6
     522              ;;                      pshboth xar5
     522              
     522              ;;                      popboth xar5
     522              ;;                      popboth xar6
     522              ;;                      popboth xar7
     522              
     522              ;;;                     mov *sp(#1), ar7 
     522              ;                       mov dbl(*sp(#1)), ar7
     522              ;;;                     mov  ar7, mmap(ST1_55)
     522 000094 AF04                          mov *sp(#2), ar7
     522 000096 CF96                          mov ar7, mmap(ST2_55)
         000098 98   
     522 000099 449F                          mov ssp, ar7
     522 00009b AEED                          mov *ar7(#1), ar6
         00009d 0001 
     522 00009f CE04                          mov ar6, mmap(ST0_55)
         0000a1 98   
     522 0000a2 AEED                          mov *ar7(#2), ar6
         0000a4 0002 
     522 0000a6 CF04                          mov ar7, mmap(ST0_55)
         0000a8 98   
     522              ;                       mov *ssp(#2), ar7
     522              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     522              
     522 0000a9 ED08                          mov dbl(*sp(#4)), xar7
         0000ab FF   
     522              ;                       mov *sp(#1), ar7
     522 0000ac EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0000ae F500 
         0000b0 0000!
     522              
     522 0000b2 ED0C                          mov dbl(*sp(#6)), xar6
         0000b4 EF   
     522              ;                       mov *sp(#3), ar6
     522              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     522 0000b5 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0000b7 E500 
         0000b9 0000!
     522              
     522              ;                       POP XT
     522                              ;-- Comment these to save cycles ---
     522 0000bb ED10                          mov dbl(*sp(#8)), xar7
         0000bd FF   
     522 0000be AF0E                          mov *sp(#7), ar7
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   14

     522              ;                       mov *sp(#5), ar7
     522              ;                       mov dbl(*sp(#0)), hi(ar7)
     522              ;                       mov (*sp(#0)), lo(ar7)
     522 0000c0 ED14                          mov dbl(*sp(#10)), xar6
         0000c2 EF   
     522 0000c3 AE12                          mov *sp(#9), ar6
     522 0000c5 ED18                          mov dbl(*sp(#12)), xar5
         0000c7 DF   
     522 0000c8 AD16                          mov *sp(#11), ar5
     522              ;; pvPararmeters currently here - needs to be verified --- jcw
     522 0000ca ED1C                          mov dbl(*sp(#14)), xar4
         0000cc CF   
     522 0000cd AC1A                          mov *sp(#13), ar4
     522 0000cf ED20                          mov dbl(*sp(#16)), xar3
         0000d1 BF   
     522 0000d2 AB1E                          mov *sp(#15), ar3
     522 0000d4 ED24                          mov dbl(*sp(#18)), xar2
         0000d6 AF   
     522 0000d7 AA22                          mov *sp(#17), ar2
     522 0000d9 ED28                          mov dbl(*sp(#20)), xar1
         0000db 9F   
     522 0000dc A926                          mov *sp(#19), ar1
     522 0000de ED2C                          mov dbl(*sp(#22)), xar0
         0000e0 8F   
     522 0000e1 A82A                          mov *sp(#21), ar0
     522              
     522 0000e3 A72E                          mov *sp(#23), t3
     522 0000e5 A630                          mov *sp(#24), t2
     522 0000e7 A532                          mov *sp(#25), t1
     522 0000e9 A434                          mov *sp(#26), t0
     522              
     522              ;                       mov dbl(*sp(#21)), *xssp(#0)
     522              ;                       mov *sp(#21), *ssp
     522              ;                       mov *sp(#21), RETA
     522              ; need to move 23-16 to XSSP contents
     522              ;                       mov xar0, dbl (*(#_save_xar7))
     522              ;                       mov ssp, ar0
     522              ;                       mov #0, ssp 
     522              ;                       mov xssp, xar0
     522              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     522              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     522                      ;               add #1, xssp            ; 32-bit return address pointer
     522                      ;               amar *xssp+
     522              ;                       mov sp, t0
     522              ;                       add #1, t0
     522              ;                       mov t0, ssp
     522              ;                       incr ssp
     522              ;                       asub #20, ar0
     522              ;                       mov xar0, xssp
     522              ;                       mov ar0, ssp
     522              ;                       mov ar0, 
     522              ;;                      mov *sp(#1), t0
     522              ;;                      mov *sp(#3), t3         ; ST0
     522              ;;                      mov *sp(#4), t2         ; DBSTAT
     522              ;;                      mov t3, *ar0(#2)
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   15

     522                      ;;              mov t2, *ar0(#1)
     522              ;;                      mov t0, *ar0(#0)
     522              
     522              ;;                      mov *sp(#5), t0
     522              ;;                      mov *sp(#6), t1
     522              ;;                      mov *sp(#7), t2
     522                      ;;              mov *sp(#8), t3
     522              
     522              
     522              
     522              ; restore ar0
     522              ;                       mov dbl(*sp(#-2)), xar0
     522              ;                       mov #-1, ar0
     522              ;;                      mov dbl (*(#_save_xar7)), xar0
     522              ;;
     522              ;;                      mov sp, t0
     522              ;;                      add #1, t0
     522              ;;                      mov t0, ssp
     522              
     522              ;                       mov *sp(#3), *(#00004ch+#1)
     522              
     522              ;                       mov t3, *ssp(#1) 
     522              ;                       mov t2, *ssp(#2)
     522              
     522              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     522              ;;                      mov t3, *(ssp(#0))
     522              ;                       mov t3, *ssp
     522              ;                       mov *sp(#3), t3 ; 
     522              ;                       mov t3, *ssp(#1)
     522              ;;                      mov *sp(#21), PC        
     522              
     522              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     522              ;                       mov dbl(xsp), dbl(lcrpc)
     522              ;                       popboth XAR7
     522              ;                       add #1, sp
     522              ;                       add #1, ssp
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
     522              ;                       mov t1, ssp
     522              ;                       popboth XAR6
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
     522              ;                       mov t1, ssp
     522              ;                       popboth XAR5
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
     522              ;                       mov t1, ssp
     522                              ;-----------------------------------
     522              ;                       popboth XAR4
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   16

     522              ;                       mov t1, ssp
     522              ;                       popboth XAR3
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
     522              ;                       mov t1, ssp
     522              ;                       popboth XAR2
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
     522              ;                       mov t1, ssp
     522              ;                       popboth XAR1
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
     522              ;                       mov t1, ssp
     522              ;                       popboth XAR0
     522              ;                       add #2, t0
     522              ;                       add #2, t1
     522              ;                       mov t0, sp
     522              ;                       mov t1, ssp
     522              ;                       EDIS
     522              ;                       NASP    ; Un-align stack pointer
     522              ;;                      pop mmap(ST3_55)
     522 0000eb ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0000ed 4F00 
         0000ef 0000!
     522 0000f1 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0000f3 5F00 
         0000f5 0000!
     522              
     522              ;                       aadd #-3, sp
     522 0000f7 46B2                          bclr INTM               ; enable interrupts
     522              ;                       aadd #1, sp
     522 0000f9 4805                          RETI
     522              ;                       mov #1860h, ssp
     522 0000fb 20                            nop
     522 0000fc 20                            nop
     522              ;                       nop
     523              
     524              
     525              
     526 0000fd       _vTickISR:
     527               ;               bclr IFR0.IF4          ; enable interrupts
     528                              
     529 0000fd 4EFF                  aadd #-1, sp
     530 0000ff E651                  MOV #0, *port(#6166) ; |119|
         000101 0018 
         000103 16   
     531 000104 F431          AND #0x0010, *(#1)
         000106 0010 
         000108 0000 
         00010a 01   
     532 00010b F402                  AND #0x0010, mmap(@IFR0)
         00010d 0010 
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   17

         00010f 98   
     533              
     534              ;               bset INTM               ; disable interrupts
     535                              .if configUSE_TICK_CTR == 1
     536                              add #1, *(#_tickIRQctr)
     537                              .endif
     538              ;;              psh mmap(ST3_55)
     539 ****** MACRO         portSAVE_CONTEXT
     539              ;                       ;CONTEXT_SAVE
     539              ;                       ASP  ; Align Stack Pointer
     539              ;                       CLRC       OVM,PAGE0
     539              ;                       CLRC       AMODE
     539              ;                       EALLOW
     539              
     539 000110 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     539              
     539 000112 46B3                          bset INTM               ; disable interrupts
     539              
     539              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     539              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     539                                      
     539              ;                       pshboth xar7
     539              ;                       pshboth xar6
     539              ;                       pshboth xar5
     539              
     539 000114 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000116 F500 
         000118 0000!
     539              
     539 00011a ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         00011c FF00 
         00011e 0000!
     539              ; does this *always* work?
     539 000120 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000122 4F   
     539 000123 EDED                          mov dbl (*ar7(#2)), xssp                        
         000125 5F00 
         000127 02   
     539              ;; what about xssp here?
     539              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     539              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     539              
     539              
     539 000128 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00012a FF00 
         00012c 0000!
     539              
     539 00012e EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         000130 F5   
     539 000131 CF0E                          mov ar7, *sp(#7)
     539              
     539 000133 EB14                          mov xar6, dbl(*sp(#10))
         000135 E5   
     539 000136 CE12                          mov ar6, *sp(#9)
     539              
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   18

     539 000138 EB18                          mov xar5, dbl(*sp(#12))
         00013a D5   
     539 00013b CD16                          mov ar5, *sp(#11)
     539              
     539 00013d EB1C                          mov xar4, dbl(*sp(#14))
         00013f C5   
     539 000140 CC1A                          mov ar4, *sp(#13)
     539              
     539 000142 EB20                          mov xar3, dbl(*sp(#16))
         000144 B5   
     539 000145 CB1E                          mov ar3, *sp(#15)
     539              
     539 000147 EB24                          mov xar2, dbl(*sp(#18))
         000149 A5   
     539 00014a CA22                          mov ar2, *sp(#17)
     539              
     539 00014c EB28                          mov xar1, dbl(*sp(#20))
         00014e 95   
     539 00014f C926                          mov ar1, *sp(#19)
     539              
     539 000151 EB2C                          mov xar0, dbl(*sp(#22))
         000153 85   
     539 000154 C82A                          mov ar0, *sp(#21)
     539              
     539 000156 C72E                          mov t3, *sp(#23)
     539 000158 C630                          mov t2, *sp(#24)
     539 00015a C532                          mov t1, *sp(#25)
     539 00015c C434                          mov t0, *sp(#26)
     539              
     539              ;;                      mov mmap(ST0_55), t0
     539              ; - this is ok - we are not pushing - it's a relative stack frame
     539              ;                       mov t0, *sp(#25)
     539              ;;                      mov t0, *sp(#23)
     539              ;;                      mov mmap(ST1_55), t1
     539              ;                       mov t1, *sp(#26)                ; stomping on own mem
     539              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     539              ;;                      mov mmap(ST2_55), t2
     539              ;;                      mov t2, *sp(#22)
     539              ;                       mov t2, *sp(#27)
     539              ;;                      mov mmap(ST2_55), t3
     539              ;                       mov t3, *sp(#28)
     539              ;;                      mov t3, *sp(#24)
     539              
     539              ;                       PSH dbl(AR0) ; 32-bit
     539              ;                       PSH dbl(AR1) 
     539              ;                       PSH dbl(AR2) ; 32-bit
     539              ;                       PUSH XAR3 ; 32-bit
     539              ;                       PUSH XAR4 ; 32-bit
     539                              ;-- Comment these to save cycles --------
     539              ;                       PUSH XAR5 ; 32-bit
     539              ;                       PUSH XAR6 ; 32-bit
     539              ;                       PUSH XAR7 ; 32-bit
     539                              ;----------------------------------------
     539              
     539              ;                       PUSH XT   ; 32-bit
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   19

     539              
     539              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     539              ;                       push xar6 ; portFLAGS_INT_ENABLED
     539              
     539 00015e ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         000160 EF00 
         000162 0000!
     539 000164 EB0C                          mov xar6, dbl(*sp(#6))
         000166 E5   
     539                                      
     539              
     539              ;                       movl xar7, @_usCriticalNesting
     539              ;                       push xar7
     539 000167 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         000169 FF00 
         00016b 0000!
     539 00016d EB08                          mov xar7, dbl(*sp(#4))
         00016f F5   
     539              
     539 000170 AF06                          mov mmap(ST1_55), ar7
         000172 98   
     539 000173 CF02                          mov ar7, *sp(#1)
     539 000175 AF96                          mov  mmap(ST2_55), ar7
         000177 98   
     539 000178 CF04                          mov ar7, *sp(#2)
     539              
     539 00017a 449F                          mov ssp, ar7
     539 00017c AE04                          mov mmap(ST0_55), ar6
         00017e 98   
     539 00017f CEED                          mov ar6, *ar7(#1)
         000181 0001 
     539 000183 AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000185 98   
     539 000186 CEED                          mov ar6, *ar7(#2)
         000188 0002 
     539              ;                       mov ar7, mmap(ST0_55)
     539              ;                       mov *ssp(#2), ar7
     539              
     539              ; fix up
     539              ;                       aadd #20, sp
     539              ;                       mov sp, t0
     539              ;                       sub #1, t0
     539              ;                       mov t0, ssp
     539              
     539                                      ; move contents of SP into address of current TCB
     539              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     539              
     539              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     539              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     539              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     539              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     539              ;                       mov dbl (*ar7+), xssp
     539              
     539              ;                       mov sp, t0              ; we've already saved t0
     539              ;                       add #1, t0
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   20

     539              ;                       mov t0, ssp
     539              ; ??
     539              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     539              
     539              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     539              ;                       mov al, @sp
     539              ;                       movl  *xar6, acc        
     539              ;;                      mov  ar0, @sp
     539              ;;                      mov  @ar6, alxd
     539              ;;                      mov  ar0, @sp
     539              ;;                      movl 0(xar6), sp
     539              ;                       EDIS
     539              ;                       NASP
     539              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     539              ;                       NOP
     539 00018a ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         00018c 4F00 
         00018e 0000!
     539 000190 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000192 5F00 
         000194 0000!
     539 000196 20                            nop
     539 000197 20                            nop
     539 000198 20                            nop
     540              
     541 000199 6C00          call     #_xTaskIncrementTick
         00019b 0000!
     542              
     543                      .if configUSE_PREEMPTION == 1
     544 00019d EB31          mov xsp, dbl (*(#_save_xsp))                    ; save xsp
         00019f 4500 
         0001a1 0000!
     545 0001a3 EB31              mov xssp, dbl (*(#_save_xssp))                      ; save xssp
         0001a5 5500 
         0001a7 0000!
     546 0001a9 6C00          call    #_vTaskSwitchContext
         0001ab 0000!
     547                      .endif
     548              
     549 0001ad E651                  mov #1, *port(#6166) ; |127|
         0001af 0118 
         0001b1 16   
     550 0001b2 F551                  or #0x0001, *port(#7188) ; |130|
         0001b4 0001 
         0001b6 1C14 
     551 0001b8 4E01                  aadd #1, sp
     552 ****** MACRO         portRESTORE_CONTEXT
     552                                      .C54CM_off
     552                                      .CPL_on
     552                                      .ARMS_off
     552                                      .align 4
     552              
     552              ; Restore context & return
     552                                      ;CONTEXT_RESTORE
     552              ;                       ASP
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   21

     552              ;                       EALLOW
     552              ;                       nop
     552              ;                       nop
     552              ;                       nop
     552              ;                       nop
     552 0001bc 4652                          bclr C54CM    
     552              ;               xssp = dbl(*(#_pxCurrentTCB))
     552              ;               xsp  = dbl(*(#_pxCurrentTCB))
     552 0001be EB31                          mov xar7, dbl (*(#_save_xar7))  
         0001c0 F500 
         0001c2 0000!
     552              
     552 0001c4 4EFD                          aadd #-3, sp
     552              
     552 0001c6 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0001c8 4F00 
         0001ca 0000!
     552 0001cc ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0001ce 5F00 
         0001d0 0000!
     552              
     552              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     552              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     552              
     552              ;                       aadd #-3, sp
     552              
     552 0001d2 904F                          mov xsp, xar7
     552 0001d4 905E                          mov xssp, xar6
     552              
     552 0001d6 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         0001d8 DF00 
         0001da 0000!
     552              
     552 0001dc EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         0001de CF   
     552 0001df EDAD                          mov dbl (*ar5(#2)), xar3                        
         0001e1 BF00 
         0001e3 02   
     552                                      
     552 0001e4 AA81                          mov *ar4, ar2
     552 0001e6 A961                          mov *ar3, ar1
     552              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     552 0001e8 CAE1                          mov ar2, *ar7
     552 0001ea C9C1                          mov ar1, *ar6
     552                                      
     552              
     552              
     552              
     552              ;                       mov #0, ssp     
     552              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     552              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     552                                      ; 32-bit mode - will act on SP and SSP:
     552              ;                       'fix-up' current SP and SSP - is this dangerous????
     552              ;                       aadd #-3, sp
     552              ;;                      mov *ar7, *sp
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   22

     552              ;                       mov dbl (*ar7), ar6
     552              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     552              ;                       mov *ar7(#2), *ssp                      
     552              ;                       POP mmap(ST3_55)
     552              ;                       pshboth xar7                            ; should increment both
     552 0001ec AF06                          mov mmap(ST1_55), ar7
         0001ee 98   
     552 0001ef 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         0001f1 FFFF 
     552 0001f3 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     552 0001f5 AF96                          mov mmap(ST2_55), ar7
         0001f7 98   
     552 0001f8 CF04                          mov ar7, *sp(#2)
     552              
     552 0001fa 449F                          mov ssp, ar7
     552 0001fc AE04                          mov mmap(ST0_55), ar6
         0001fe 98   
     552 0001ff CEED                          mov ar6, *ar7(#1)
         000201 0001 
     552 000203 AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000205 98   
     552 000206 CEED                          mov ar6, *ar7(#2)
         000208 0002 
     552              
     552 00020a ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         00020c FF00 
         00020e 0000!
     552              
     552 000210 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000212 4F   
     552 000213 EDED                          mov dbl (*ar7(#2)), xssp                        
         000215 5F00 
         000217 02   
     552              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     552              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     552              
     552              ;                       mov mmap(ST0_55), *ssp(#1)
     552              ;                       mov mmap(STO_55), *ssp(#2)
     552              ;                       mov mmap(ST1_55), *sp(#1)
     552              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     552              ;                       mov *ar7, t0
     552              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     552              ;                       mov *ar7(#2), t0
     552              ;                       mov t0, *ssp(#0)                        
     552              
     552              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     552              ; what about xssp?
     552              ;                       mov xar6, xsp
     552              ;                       mov xssp, xar7
     552              ;                       add #1, ar7
     552              ;                       mov xar7, xsp
     552              ;                       mov sp, t0
     552              ;                       mov ssp, t1
     552              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     552              ;                       ar0 = *ar6
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   23

     552              ;                       xssp = xar0
     552              ;                       mov *xar6, xar0
     552              ;                       mov xar0, xssp  ; stack now points to our TCB
     552              ;;                      mov sp, *ar6
     552              ;;                      mov sp, ar0
     552              ;;                      mov sp, *_pxCurrentTCB
     552              ;;                      clr ar0
     552              ;;                      mov ar0, @xar6
     552              ;;                      mov sp, AR0
     552              ;;                      add sp, xar6
     552              
     552              ;;                      pshboth xar7
     552              ;;                      pshboth xar6
     552              ;;                      pshboth xar5
     552              
     552              ;;                      popboth xar5
     552              ;;                      popboth xar6
     552              ;;                      popboth xar7
     552              
     552              ;;;                     mov *sp(#1), ar7 
     552              ;                       mov dbl(*sp(#1)), ar7
     552              ;;;                     mov  ar7, mmap(ST1_55)
     552 000218 AF04                          mov *sp(#2), ar7
     552 00021a CF96                          mov ar7, mmap(ST2_55)
         00021c 98   
     552 00021d 449F                          mov ssp, ar7
     552 00021f AEED                          mov *ar7(#1), ar6
         000221 0001 
     552 000223 CE04                          mov ar6, mmap(ST0_55)
         000225 98   
     552 000226 AEED                          mov *ar7(#2), ar6
         000228 0002 
     552 00022a CF04                          mov ar7, mmap(ST0_55)
         00022c 98   
     552              ;                       mov *ssp(#2), ar7
     552              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     552              
     552 00022d ED08                          mov dbl(*sp(#4)), xar7
         00022f FF   
     552              ;                       mov *sp(#1), ar7
     552 000230 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000232 F500 
         000234 0000!
     552              
     552 000236 ED0C                          mov dbl(*sp(#6)), xar6
         000238 EF   
     552              ;                       mov *sp(#3), ar6
     552              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     552 000239 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         00023b E500 
         00023d 0000!
     552              
     552              ;                       POP XT
     552                              ;-- Comment these to save cycles ---
     552 00023f ED10                          mov dbl(*sp(#8)), xar7
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   24

         000241 FF   
     552 000242 AF0E                          mov *sp(#7), ar7
     552              ;                       mov *sp(#5), ar7
     552              ;                       mov dbl(*sp(#0)), hi(ar7)
     552              ;                       mov (*sp(#0)), lo(ar7)
     552 000244 ED14                          mov dbl(*sp(#10)), xar6
         000246 EF   
     552 000247 AE12                          mov *sp(#9), ar6
     552 000249 ED18                          mov dbl(*sp(#12)), xar5
         00024b DF   
     552 00024c AD16                          mov *sp(#11), ar5
     552              ;; pvPararmeters currently here - needs to be verified --- jcw
     552 00024e ED1C                          mov dbl(*sp(#14)), xar4
         000250 CF   
     552 000251 AC1A                          mov *sp(#13), ar4
     552 000253 ED20                          mov dbl(*sp(#16)), xar3
         000255 BF   
     552 000256 AB1E                          mov *sp(#15), ar3
     552 000258 ED24                          mov dbl(*sp(#18)), xar2
         00025a AF   
     552 00025b AA22                          mov *sp(#17), ar2
     552 00025d ED28                          mov dbl(*sp(#20)), xar1
         00025f 9F   
     552 000260 A926                          mov *sp(#19), ar1
     552 000262 ED2C                          mov dbl(*sp(#22)), xar0
         000264 8F   
     552 000265 A82A                          mov *sp(#21), ar0
     552              
     552 000267 A72E                          mov *sp(#23), t3
     552 000269 A630                          mov *sp(#24), t2
     552 00026b A532                          mov *sp(#25), t1
     552 00026d A434                          mov *sp(#26), t0
     552              
     552              ;                       mov dbl(*sp(#21)), *xssp(#0)
     552              ;                       mov *sp(#21), *ssp
     552              ;                       mov *sp(#21), RETA
     552              ; need to move 23-16 to XSSP contents
     552              ;                       mov xar0, dbl (*(#_save_xar7))
     552              ;                       mov ssp, ar0
     552              ;                       mov #0, ssp 
     552              ;                       mov xssp, xar0
     552              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     552              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     552                      ;               add #1, xssp            ; 32-bit return address pointer
     552                      ;               amar *xssp+
     552              ;                       mov sp, t0
     552              ;                       add #1, t0
     552              ;                       mov t0, ssp
     552              ;                       incr ssp
     552              ;                       asub #20, ar0
     552              ;                       mov xar0, xssp
     552              ;                       mov ar0, ssp
     552              ;                       mov ar0, 
     552              ;;                      mov *sp(#1), t0
     552              ;;                      mov *sp(#3), t3         ; ST0
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   25

     552              ;;                      mov *sp(#4), t2         ; DBSTAT
     552              ;;                      mov t3, *ar0(#2)
     552                      ;;              mov t2, *ar0(#1)
     552              ;;                      mov t0, *ar0(#0)
     552              
     552              ;;                      mov *sp(#5), t0
     552              ;;                      mov *sp(#6), t1
     552              ;;                      mov *sp(#7), t2
     552                      ;;              mov *sp(#8), t3
     552              
     552              
     552              
     552              ; restore ar0
     552              ;                       mov dbl(*sp(#-2)), xar0
     552              ;                       mov #-1, ar0
     552              ;;                      mov dbl (*(#_save_xar7)), xar0
     552              ;;
     552              ;;                      mov sp, t0
     552              ;;                      add #1, t0
     552              ;;                      mov t0, ssp
     552              
     552              ;                       mov *sp(#3), *(#00004ch+#1)
     552              
     552              ;                       mov t3, *ssp(#1) 
     552              ;                       mov t2, *ssp(#2)
     552              
     552              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     552              ;;                      mov t3, *(ssp(#0))
     552              ;                       mov t3, *ssp
     552              ;                       mov *sp(#3), t3 ; 
     552              ;                       mov t3, *ssp(#1)
     552              ;;                      mov *sp(#21), PC        
     552              
     552              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     552              ;                       mov dbl(xsp), dbl(lcrpc)
     552              ;                       popboth XAR7
     552              ;                       add #1, sp
     552              ;                       add #1, ssp
     552              ;                       add #2, t0
     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552              ;                       popboth XAR6
     552              ;                       add #2, t0
     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552              ;                       popboth XAR5
     552              ;                       add #2, t0
     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552                              ;-----------------------------------
     552              ;                       popboth XAR4
     552              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   26

     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552              ;                       popboth XAR3
     552              ;                       add #2, t0
     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552              ;                       popboth XAR2
     552              ;                       add #2, t0
     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552              ;                       popboth XAR1
     552              ;                       add #2, t0
     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552              ;                       popboth XAR0
     552              ;                       add #2, t0
     552              ;                       add #2, t1
     552              ;                       mov t0, sp
     552              ;                       mov t1, ssp
     552              ;                       EDIS
     552              ;                       NASP    ; Un-align stack pointer
     552              ;;                      pop mmap(ST3_55)
     552 00026f ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000271 4F00 
         000273 0000!
     552 000275 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000277 5F00 
         000279 0000!
     552              
     552              ;                       aadd #-3, sp
     552 00027b 46B2                          bclr INTM               ; enable interrupts
     552              ;                       aadd #1, sp
     552 00027d 4805                          RETI
     552              ;                       mov #1860h, ssp
     552 00027f 20                            nop
     552 000280 20                            nop
     552              ;                       nop
     553                                              
     554              ; /*-----------------------------------------------------------*/
     555              
     556              
     557              ;/*
     558              ; * Manual context switch called by the portYIELD() macro.
     559              ; */
     560              
     561              ; We are using the slow return model:
     562              
     563              ; System Stack (SSP)                    Data Stack (SP)
     564              ; SSP = x - 3:  (Loop Bits):PC(23-16)   SP = y - 3: PC(15-0)  <<= Last pushed - first to POP
     565              ; SSP = x - 2:  DBSTAT                  SP = y - 2: ST1_55
     566              ; SSP = x - 1:  ST0_55                  SP = y - 1: ST2_55
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   27

     567              ; SSP = x:      Previously saved data   SP = y:     Previously saved data
     568              
     569              
     570 000281       _vPortYield:
     571              
     572 000281 4EFF                  aadd #-1, sp
     573 000283 F402                  AND #0x0010, mmap(@IFR0)
         000285 0010 
         000287 98   
     574              ;                /* Mimic an interrupt by pushing the SR. */
     575              
     576              ;               /* SR is 16-bits in 430X architecture */
     577              
     578              ;;                pushx.w    SR
     579              
     580              ;                /* Now the SR is stacked we can disable interrupts. */
     581              
     582              ;                dint
     583              
     584 000288 46B3                    bset INTM             ; disable interrupts
     585              
     586              ;;                bicx.w #0xF000,0(r1)
     587              ;;                swpbx.w +4(r1)
     588              ;;                rlax.w +4(r1)
     589              ;;                rlax.w +4(r1)
     590              ;;                rlax.w +4(r1)
     591              ;;                rlax.w +4(r1)
     592              ;;                addx.w +4(r1),0(r1)
     593              ;;                movx.w +2(r1),+4(r1)
     594              ;;                movx.w 0(r1),+2(r1)
     595              ;;                incdx.a r1
     596              
     597              ;                /* Save the context of the current task. */
     598              ;;        psh mmap(ST3_55)
     599 ****** MACRO         portSAVE_CONTEXT
     599              ;                       ;CONTEXT_SAVE
     599              ;                       ASP  ; Align Stack Pointer
     599              ;                       CLRC       OVM,PAGE0
     599              ;                       CLRC       AMODE
     599              ;                       EALLOW
     599              
     599 00028a 4652                          bclr C54CM      ; temp - until we figure out what is setting this
     599              
     599 00028c 46B3                          bset INTM               ; disable interrupts
     599              
     599              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     599              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     599                                      
     599              ;                       pshboth xar7
     599              ;                       pshboth xar6
     599              ;                       pshboth xar5
     599              
     599 00028e EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000290 F500 
         000292 0000!
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   28

     599              
     599 000294 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000296 FF00 
         000298 0000!
     599              ; does this *always* work?
     599 00029a EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00029c 4F   
     599 00029d EDED                          mov dbl (*ar7(#2)), xssp                        
         00029f 5F00 
         0002a1 02   
     599              ;; what about xssp here?
     599              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     599              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     599              
     599              
     599 0002a2 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         0002a4 FF00 
         0002a6 0000!
     599              
     599 0002a8 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         0002aa F5   
     599 0002ab CF0E                          mov ar7, *sp(#7)
     599              
     599 0002ad EB14                          mov xar6, dbl(*sp(#10))
         0002af E5   
     599 0002b0 CE12                          mov ar6, *sp(#9)
     599              
     599 0002b2 EB18                          mov xar5, dbl(*sp(#12))
         0002b4 D5   
     599 0002b5 CD16                          mov ar5, *sp(#11)
     599              
     599 0002b7 EB1C                          mov xar4, dbl(*sp(#14))
         0002b9 C5   
     599 0002ba CC1A                          mov ar4, *sp(#13)
     599              
     599 0002bc EB20                          mov xar3, dbl(*sp(#16))
         0002be B5   
     599 0002bf CB1E                          mov ar3, *sp(#15)
     599              
     599 0002c1 EB24                          mov xar2, dbl(*sp(#18))
         0002c3 A5   
     599 0002c4 CA22                          mov ar2, *sp(#17)
     599              
     599 0002c6 EB28                          mov xar1, dbl(*sp(#20))
         0002c8 95   
     599 0002c9 C926                          mov ar1, *sp(#19)
     599              
     599 0002cb EB2C                          mov xar0, dbl(*sp(#22))
         0002cd 85   
     599 0002ce C82A                          mov ar0, *sp(#21)
     599              
     599 0002d0 C72E                          mov t3, *sp(#23)
     599 0002d2 C630                          mov t2, *sp(#24)
     599 0002d4 C532                          mov t1, *sp(#25)
     599 0002d6 C434                          mov t0, *sp(#26)
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   29

     599              
     599              ;;                      mov mmap(ST0_55), t0
     599              ; - this is ok - we are not pushing - it's a relative stack frame
     599              ;                       mov t0, *sp(#25)
     599              ;;                      mov t0, *sp(#23)
     599              ;;                      mov mmap(ST1_55), t1
     599              ;                       mov t1, *sp(#26)                ; stomping on own mem
     599              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     599              ;;                      mov mmap(ST2_55), t2
     599              ;;                      mov t2, *sp(#22)
     599              ;                       mov t2, *sp(#27)
     599              ;;                      mov mmap(ST2_55), t3
     599              ;                       mov t3, *sp(#28)
     599              ;;                      mov t3, *sp(#24)
     599              
     599              ;                       PSH dbl(AR0) ; 32-bit
     599              ;                       PSH dbl(AR1) 
     599              ;                       PSH dbl(AR2) ; 32-bit
     599              ;                       PUSH XAR3 ; 32-bit
     599              ;                       PUSH XAR4 ; 32-bit
     599                              ;-- Comment these to save cycles --------
     599              ;                       PUSH XAR5 ; 32-bit
     599              ;                       PUSH XAR6 ; 32-bit
     599              ;                       PUSH XAR7 ; 32-bit
     599                              ;----------------------------------------
     599              
     599              ;                       PUSH XT   ; 32-bit
     599              
     599              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     599              ;                       push xar6 ; portFLAGS_INT_ENABLED
     599              
     599 0002d8 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0002da EF00 
         0002dc 0000!
     599 0002de EB0C                          mov xar6, dbl(*sp(#6))
         0002e0 E5   
     599                                      
     599              
     599              ;                       movl xar7, @_usCriticalNesting
     599              ;                       push xar7
     599 0002e1 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0002e3 FF00 
         0002e5 0000!
     599 0002e7 EB08                          mov xar7, dbl(*sp(#4))
         0002e9 F5   
     599              
     599 0002ea AF06                          mov mmap(ST1_55), ar7
         0002ec 98   
     599 0002ed CF02                          mov ar7, *sp(#1)
     599 0002ef AF96                          mov  mmap(ST2_55), ar7
         0002f1 98   
     599 0002f2 CF04                          mov ar7, *sp(#2)
     599              
     599 0002f4 449F                          mov ssp, ar7
     599 0002f6 AE04                          mov mmap(ST0_55), ar6
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   30

         0002f8 98   
     599 0002f9 CEED                          mov ar6, *ar7(#1)
         0002fb 0001 
     599 0002fd AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         0002ff 98   
     599 000300 CEED                          mov ar6, *ar7(#2)
         000302 0002 
     599              ;                       mov ar7, mmap(ST0_55)
     599              ;                       mov *ssp(#2), ar7
     599              
     599              ; fix up
     599              ;                       aadd #20, sp
     599              ;                       mov sp, t0
     599              ;                       sub #1, t0
     599              ;                       mov t0, ssp
     599              
     599                                      ; move contents of SP into address of current TCB
     599              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     599              
     599              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     599              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     599              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     599              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     599              ;                       mov dbl (*ar7+), xssp
     599              
     599              ;                       mov sp, t0              ; we've already saved t0
     599              ;                       add #1, t0
     599              ;                       mov t0, ssp
     599              ; ??
     599              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     599              
     599              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     599              ;                       mov al, @sp
     599              ;                       movl  *xar6, acc        
     599              ;;                      mov  ar0, @sp
     599              ;;                      mov  @ar6, alxd
     599              ;;                      mov  ar0, @sp
     599              ;;                      movl 0(xar6), sp
     599              ;                       EDIS
     599              ;                       NASP
     599              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     599              ;                       NOP
     599 000304 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000306 4F00 
         000308 0000!
     599 00030a ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00030c 5F00 
         00030e 0000!
     599 000310 20                            nop
     599 000311 20                            nop
     599 000312 20                            nop
     600              
     601              ;        /* Switch to the highest priority task that is ready to run. */
     602 000313 6C00          call    #_vTaskSwitchContext
         000315 0000!
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   31

     603 000317 E651          mov #1, *port(#6166) ; |127|
         000319 0118 
         00031b 16   
     604 00031c F551                  or #0x0001, *port(#7188) ; |130|
         00031e 0001 
         000320 1C14 
     605 000322 4E01                  aadd #1, sp
     606 ****** MACRO         portRESTORE_CONTEXT
     606                                      .C54CM_off
     606                                      .CPL_on
     606                                      .ARMS_off
     606                                      .align 4
     606              
     606              ; Restore context & return
     606                                      ;CONTEXT_RESTORE
     606              ;                       ASP
     606              ;                       EALLOW
     606              ;                       nop
     606              ;                       nop
     606              ;                       nop
     606              ;                       nop
     606 000324 4652                          bclr C54CM    
     606              ;               xssp = dbl(*(#_pxCurrentTCB))
     606              ;               xsp  = dbl(*(#_pxCurrentTCB))
     606 000326 EB31                          mov xar7, dbl (*(#_save_xar7))  
         000328 F500 
         00032a 0000!
     606              
     606 00032c 4EFD                          aadd #-3, sp
     606              
     606 00032e ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000330 4F00 
         000332 0000!
     606 000334 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000336 5F00 
         000338 0000!
     606              
     606              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     606              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     606              
     606              ;                       aadd #-3, sp
     606              
     606 00033a 904F                          mov xsp, xar7
     606 00033c 905E                          mov xssp, xar6
     606              
     606 00033e ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000340 DF00 
         000342 0000!
     606              
     606 000344 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         000346 CF   
     606 000347 EDAD                          mov dbl (*ar5(#2)), xar3                        
         000349 BF00 
         00034b 02   
     606                                      
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   32

     606 00034c AA81                          mov *ar4, ar2
     606 00034e A961                          mov *ar3, ar1
     606              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     606 000350 CAE1                          mov ar2, *ar7
     606 000352 C9C1                          mov ar1, *ar6
     606                                      
     606              
     606              
     606              
     606              ;                       mov #0, ssp     
     606              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     606              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     606                                      ; 32-bit mode - will act on SP and SSP:
     606              ;                       'fix-up' current SP and SSP - is this dangerous????
     606              ;                       aadd #-3, sp
     606              ;;                      mov *ar7, *sp
     606              ;                       mov dbl (*ar7), ar6
     606              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     606              ;                       mov *ar7(#2), *ssp                      
     606              ;                       POP mmap(ST3_55)
     606              ;                       pshboth xar7                            ; should increment both
     606 000354 AF06                          mov mmap(ST1_55), ar7
         000356 98   
     606 000357 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         000359 FFFF 
     606 00035b CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     606 00035d AF96                          mov mmap(ST2_55), ar7
         00035f 98   
     606 000360 CF04                          mov ar7, *sp(#2)
     606              
     606 000362 449F                          mov ssp, ar7
     606 000364 AE04                          mov mmap(ST0_55), ar6
         000366 98   
     606 000367 CEED                          mov ar6, *ar7(#1)
         000369 0001 
     606 00036b AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         00036d 98   
     606 00036e CEED                          mov ar6, *ar7(#2)
         000370 0002 
     606              
     606 000372 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000374 FF00 
         000376 0000!
     606              
     606 000378 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00037a 4F   
     606 00037b EDED                          mov dbl (*ar7(#2)), xssp                        
         00037d 5F00 
         00037f 02   
     606              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     606              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     606              
     606              ;                       mov mmap(ST0_55), *ssp(#1)
     606              ;                       mov mmap(STO_55), *ssp(#2)
     606              ;                       mov mmap(ST1_55), *sp(#1)
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   33

     606              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     606              ;                       mov *ar7, t0
     606              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     606              ;                       mov *ar7(#2), t0
     606              ;                       mov t0, *ssp(#0)                        
     606              
     606              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     606              ; what about xssp?
     606              ;                       mov xar6, xsp
     606              ;                       mov xssp, xar7
     606              ;                       add #1, ar7
     606              ;                       mov xar7, xsp
     606              ;                       mov sp, t0
     606              ;                       mov ssp, t1
     606              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     606              ;                       ar0 = *ar6
     606              ;                       xssp = xar0
     606              ;                       mov *xar6, xar0
     606              ;                       mov xar0, xssp  ; stack now points to our TCB
     606              ;;                      mov sp, *ar6
     606              ;;                      mov sp, ar0
     606              ;;                      mov sp, *_pxCurrentTCB
     606              ;;                      clr ar0
     606              ;;                      mov ar0, @xar6
     606              ;;                      mov sp, AR0
     606              ;;                      add sp, xar6
     606              
     606              ;;                      pshboth xar7
     606              ;;                      pshboth xar6
     606              ;;                      pshboth xar5
     606              
     606              ;;                      popboth xar5
     606              ;;                      popboth xar6
     606              ;;                      popboth xar7
     606              
     606              ;;;                     mov *sp(#1), ar7 
     606              ;                       mov dbl(*sp(#1)), ar7
     606              ;;;                     mov  ar7, mmap(ST1_55)
     606 000380 AF04                          mov *sp(#2), ar7
     606 000382 CF96                          mov ar7, mmap(ST2_55)
         000384 98   
     606 000385 449F                          mov ssp, ar7
     606 000387 AEED                          mov *ar7(#1), ar6
         000389 0001 
     606 00038b CE04                          mov ar6, mmap(ST0_55)
         00038d 98   
     606 00038e AEED                          mov *ar7(#2), ar6
         000390 0002 
     606 000392 CF04                          mov ar7, mmap(ST0_55)
         000394 98   
     606              ;                       mov *ssp(#2), ar7
     606              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     606              
     606 000395 ED08                          mov dbl(*sp(#4)), xar7
         000397 FF   
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   34

     606              ;                       mov *sp(#1), ar7
     606 000398 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         00039a F500 
         00039c 0000!
     606              
     606 00039e ED0C                          mov dbl(*sp(#6)), xar6
         0003a0 EF   
     606              ;                       mov *sp(#3), ar6
     606              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     606 0003a1 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0003a3 E500 
         0003a5 0000!
     606              
     606              ;                       POP XT
     606                              ;-- Comment these to save cycles ---
     606 0003a7 ED10                          mov dbl(*sp(#8)), xar7
         0003a9 FF   
     606 0003aa AF0E                          mov *sp(#7), ar7
     606              ;                       mov *sp(#5), ar7
     606              ;                       mov dbl(*sp(#0)), hi(ar7)
     606              ;                       mov (*sp(#0)), lo(ar7)
     606 0003ac ED14                          mov dbl(*sp(#10)), xar6
         0003ae EF   
     606 0003af AE12                          mov *sp(#9), ar6
     606 0003b1 ED18                          mov dbl(*sp(#12)), xar5
         0003b3 DF   
     606 0003b4 AD16                          mov *sp(#11), ar5
     606              ;; pvPararmeters currently here - needs to be verified --- jcw
     606 0003b6 ED1C                          mov dbl(*sp(#14)), xar4
         0003b8 CF   
     606 0003b9 AC1A                          mov *sp(#13), ar4
     606 0003bb ED20                          mov dbl(*sp(#16)), xar3
         0003bd BF   
     606 0003be AB1E                          mov *sp(#15), ar3
     606 0003c0 ED24                          mov dbl(*sp(#18)), xar2
         0003c2 AF   
     606 0003c3 AA22                          mov *sp(#17), ar2
     606 0003c5 ED28                          mov dbl(*sp(#20)), xar1
         0003c7 9F   
     606 0003c8 A926                          mov *sp(#19), ar1
     606 0003ca ED2C                          mov dbl(*sp(#22)), xar0
         0003cc 8F   
     606 0003cd A82A                          mov *sp(#21), ar0
     606              
     606 0003cf A72E                          mov *sp(#23), t3
     606 0003d1 A630                          mov *sp(#24), t2
     606 0003d3 A532                          mov *sp(#25), t1
     606 0003d5 A434                          mov *sp(#26), t0
     606              
     606              ;                       mov dbl(*sp(#21)), *xssp(#0)
     606              ;                       mov *sp(#21), *ssp
     606              ;                       mov *sp(#21), RETA
     606              ; need to move 23-16 to XSSP contents
     606              ;                       mov xar0, dbl (*(#_save_xar7))
     606              ;                       mov ssp, ar0
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   35

     606              ;                       mov #0, ssp 
     606              ;                       mov xssp, xar0
     606              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     606              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     606                      ;               add #1, xssp            ; 32-bit return address pointer
     606                      ;               amar *xssp+
     606              ;                       mov sp, t0
     606              ;                       add #1, t0
     606              ;                       mov t0, ssp
     606              ;                       incr ssp
     606              ;                       asub #20, ar0
     606              ;                       mov xar0, xssp
     606              ;                       mov ar0, ssp
     606              ;                       mov ar0, 
     606              ;;                      mov *sp(#1), t0
     606              ;;                      mov *sp(#3), t3         ; ST0
     606              ;;                      mov *sp(#4), t2         ; DBSTAT
     606              ;;                      mov t3, *ar0(#2)
     606                      ;;              mov t2, *ar0(#1)
     606              ;;                      mov t0, *ar0(#0)
     606              
     606              ;;                      mov *sp(#5), t0
     606              ;;                      mov *sp(#6), t1
     606              ;;                      mov *sp(#7), t2
     606                      ;;              mov *sp(#8), t3
     606              
     606              
     606              
     606              ; restore ar0
     606              ;                       mov dbl(*sp(#-2)), xar0
     606              ;                       mov #-1, ar0
     606              ;;                      mov dbl (*(#_save_xar7)), xar0
     606              ;;
     606              ;;                      mov sp, t0
     606              ;;                      add #1, t0
     606              ;;                      mov t0, ssp
     606              
     606              ;                       mov *sp(#3), *(#00004ch+#1)
     606              
     606              ;                       mov t3, *ssp(#1) 
     606              ;                       mov t2, *ssp(#2)
     606              
     606              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     606              ;;                      mov t3, *(ssp(#0))
     606              ;                       mov t3, *ssp
     606              ;                       mov *sp(#3), t3 ; 
     606              ;                       mov t3, *ssp(#1)
     606              ;;                      mov *sp(#21), PC        
     606              
     606              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     606              ;                       mov dbl(xsp), dbl(lcrpc)
     606              ;                       popboth XAR7
     606              ;                       add #1, sp
     606              ;                       add #1, ssp
     606              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   36

     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606              ;                       popboth XAR6
     606              ;                       add #2, t0
     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606              ;                       popboth XAR5
     606              ;                       add #2, t0
     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606                              ;-----------------------------------
     606              ;                       popboth XAR4
     606              ;                       add #2, t0
     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606              ;                       popboth XAR3
     606              ;                       add #2, t0
     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606              ;                       popboth XAR2
     606              ;                       add #2, t0
     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606              ;                       popboth XAR1
     606              ;                       add #2, t0
     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606              ;                       popboth XAR0
     606              ;                       add #2, t0
     606              ;                       add #2, t1
     606              ;                       mov t0, sp
     606              ;                       mov t1, ssp
     606              ;                       EDIS
     606              ;                       NASP    ; Un-align stack pointer
     606              ;;                      pop mmap(ST3_55)
     606 0003d7 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0003d9 4F00 
         0003db 0000!
     606 0003dd ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0003df 5F00 
         0003e1 0000!
     606              
     606              ;                       aadd #-3, sp
     606 0003e3 46B2                          bclr INTM               ; enable interrupts
     606              ;                       aadd #1, sp
     606 0003e5 4805                          RETI
     606              ;                       mov #1860h, ssp
     606 0003e7 20                            nop
TMS320C55x Assembler PC v4.4.1 Fri Sep 14 03:54:06 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   37

     606 0003e8 20                            nop
     606              ;                       nop
     607              
     608              ;;;
     609              
     610              ;                /* Place the tick ISR in the correct vector. */
     611              
     612              ;;;                .sect ".int49"                       ; TIMER1_A0_VECTOR                      
     613              ;;                .sect ".int14"                        ; CPUTIMER2
     614              ;                 .sect ".text"                 ; CPUTIMER2
     615              ;;;;             .sect ".INT14_ISR"
     616              ;               .global _INT14_ISR
     617              ;;;; _INT14_ISR:
     618              ;;;;                .short   _vTickISR
     619              ;;;;            LCR #_vTickISR
     620                              .end

No Assembly Errors, No Assembly Warnings
