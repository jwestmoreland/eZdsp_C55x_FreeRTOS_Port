TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    1

     639              ; Temporary Registers Used: None
       1              ; .cdecls C, LIST, "FreeRTOSConfig.h"
       2              ;  .include "FreeRTOSConfig.h"
       3              ; 32-bit stack slow mode
       4                      .mmregs
       5              ;        .C54CM_on
       6              ;     .CPL_on
       7              ;      .ARMS_off
       8                       .align 4
       9              ;       .c28_amode
      10              
      11                        .global _usCriticalNesting
      12                           .global _save_xsp
      13                           .global _save_xssp
      14                           .global _first_save_xsp
      15                           .global _first_save_xssp
      16                           .global _first_flag
      17                           .global _save_xar7
      18                           .global _tZero
      19                           .global _save_xar6
      20                        .global _pxCurrentTCB
      21                           .global _xTaskIncrementTick
      22                           .ref    _xTaskIncrementTick
      23                           .global _vTaskSwitchContext
      24                           .global _prvSetupTimerInterrupt
      25                                       .global _tickIRQctr
      26              
      27              ;                         .ref configUSE_TICK_CTR
      28              ;                         .ref configUSE_PREEMPTION
      29              
      30                           .def _vPortYield
      31                           .def _xPortStartScheduler
      32                           .def _vTickISR
      33                           .global _vPortYield
      34                           .global _xPortStartScheduler
      35                           .global _vTickISR
      36                           .global _INT14_ISR
      37                           .global _portFLAGS_INT_ENABLED
      38                           .global _portFLAGS_INT_ENABLED_POPPED
      39                           .global _DBSTAT_LOW
      40                           .global _DBSTAT_HIGH
      41                           .global _STATUS0_LOW
      42                           .global _STATUS0_HIGH
      43                           .global _STATUS1_LOW
      44                           .global _STATUS1_HIGH
      45                           .global _STATUS2_LOW
      46                           .global _STATUS2_HIGH
      47              ;            .cdecls C,NOLIST,"portmacro.h"
      48              ;            .cdecls C,LIST,"FreeRTOSConfig.h"
      49              ;                       CLRC AMODE
      50              ;       System Stack
      51 000000               .text
      52              portSAVE_CONTEXT .macro 
      53              ;                       ;CONTEXT_SAVE
      54              ;                       ASP  ; Align Stack Pointer
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    2

      55              ;                       CLRC       OVM,PAGE0
      56              ;                       CLRC       AMODE
      57              ;                       EALLOW
      58              
      59              ;                       bclr C54CM      ; temp - until we figure out what is setting this
      60              
      61                                      bset INTM               ; disable interrupts
      62              
      63              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
      64              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
      65                                      
      66              ;                       pshboth xar7
      67              ;                       pshboth xar6
      68              ;                       pshboth xar5
      69              
      70                                      mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
      71              
      72                                      mov dbl (*(#_pxCurrentTCB)), xar7
      73              ; does this *always* work?
      74                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
      75                                      mov dbl (*ar7(#2)), xssp                        
      76              ;; what about xssp here?
      77              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
      78              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
      79              
      80                                      mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
      81              
      82                                      mov xar7, dbl(*sp(#8))                          ; save xar7
      83                                      mov ar7, *sp(#7)
      84              
      85                                      mov xar6, dbl(*sp(#10))
      86                                      mov ar6, *sp(#9)
      87              
      88                                      mov xar5, dbl(*sp(#12))
      89                                      mov ar5, *sp(#11)
      90              
      91                                      mov xar4, dbl(*sp(#14))
      92                                      mov ar4, *sp(#13)
      93              
      94                                      mov xar3, dbl(*sp(#16))
      95                                      mov ar3, *sp(#15)
      96              
      97                                      mov xar2, dbl(*sp(#18))
      98                                      mov ar2, *sp(#17)
      99              
     100                                      mov xar1, dbl(*sp(#20))
     101                                      mov ar1, *sp(#19)
     102              
     103                                      mov xar0, dbl(*sp(#22))
     104                                      mov ar0, *sp(#21)
     105              
     106                                      mov t3, *sp(#23)
     107                                      mov t2, *sp(#24)
     108                                      mov t1, *sp(#25)
     109                                      mov t0, *sp(#26)
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    3

     110              
     111              ;;                      mov mmap(ST0_55), t0
     112              ; - this is ok - we are not pushing - it's a relative stack frame
     113              ;                       mov t0, *sp(#25)
     114              ;;                      mov t0, *sp(#23)
     115              ;;                      mov mmap(ST1_55), t1
     116              ;                       mov t1, *sp(#26)                ; stomping on own mem
     117              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     118              ;;                      mov mmap(ST2_55), t2
     119              ;;                      mov t2, *sp(#22)
     120              ;                       mov t2, *sp(#27)
     121              ;;                      mov mmap(ST2_55), t3
     122              ;                       mov t3, *sp(#28)
     123              ;;                      mov t3, *sp(#24)
     124              
     125              ;                       PSH dbl(AR0) ; 32-bit
     126              ;                       PSH dbl(AR1) 
     127              ;                       PSH dbl(AR2) ; 32-bit
     128              ;                       PUSH XAR3 ; 32-bit
     129              ;                       PUSH XAR4 ; 32-bit
     130                              ;-- Comment these to save cycles --------
     131              ;                       PUSH XAR5 ; 32-bit
     132              ;                       PUSH XAR6 ; 32-bit
     133              ;                       PUSH XAR7 ; 32-bit
     134                              ;----------------------------------------
     135              
     136              ;                       PUSH XT   ; 32-bit
     137              
     138              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     139              ;                       push xar6 ; portFLAGS_INT_ENABLED
     140              
     141                                      mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
     142                                      mov xar6, dbl(*sp(#6))
     143                                      
     144              
     145              ;                       movl xar7, @_usCriticalNesting
     146              ;                       push xar7
     147                                      mov dbl (*(#_usCriticalNesting)), xar7
     148                                      mov xar7, dbl(*sp(#4))
     149              
     150                                      mov mmap(ST1_55), ar7
     151                                      mov ar7, *sp(#1)
     152                                      mov  mmap(ST2_55), ar7
     153                                      mov ar7, *sp(#2)
     154              
     155                                      mov ssp, ar7
     156                                      mov mmap(ST0_55), ar6
     157                                      mov ar6, *ar7(#1)
     158                                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
     159                                      mov ar6, *ar7(#2)
     160              ;                       mov ar7, mmap(ST0_55)
     161              ;                       mov *ssp(#2), ar7
     162              
     163              ; fix up
     164              ;                       aadd #20, sp
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    4

     165              ;                       mov sp, t0
     166              ;                       sub #1, t0
     167              ;                       mov t0, ssp
     168              
     169                                      ; move contents of SP into address of current TCB
     170              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     171              
     172              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     173              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     174              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     175              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     176              ;                       mov dbl (*ar7+), xssp
     177              
     178              ;                       mov sp, t0              ; we've already saved t0
     179              ;                       add #1, t0
     180              ;                       mov t0, ssp
     181              ; ??
     182              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     183              
     184              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     185              ;                       mov al, @sp
     186              ;                       movl  *xar6, acc        
     187              ;;                      mov  ar0, @sp
     188              ;;                      mov  @ar6, alxd
     189              ;;                      mov  ar0, @sp
     190              ;;                      movl 0(xar6), sp
     191              ;                       EDIS
     192              ;                       NASP
     193              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     194              ;                       NOP
     195                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     196                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     197                                      nop
     198                                      nop
     199                                      nop
     200                                      .endm
     201              
     202              portRESTORE_CONTEXT .macro
     203              ;                       .C54CM_on
     204              ;                       .CPL_on
     205              ;                       .ARMS_off
     206                                      .align 4
     207              
     208              ; Restore context & return
     209                                      ;CONTEXT_RESTORE
     210              ;                       ASP
     211              ;                       EALLOW
     212              ;                       nop
     213              ;                       nop
     214              ;                       nop
     215              ;                       nop
     216                                      bclr C54CM    
     217              ;               xssp = dbl(*(#_pxCurrentTCB))
     218              ;               xsp  = dbl(*(#_pxCurrentTCB))
     219                                      mov xar7, dbl (*(#_save_xar7))  
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    5

     220              
     221                                      aadd #-3, sp
     222              ;            aadd #-3, xsp
     223              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     224              ;            BCC $1,TC1 ; |216|
     225                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     226                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     227              ;            B $4
     228              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     229              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     230              
     231              ;                       aadd #-3, sp
     232              ;$1
     233              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     234              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     235              ;$4
     236                                      mov xsp, xar7
     237                                      mov xssp, xar6
     238              
     239                                      mov dbl (*(#_pxCurrentTCB)), xar5                       
     240              
     241                                      mov dbl (*ar5), xar4                            ; xsp contains our TCB now
     242                                      mov dbl (*ar5(#2)), xar3                        
     243                                      
     244                                      mov *ar4, ar2
     245                                      mov *ar3, ar1
     246              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     247                                      mov ar2, *ar7
     248                                      mov ar1, *ar6
     249                                      
     250              
     251              
     252              
     253              ;                       mov #0, ssp     
     254              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     255              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     256                                      ; 32-bit mode - will act on SP and SSP:
     257              ;                       'fix-up' current SP and SSP - is this dangerous????
     258              ;                       aadd #-3, sp
     259              ;;                      mov *ar7, *sp
     260              ;                       mov dbl (*ar7), ar6
     261              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     262              ;                       mov *ar7(#2), *ssp                      
     263              ;                       POP mmap(ST3_55)
     264              ;                       pshboth xar7                            ; should increment both
     265                                      mov mmap(ST1_55), ar7
     266                                      and #0xf7ff, ar7                        ; <here>#0800h
     267                                      mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     268                                      mov mmap(ST2_55), ar7
     269                                      mov ar7, *sp(#2)
     270              
     271                                      mov ssp, ar7
     272                                      mov mmap(ST0_55), ar6
     273                                      mov ar6, *ar7(#1)
     274                                      mov mmap(ST0_55), ar6   ; needs to be DBSTAT
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    6

     275                                      mov ar6, *ar7(#2)
     276              
     277                                      mov dbl (*(#_pxCurrentTCB)), xar7
     278              
     279                                      mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     280                                      mov dbl (*ar7(#2)), xssp                        
     281              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     282              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     283              
     284              ;                       mov mmap(ST0_55), *ssp(#1)
     285              ;                       mov mmap(STO_55), *ssp(#2)
     286              ;                       mov mmap(ST1_55), *sp(#1)
     287              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     288              ;                       mov *ar7, t0
     289              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     290              ;                       mov *ar7(#2), t0
     291              ;                       mov t0, *ssp(#0)                        
     292              
     293              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     294              ; what about xssp?
     295              ;                       mov xar6, xsp
     296              ;                       mov xssp, xar7
     297              ;                       add #1, ar7
     298              ;                       mov xar7, xsp
     299              ;                       mov sp, t0
     300              ;                       mov ssp, t1
     301              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     302              ;                       ar0 = *ar6
     303              ;                       xssp = xar0
     304              ;                       mov *xar6, xar0
     305              ;                       mov xar0, xssp  ; stack now points to our TCB
     306              ;;                      mov sp, *ar6
     307              ;;                      mov sp, ar0
     308              ;;                      mov sp, *_pxCurrentTCB
     309              ;;                      clr ar0
     310              ;;                      mov ar0, @xar6
     311              ;;                      mov sp, AR0
     312              ;;                      add sp, xar6
     313              
     314              ;;                      pshboth xar7
     315              ;;                      pshboth xar6
     316              ;;                      pshboth xar5
     317              
     318              ;;                      popboth xar5
     319              ;;                      popboth xar6
     320              ;;                      popboth xar7
     321              
     322              ;;;                     mov *sp(#1), ar7 
     323              ;                       mov dbl(*sp(#1)), ar7
     324              ;;;                     mov  ar7, mmap(ST1_55)
     325                                      mov *sp(#2), ar7
     326                                      mov ar7, mmap(ST2_55)
     327                                      mov ssp, ar7
     328                                      mov *ar7(#1), ar6
     329                                      mov ar6, mmap(ST0_55)
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    7

     330                                      mov *ar7(#2), ar6
     331                                      mov ar7, mmap(ST0_55)
     332              ;                       mov *ssp(#2), ar7
     333              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     334              
     335                                      mov dbl(*sp(#4)), xar7
     336              ;                       mov *sp(#1), ar7
     337                                      mov xar7, dbl(*(#_usCriticalNesting))   
     338              
     339                                      mov dbl(*sp(#6)), xar6
     340              ;                       mov *sp(#3), ar6
     341              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     342                                      mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
     343              
     344              ;                       POP XT
     345                              ;-- Comment these to save cycles ---
     346                                      mov dbl(*sp(#8)), xar7
     347                                      mov *sp(#7), ar7
     348              ;                       mov *sp(#5), ar7
     349              ;                       mov dbl(*sp(#0)), hi(ar7)
     350              ;                       mov (*sp(#0)), lo(ar7)
     351                                      mov dbl(*sp(#10)), xar6
     352                                      mov *sp(#9), ar6
     353                                      mov dbl(*sp(#12)), xar5
     354                                      mov *sp(#11), ar5
     355              ;; pvPararmeters currently here - needs to be verified --- jcw
     356                                      mov dbl(*sp(#14)), xar4
     357                                      mov *sp(#13), ar4
     358                                      mov dbl(*sp(#16)), xar3
     359                                      mov *sp(#15), ar3
     360                                      mov dbl(*sp(#18)), xar2
     361                                      mov *sp(#17), ar2
     362                                      mov dbl(*sp(#20)), xar1
     363                                      mov *sp(#19), ar1
     364                                      mov dbl(*sp(#22)), xar0
     365                                      mov *sp(#21), ar0
     366              
     367                                      mov *sp(#23), t3
     368                                      mov *sp(#24), t2
     369                                      mov *sp(#25), t1
     370                                      mov *sp(#26), t0
     371              
     372              ;                       mov dbl(*sp(#21)), *xssp(#0)
     373              ;                       mov *sp(#21), *ssp
     374              ;                       mov *sp(#21), RETA
     375              ; need to move 23-16 to XSSP contents
     376              ;                       mov xar0, dbl (*(#_save_xar7))
     377              ;                       mov ssp, ar0
     378              ;                       mov #0, ssp 
     379              ;                       mov xssp, xar0
     380              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     381              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     382                      ;               add #1, xssp            ; 32-bit return address pointer
     383                      ;               amar *xssp+
     384              ;                       mov sp, t0
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    8

     385              ;                       add #1, t0
     386              ;                       mov t0, ssp
     387              ;                       incr ssp
     388              ;                       asub #20, ar0
     389              ;                       mov xar0, xssp
     390              ;                       mov ar0, ssp
     391              ;                       mov ar0, 
     392              ;;                      mov *sp(#1), t0
     393              ;;                      mov *sp(#3), t3         ; ST0
     394              ;;                      mov *sp(#4), t2         ; DBSTAT
     395              ;;                      mov t3, *ar0(#2)
     396                      ;;              mov t2, *ar0(#1)
     397              ;;                      mov t0, *ar0(#0)
     398              
     399              ;;                      mov *sp(#5), t0
     400              ;;                      mov *sp(#6), t1
     401              ;;                      mov *sp(#7), t2
     402                      ;;              mov *sp(#8), t3
     403              
     404              
     405              
     406              ; restore ar0
     407              ;                       mov dbl(*sp(#-2)), xar0
     408              ;                       mov #-1, ar0
     409              ;;                      mov dbl (*(#_save_xar7)), xar0
     410              ;;
     411              ;;                      mov sp, t0
     412              ;;                      add #1, t0
     413              ;;                      mov t0, ssp
     414              
     415              ;                       mov *sp(#3), *(#00004ch+#1)
     416              
     417              ;                       mov t3, *ssp(#1) 
     418              ;                       mov t2, *ssp(#2)
     419              
     420              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     421              ;;                      mov t3, *(ssp(#0))
     422              ;                       mov t3, *ssp
     423              ;                       mov *sp(#3), t3 ; 
     424              ;                       mov t3, *ssp(#1)
     425              ;;                      mov *sp(#21), PC        
     426              
     427              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     428              ;                       mov dbl(xsp), dbl(lcrpc)
     429              ;                       popboth XAR7
     430              ;                       add #1, sp
     431              ;                       add #1, ssp
     432              ;                       add #2, t0
     433              ;                       add #2, t1
     434              ;                       mov t0, sp
     435              ;                       mov t1, ssp
     436              ;                       popboth XAR6
     437              ;                       add #2, t0
     438              ;                       add #2, t1
     439              ;                       mov t0, sp
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE    9

     440              ;                       mov t1, ssp
     441              ;                       popboth XAR5
     442              ;                       add #2, t0
     443              ;                       add #2, t1
     444              ;                       mov t0, sp
     445              ;                       mov t1, ssp
     446                              ;-----------------------------------
     447              ;                       popboth XAR4
     448              ;                       add #2, t0
     449              ;                       add #2, t1
     450              ;                       mov t0, sp
     451              ;                       mov t1, ssp
     452              ;                       popboth XAR3
     453              ;                       add #2, t0
     454              ;                       add #2, t1
     455              ;                       mov t0, sp
     456              ;                       mov t1, ssp
     457              ;                       popboth XAR2
     458              ;                       add #2, t0
     459              ;                       add #2, t1
     460              ;                       mov t0, sp
     461              ;                       mov t1, ssp
     462              ;                       popboth XAR1
     463              ;                       add #2, t0
     464              ;                       add #2, t1
     465              ;                       mov t0, sp
     466              ;                       mov t1, ssp
     467              ;                       popboth XAR0
     468              ;                       add #2, t0
     469              ;                       add #2, t1
     470              ;                       mov t0, sp
     471              ;                       mov t1, ssp
     472              ;                       EDIS
     473              ;                       NASP    ; Un-align stack pointer
     474              ;;                      pop mmap(ST3_55)
     475              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     476              ;            BCC $2,TC1 ; |216|
     477                                      mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
     478                                      mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
     479              ;                       B $3
     480              ;$2
     481              ;            MOV #0, *(#_first_flag) ; |217|
     482              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     483              ;                       mov dbl (*(#_first_save_xssp)), xssp
     484              ;$3
     485              ;                       aadd #-3, sp
     486                                      bclr INTM               ; enable interrupts
     487              ;                       aadd #1, sp
     488                                      RETI
     489              ;                       mov #1860h, ssp
     490                                      nop
     491                                      nop
     492              ;                       nop
     493                                      .endm
     494              ; /*-----------------------------------------------------------*/
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   10

     495              
     496              ; /*
     497              ; * The RTOS tick ISR.
     498              ; *
     499              ; * If the cooperative scheduler is in use this simply increments the tick
     500              ; * count.
     501              ; *
     502              ; * If the preemptive scheduler is in use a context switch can also occur.
     503              ; */
     504              
     505              
     506 000000       _xPortStartScheduler:
     507              
     508              ;                /* Setup the hardware to generate the tick.  Interrupts are disabled
     509              ;                when this function is called. */
     510 000000 4EFF                 aadd #-1, sp
     511 000002 6C00                 call    #_prvSetupTimerInterrupt
         000004 0000!
     512              
     513              ;                /* Restore the context of the first task that is going to run. */
     514              
     515              ;;              INTR INT14      ; force interrupt - just for debug purposes.
     516              
     517              ;;            psh mmap(ST3_55)
     518 000006 EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         000008 F500 
         00000a 0000!
     519 00000c EB31                          mov xar6, dbl (*(#_save_xar6))                  ; save xar6 
         00000e E500 
         000010 0000!
     520              
     521 000012 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000014 FF00 
         000016 0000!
     522              ; does this *always* work?
     523 000018 EDE1                          mov dbl (*ar7), xar6
         00001a EF   
     524              ;                       mov xsp, dbl (*(#_first_save_xsp))              ; (init) xsp contains our TCB now
     525 00001b EB31                          mov xsp, dbl (*(#_save_xsp))            ; (init) xsp contains our TCB now
         00001d 4500 
         00001f 0000!
     526 000021 EDE3                          mov dbl (*ar7+), xar6
         000023 EF   
     527              ;                       mov xssp, dbl (*(#_first_save_xssp))
     528 000024 EB31                          mov xssp, dbl (*(#_save_xssp))
         000026 5500 
         000028 0000!
     529              ;                       mov #1, *(#_first_flag)
     530              
     531              ; what about xssp here?
     532 00002a ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         00002c FF00 
         00002e 0000!
     533 000030 ED31                          mov dbl (*(#_save_xar6)), xar6                  ; restore xar6
         000032 EF00 
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   11

         000034 0000!
     534 000036 4E01                          aadd #1, sp
     535 ****** MACRO             portRESTORE_CONTEXT
     535              ;                       .C54CM_on
     535              ;                       .CPL_on
     535              ;                       .ARMS_off
     535                                      .align 4
     535              
     535              ; Restore context & return
     535                                      ;CONTEXT_RESTORE
     535              ;                       ASP
     535              ;                       EALLOW
     535              ;                       nop
     535              ;                       nop
     535              ;                       nop
     535              ;                       nop
     535 000038 4652                          bclr C54CM    
     535              ;               xssp = dbl(*(#_pxCurrentTCB))
     535              ;               xsp  = dbl(*(#_pxCurrentTCB))
     535 00003a EB31                          mov xar7, dbl (*(#_save_xar7))  
         00003c F500 
         00003e 0000!
     535              
     535 000040 4EFD                          aadd #-3, sp
     535              ;            aadd #-3, xsp
     535              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     535              ;            BCC $1,TC1 ; |216|
     535 000042 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000044 4F00 
         000046 0000!
     535 000048 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00004a 5F00 
         00004c 0000!
     535              ;            B $4
     535              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     535              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     535              
     535              ;                       aadd #-3, sp
     535              ;$1
     535              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     535              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     535              ;$4
     535 00004e 904F                          mov xsp, xar7
     535 000050 905E                          mov xssp, xar6
     535              
     535 000052 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000054 DF00 
         000056 0000!
     535              
     535 000058 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         00005a CF   
     535 00005b EDAD                          mov dbl (*ar5(#2)), xar3                        
         00005d BF00 
         00005f 02   
     535                                      
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   12

     535 000060 AA81                          mov *ar4, ar2
     535 000062 A961                          mov *ar3, ar1
     535              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     535 000064 CAE1                          mov ar2, *ar7
     535 000066 C9C1                          mov ar1, *ar6
     535                                      
     535              
     535              
     535              
     535              ;                       mov #0, ssp     
     535              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     535              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     535                                      ; 32-bit mode - will act on SP and SSP:
     535              ;                       'fix-up' current SP and SSP - is this dangerous????
     535              ;                       aadd #-3, sp
     535              ;;                      mov *ar7, *sp
     535              ;                       mov dbl (*ar7), ar6
     535              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     535              ;                       mov *ar7(#2), *ssp                      
     535              ;                       POP mmap(ST3_55)
     535              ;                       pshboth xar7                            ; should increment both
     535 000068 AF06                          mov mmap(ST1_55), ar7
         00006a 98   
     535 00006b 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         00006d FFFF 
     535 00006f CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     535 000071 AF96                          mov mmap(ST2_55), ar7
         000073 98   
     535 000074 CF04                          mov ar7, *sp(#2)
     535              
     535 000076 449F                          mov ssp, ar7
     535 000078 AE04                          mov mmap(ST0_55), ar6
         00007a 98   
     535 00007b CEED                          mov ar6, *ar7(#1)
         00007d 0001 
     535 00007f AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000081 98   
     535 000082 CEED                          mov ar6, *ar7(#2)
         000084 0002 
     535              
     535 000086 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000088 FF00 
         00008a 0000!
     535              
     535 00008c EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00008e 4F   
     535 00008f EDED                          mov dbl (*ar7(#2)), xssp                        
         000091 5F00 
         000093 02   
     535              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     535              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     535              
     535              ;                       mov mmap(ST0_55), *ssp(#1)
     535              ;                       mov mmap(STO_55), *ssp(#2)
     535              ;                       mov mmap(ST1_55), *sp(#1)
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   13

     535              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     535              ;                       mov *ar7, t0
     535              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     535              ;                       mov *ar7(#2), t0
     535              ;                       mov t0, *ssp(#0)                        
     535              
     535              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     535              ; what about xssp?
     535              ;                       mov xar6, xsp
     535              ;                       mov xssp, xar7
     535              ;                       add #1, ar7
     535              ;                       mov xar7, xsp
     535              ;                       mov sp, t0
     535              ;                       mov ssp, t1
     535              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     535              ;                       ar0 = *ar6
     535              ;                       xssp = xar0
     535              ;                       mov *xar6, xar0
     535              ;                       mov xar0, xssp  ; stack now points to our TCB
     535              ;;                      mov sp, *ar6
     535              ;;                      mov sp, ar0
     535              ;;                      mov sp, *_pxCurrentTCB
     535              ;;                      clr ar0
     535              ;;                      mov ar0, @xar6
     535              ;;                      mov sp, AR0
     535              ;;                      add sp, xar6
     535              
     535              ;;                      pshboth xar7
     535              ;;                      pshboth xar6
     535              ;;                      pshboth xar5
     535              
     535              ;;                      popboth xar5
     535              ;;                      popboth xar6
     535              ;;                      popboth xar7
     535              
     535              ;;;                     mov *sp(#1), ar7 
     535              ;                       mov dbl(*sp(#1)), ar7
     535              ;;;                     mov  ar7, mmap(ST1_55)
     535 000094 AF04                          mov *sp(#2), ar7
     535 000096 CF96                          mov ar7, mmap(ST2_55)
         000098 98   
     535 000099 449F                          mov ssp, ar7
     535 00009b AEED                          mov *ar7(#1), ar6
         00009d 0001 
     535 00009f CE04                          mov ar6, mmap(ST0_55)
         0000a1 98   
     535 0000a2 AEED                          mov *ar7(#2), ar6
         0000a4 0002 
     535 0000a6 CF04                          mov ar7, mmap(ST0_55)
         0000a8 98   
     535              ;                       mov *ssp(#2), ar7
     535              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     535              
     535 0000a9 ED08                          mov dbl(*sp(#4)), xar7
         0000ab FF   
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   14

     535              ;                       mov *sp(#1), ar7
     535 0000ac EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         0000ae F500 
         0000b0 0000!
     535              
     535 0000b2 ED0C                          mov dbl(*sp(#6)), xar6
         0000b4 EF   
     535              ;                       mov *sp(#3), ar6
     535              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     535 0000b5 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0000b7 E500 
         0000b9 0000!
     535              
     535              ;                       POP XT
     535                              ;-- Comment these to save cycles ---
     535 0000bb ED10                          mov dbl(*sp(#8)), xar7
         0000bd FF   
     535 0000be AF0E                          mov *sp(#7), ar7
     535              ;                       mov *sp(#5), ar7
     535              ;                       mov dbl(*sp(#0)), hi(ar7)
     535              ;                       mov (*sp(#0)), lo(ar7)
     535 0000c0 ED14                          mov dbl(*sp(#10)), xar6
         0000c2 EF   
     535 0000c3 AE12                          mov *sp(#9), ar6
     535 0000c5 ED18                          mov dbl(*sp(#12)), xar5
         0000c7 DF   
     535 0000c8 AD16                          mov *sp(#11), ar5
     535              ;; pvPararmeters currently here - needs to be verified --- jcw
     535 0000ca ED1C                          mov dbl(*sp(#14)), xar4
         0000cc CF   
     535 0000cd AC1A                          mov *sp(#13), ar4
     535 0000cf ED20                          mov dbl(*sp(#16)), xar3
         0000d1 BF   
     535 0000d2 AB1E                          mov *sp(#15), ar3
     535 0000d4 ED24                          mov dbl(*sp(#18)), xar2
         0000d6 AF   
     535 0000d7 AA22                          mov *sp(#17), ar2
     535 0000d9 ED28                          mov dbl(*sp(#20)), xar1
         0000db 9F   
     535 0000dc A926                          mov *sp(#19), ar1
     535 0000de ED2C                          mov dbl(*sp(#22)), xar0
         0000e0 8F   
     535 0000e1 A82A                          mov *sp(#21), ar0
     535              
     535 0000e3 A72E                          mov *sp(#23), t3
     535 0000e5 A630                          mov *sp(#24), t2
     535 0000e7 A532                          mov *sp(#25), t1
     535 0000e9 A434                          mov *sp(#26), t0
     535              
     535              ;                       mov dbl(*sp(#21)), *xssp(#0)
     535              ;                       mov *sp(#21), *ssp
     535              ;                       mov *sp(#21), RETA
     535              ; need to move 23-16 to XSSP contents
     535              ;                       mov xar0, dbl (*(#_save_xar7))
     535              ;                       mov ssp, ar0
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   15

     535              ;                       mov #0, ssp 
     535              ;                       mov xssp, xar0
     535              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     535              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     535                      ;               add #1, xssp            ; 32-bit return address pointer
     535                      ;               amar *xssp+
     535              ;                       mov sp, t0
     535              ;                       add #1, t0
     535              ;                       mov t0, ssp
     535              ;                       incr ssp
     535              ;                       asub #20, ar0
     535              ;                       mov xar0, xssp
     535              ;                       mov ar0, ssp
     535              ;                       mov ar0, 
     535              ;;                      mov *sp(#1), t0
     535              ;;                      mov *sp(#3), t3         ; ST0
     535              ;;                      mov *sp(#4), t2         ; DBSTAT
     535              ;;                      mov t3, *ar0(#2)
     535                      ;;              mov t2, *ar0(#1)
     535              ;;                      mov t0, *ar0(#0)
     535              
     535              ;;                      mov *sp(#5), t0
     535              ;;                      mov *sp(#6), t1
     535              ;;                      mov *sp(#7), t2
     535                      ;;              mov *sp(#8), t3
     535              
     535              
     535              
     535              ; restore ar0
     535              ;                       mov dbl(*sp(#-2)), xar0
     535              ;                       mov #-1, ar0
     535              ;;                      mov dbl (*(#_save_xar7)), xar0
     535              ;;
     535              ;;                      mov sp, t0
     535              ;;                      add #1, t0
     535              ;;                      mov t0, ssp
     535              
     535              ;                       mov *sp(#3), *(#00004ch+#1)
     535              
     535              ;                       mov t3, *ssp(#1) 
     535              ;                       mov t2, *ssp(#2)
     535              
     535              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     535              ;;                      mov t3, *(ssp(#0))
     535              ;                       mov t3, *ssp
     535              ;                       mov *sp(#3), t3 ; 
     535              ;                       mov t3, *ssp(#1)
     535              ;;                      mov *sp(#21), PC        
     535              
     535              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     535              ;                       mov dbl(xsp), dbl(lcrpc)
     535              ;                       popboth XAR7
     535              ;                       add #1, sp
     535              ;                       add #1, ssp
     535              ;                       add #2, t0
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   16

     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535              ;                       popboth XAR6
     535              ;                       add #2, t0
     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535              ;                       popboth XAR5
     535              ;                       add #2, t0
     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535                              ;-----------------------------------
     535              ;                       popboth XAR4
     535              ;                       add #2, t0
     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535              ;                       popboth XAR3
     535              ;                       add #2, t0
     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535              ;                       popboth XAR2
     535              ;                       add #2, t0
     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535              ;                       popboth XAR1
     535              ;                       add #2, t0
     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535              ;                       popboth XAR0
     535              ;                       add #2, t0
     535              ;                       add #2, t1
     535              ;                       mov t0, sp
     535              ;                       mov t1, ssp
     535              ;                       EDIS
     535              ;                       NASP    ; Un-align stack pointer
     535              ;;                      pop mmap(ST3_55)
     535              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     535              ;            BCC $2,TC1 ; |216|
     535 0000eb ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0000ed 4F00 
         0000ef 0000!
     535 0000f1 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0000f3 5F00 
         0000f5 0000!
     535              ;                       B $3
     535              ;$2
     535              ;            MOV #0, *(#_first_flag) ; |217|
     535              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     535              ;                       mov dbl (*(#_first_save_xssp)), xssp
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   17

     535              ;$3
     535              ;                       aadd #-3, sp
     535 0000f7 46B2                          bclr INTM               ; enable interrupts
     535              ;                       aadd #1, sp
     535 0000f9 4805                          RETI
     535              ;                       mov #1860h, ssp
     535 0000fb 20                            nop
     535 0000fc 20                            nop
     535              ;                       nop
     536              
     537              
     538 0000fd       _vTickISR:              ; the timer ISR is aggregated for this processor architecture
     539               ;               bclr IFR0.IF4          ; enable interrupts
     540                              
     541 0000fd 4EFF                  aadd #-1, sp
     542 0000ff E651                  MOV #0, *port(#6166) ; |119|
         000101 0018 
         000103 16   
     543 000104 F402                  AND #0x0010, mmap(@IFR0)
         000106 0010 
         000108 98   
     544              ;               bset INTM
     545 000109 A951              MOV *port(#7188), AR1 ; |68|
         00010b 1C14 
     546 00010d EC00          BSET @#0, AR1 ; |68|
         00010f 90   
     547 000110 6D09          BCC $1,AR1 == #0 ; |68|
         000112 0096 
     548              ;        AND #0x0010, *(#1)
     549              
     550              ;               bset INTM               ; disable interrupts
     551                              .if configUSE_TICK_CTR == 1
     552 000114 F731                  add #1, *(#_tickIRQctr)
         000116 0001 
         000118 0000 
         00011a 00!  
     553                              .endif
     554              ;;              psh mmap(ST3_55)
     555 ****** MACRO         portSAVE_CONTEXT
     555              ;                       ;CONTEXT_SAVE
     555              ;                       ASP  ; Align Stack Pointer
     555              ;                       CLRC       OVM,PAGE0
     555              ;                       CLRC       AMODE
     555              ;                       EALLOW
     555              
     555              ;                       bclr C54CM      ; temp - until we figure out what is setting this
     555              
     555 00011b 46B3                          bset INTM               ; disable interrupts
     555              
     555              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     555              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     555                                      
     555              ;                       pshboth xar7
     555              ;                       pshboth xar6
     555              ;                       pshboth xar5
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   18

     555              
     555 00011d EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         00011f F500 
         000121 0000!
     555              
     555 000123 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000125 FF00 
         000127 0000!
     555              ; does this *always* work?
     555 000129 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00012b 4F   
     555 00012c EDED                          mov dbl (*ar7(#2)), xssp                        
         00012e 5F00 
         000130 02   
     555              ;; what about xssp here?
     555              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     555              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     555              
     555 000131 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         000133 FF00 
         000135 0000!
     555              
     555 000137 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         000139 F5   
     555 00013a CF0E                          mov ar7, *sp(#7)
     555              
     555 00013c EB14                          mov xar6, dbl(*sp(#10))
         00013e E5   
     555 00013f CE12                          mov ar6, *sp(#9)
     555              
     555 000141 EB18                          mov xar5, dbl(*sp(#12))
         000143 D5   
     555 000144 CD16                          mov ar5, *sp(#11)
     555              
     555 000146 EB1C                          mov xar4, dbl(*sp(#14))
         000148 C5   
     555 000149 CC1A                          mov ar4, *sp(#13)
     555              
     555 00014b EB20                          mov xar3, dbl(*sp(#16))
         00014d B5   
     555 00014e CB1E                          mov ar3, *sp(#15)
     555              
     555 000150 EB24                          mov xar2, dbl(*sp(#18))
         000152 A5   
     555 000153 CA22                          mov ar2, *sp(#17)
     555              
     555 000155 EB28                          mov xar1, dbl(*sp(#20))
         000157 95   
     555 000158 C926                          mov ar1, *sp(#19)
     555              
     555 00015a EB2C                          mov xar0, dbl(*sp(#22))
         00015c 85   
     555 00015d C82A                          mov ar0, *sp(#21)
     555              
     555 00015f C72E                          mov t3, *sp(#23)
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   19

     555 000161 C630                          mov t2, *sp(#24)
     555 000163 C532                          mov t1, *sp(#25)
     555 000165 C434                          mov t0, *sp(#26)
     555              
     555              ;;                      mov mmap(ST0_55), t0
     555              ; - this is ok - we are not pushing - it's a relative stack frame
     555              ;                       mov t0, *sp(#25)
     555              ;;                      mov t0, *sp(#23)
     555              ;;                      mov mmap(ST1_55), t1
     555              ;                       mov t1, *sp(#26)                ; stomping on own mem
     555              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     555              ;;                      mov mmap(ST2_55), t2
     555              ;;                      mov t2, *sp(#22)
     555              ;                       mov t2, *sp(#27)
     555              ;;                      mov mmap(ST2_55), t3
     555              ;                       mov t3, *sp(#28)
     555              ;;                      mov t3, *sp(#24)
     555              
     555              ;                       PSH dbl(AR0) ; 32-bit
     555              ;                       PSH dbl(AR1) 
     555              ;                       PSH dbl(AR2) ; 32-bit
     555              ;                       PUSH XAR3 ; 32-bit
     555              ;                       PUSH XAR4 ; 32-bit
     555                              ;-- Comment these to save cycles --------
     555              ;                       PUSH XAR5 ; 32-bit
     555              ;                       PUSH XAR6 ; 32-bit
     555              ;                       PUSH XAR7 ; 32-bit
     555                              ;----------------------------------------
     555              
     555              ;                       PUSH XT   ; 32-bit
     555              
     555              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     555              ;                       push xar6 ; portFLAGS_INT_ENABLED
     555              
     555 000167 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         000169 EF00 
         00016b 0000!
     555 00016d EB0C                          mov xar6, dbl(*sp(#6))
         00016f E5   
     555                                      
     555              
     555              ;                       movl xar7, @_usCriticalNesting
     555              ;                       push xar7
     555 000170 ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         000172 FF00 
         000174 0000!
     555 000176 EB08                          mov xar7, dbl(*sp(#4))
         000178 F5   
     555              
     555 000179 AF06                          mov mmap(ST1_55), ar7
         00017b 98   
     555 00017c CF02                          mov ar7, *sp(#1)
     555 00017e AF96                          mov  mmap(ST2_55), ar7
         000180 98   
     555 000181 CF04                          mov ar7, *sp(#2)
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   20

     555              
     555 000183 449F                          mov ssp, ar7
     555 000185 AE04                          mov mmap(ST0_55), ar6
         000187 98   
     555 000188 CEED                          mov ar6, *ar7(#1)
         00018a 0001 
     555 00018c AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         00018e 98   
     555 00018f CEED                          mov ar6, *ar7(#2)
         000191 0002 
     555              ;                       mov ar7, mmap(ST0_55)
     555              ;                       mov *ssp(#2), ar7
     555              
     555              ; fix up
     555              ;                       aadd #20, sp
     555              ;                       mov sp, t0
     555              ;                       sub #1, t0
     555              ;                       mov t0, ssp
     555              
     555                                      ; move contents of SP into address of current TCB
     555              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     555              
     555              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     555              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     555              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     555              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     555              ;                       mov dbl (*ar7+), xssp
     555              
     555              ;                       mov sp, t0              ; we've already saved t0
     555              ;                       add #1, t0
     555              ;                       mov t0, ssp
     555              ; ??
     555              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     555              
     555              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     555              ;                       mov al, @sp
     555              ;                       movl  *xar6, acc        
     555              ;;                      mov  ar0, @sp
     555              ;;                      mov  @ar6, alxd
     555              ;;                      mov  ar0, @sp
     555              ;;                      movl 0(xar6), sp
     555              ;                       EDIS
     555              ;                       NASP
     555              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     555              ;                       NOP
     555 000193 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000195 4F00 
         000197 0000!
     555 000199 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00019b 5F00 
         00019d 0000!
     555 00019f 20                            nop
     555 0001a0 20                            nop
     555 0001a1 20                            nop
     556              
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   21

     557 0001a2 6C00          call     #_xTaskIncrementTick
         0001a4 0000!
     558              
     559                      .if configUSE_PREEMPTION == 1
     560              ;        mov xsp, dbl (*(#_save_xsp))                   ; save xsp
     561              ;           mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     562 0001a6 6C00          call    #_vTaskSwitchContext
         0001a8 0000!
     563                      .endif
     564 0001aa       $1:
     565              ;               bclr INTM
     566 0001aa E651                  mov #1, *port(#6166) ; |127|
         0001ac 0118 
         0001ae 16   
     567 0001af E651                  MOV #0, *port(#6294) ; |92|
         0001b1 0018 
         0001b3 96   
     568              ;               or #0x0001, *port(#7188) ; |130|
     569 0001b4 F551          OR #0x0007, *port(#7188) ; |100|
         0001b6 0007 
         0001b8 1C14 
     570 0001ba 4E01                  aadd #1, sp
     571 ****** MACRO         portRESTORE_CONTEXT
     571              ;                       .C54CM_on
     571              ;                       .CPL_on
     571              ;                       .ARMS_off
     571                                      .align 4
     571              
     571              ; Restore context & return
     571                                      ;CONTEXT_RESTORE
     571              ;                       ASP
     571              ;                       EALLOW
     571              ;                       nop
     571              ;                       nop
     571              ;                       nop
     571              ;                       nop
     571 0001bc 4652                          bclr C54CM    
     571              ;               xssp = dbl(*(#_pxCurrentTCB))
     571              ;               xsp  = dbl(*(#_pxCurrentTCB))
     571 0001be EB31                          mov xar7, dbl (*(#_save_xar7))  
         0001c0 F500 
         0001c2 0000!
     571              
     571 0001c4 4EFD                          aadd #-3, sp
     571              ;            aadd #-3, xsp
     571              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     571              ;            BCC $1,TC1 ; |216|
     571 0001c6 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0001c8 4F00 
         0001ca 0000!
     571 0001cc ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0001ce 5F00 
         0001d0 0000!
     571              ;            B $4
     571              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   22

     571              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     571              
     571              ;                       aadd #-3, sp
     571              ;$1
     571              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     571              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     571              ;$4
     571 0001d2 904F                          mov xsp, xar7
     571 0001d4 905E                          mov xssp, xar6
     571              
     571 0001d6 ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         0001d8 DF00 
         0001da 0000!
     571              
     571 0001dc EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         0001de CF   
     571 0001df EDAD                          mov dbl (*ar5(#2)), xar3                        
         0001e1 BF00 
         0001e3 02   
     571                                      
     571 0001e4 AA81                          mov *ar4, ar2
     571 0001e6 A961                          mov *ar3, ar1
     571              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     571 0001e8 CAE1                          mov ar2, *ar7
     571 0001ea C9C1                          mov ar1, *ar6
     571                                      
     571              
     571              
     571              
     571              ;                       mov #0, ssp     
     571              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     571              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     571                                      ; 32-bit mode - will act on SP and SSP:
     571              ;                       'fix-up' current SP and SSP - is this dangerous????
     571              ;                       aadd #-3, sp
     571              ;;                      mov *ar7, *sp
     571              ;                       mov dbl (*ar7), ar6
     571              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     571              ;                       mov *ar7(#2), *ssp                      
     571              ;                       POP mmap(ST3_55)
     571              ;                       pshboth xar7                            ; should increment both
     571 0001ec AF06                          mov mmap(ST1_55), ar7
         0001ee 98   
     571 0001ef 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         0001f1 FFFF 
     571 0001f3 CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     571 0001f5 AF96                          mov mmap(ST2_55), ar7
         0001f7 98   
     571 0001f8 CF04                          mov ar7, *sp(#2)
     571              
     571 0001fa 449F                          mov ssp, ar7
     571 0001fc AE04                          mov mmap(ST0_55), ar6
         0001fe 98   
     571 0001ff CEED                          mov ar6, *ar7(#1)
         000201 0001 
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   23

     571 000203 AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         000205 98   
     571 000206 CEED                          mov ar6, *ar7(#2)
         000208 0002 
     571              
     571 00020a ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         00020c FF00 
         00020e 0000!
     571              
     571 000210 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         000212 4F   
     571 000213 EDED                          mov dbl (*ar7(#2)), xssp                        
         000215 5F00 
         000217 02   
     571              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     571              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     571              
     571              ;                       mov mmap(ST0_55), *ssp(#1)
     571              ;                       mov mmap(STO_55), *ssp(#2)
     571              ;                       mov mmap(ST1_55), *sp(#1)
     571              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     571              ;                       mov *ar7, t0
     571              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     571              ;                       mov *ar7(#2), t0
     571              ;                       mov t0, *ssp(#0)                        
     571              
     571              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     571              ; what about xssp?
     571              ;                       mov xar6, xsp
     571              ;                       mov xssp, xar7
     571              ;                       add #1, ar7
     571              ;                       mov xar7, xsp
     571              ;                       mov sp, t0
     571              ;                       mov ssp, t1
     571              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     571              ;                       ar0 = *ar6
     571              ;                       xssp = xar0
     571              ;                       mov *xar6, xar0
     571              ;                       mov xar0, xssp  ; stack now points to our TCB
     571              ;;                      mov sp, *ar6
     571              ;;                      mov sp, ar0
     571              ;;                      mov sp, *_pxCurrentTCB
     571              ;;                      clr ar0
     571              ;;                      mov ar0, @xar6
     571              ;;                      mov sp, AR0
     571              ;;                      add sp, xar6
     571              
     571              ;;                      pshboth xar7
     571              ;;                      pshboth xar6
     571              ;;                      pshboth xar5
     571              
     571              ;;                      popboth xar5
     571              ;;                      popboth xar6
     571              ;;                      popboth xar7
     571              
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   24

     571              ;;;                     mov *sp(#1), ar7 
     571              ;                       mov dbl(*sp(#1)), ar7
     571              ;;;                     mov  ar7, mmap(ST1_55)
     571 000218 AF04                          mov *sp(#2), ar7
     571 00021a CF96                          mov ar7, mmap(ST2_55)
         00021c 98   
     571 00021d 449F                          mov ssp, ar7
     571 00021f AEED                          mov *ar7(#1), ar6
         000221 0001 
     571 000223 CE04                          mov ar6, mmap(ST0_55)
         000225 98   
     571 000226 AEED                          mov *ar7(#2), ar6
         000228 0002 
     571 00022a CF04                          mov ar7, mmap(ST0_55)
         00022c 98   
     571              ;                       mov *ssp(#2), ar7
     571              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     571              
     571 00022d ED08                          mov dbl(*sp(#4)), xar7
         00022f FF   
     571              ;                       mov *sp(#1), ar7
     571 000230 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         000232 F500 
         000234 0000!
     571              
     571 000236 ED0C                          mov dbl(*sp(#6)), xar6
         000238 EF   
     571              ;                       mov *sp(#3), ar6
     571              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     571 000239 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         00023b E500 
         00023d 0000!
     571              
     571              ;                       POP XT
     571                              ;-- Comment these to save cycles ---
     571 00023f ED10                          mov dbl(*sp(#8)), xar7
         000241 FF   
     571 000242 AF0E                          mov *sp(#7), ar7
     571              ;                       mov *sp(#5), ar7
     571              ;                       mov dbl(*sp(#0)), hi(ar7)
     571              ;                       mov (*sp(#0)), lo(ar7)
     571 000244 ED14                          mov dbl(*sp(#10)), xar6
         000246 EF   
     571 000247 AE12                          mov *sp(#9), ar6
     571 000249 ED18                          mov dbl(*sp(#12)), xar5
         00024b DF   
     571 00024c AD16                          mov *sp(#11), ar5
     571              ;; pvPararmeters currently here - needs to be verified --- jcw
     571 00024e ED1C                          mov dbl(*sp(#14)), xar4
         000250 CF   
     571 000251 AC1A                          mov *sp(#13), ar4
     571 000253 ED20                          mov dbl(*sp(#16)), xar3
         000255 BF   
     571 000256 AB1E                          mov *sp(#15), ar3
     571 000258 ED24                          mov dbl(*sp(#18)), xar2
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   25

         00025a AF   
     571 00025b AA22                          mov *sp(#17), ar2
     571 00025d ED28                          mov dbl(*sp(#20)), xar1
         00025f 9F   
     571 000260 A926                          mov *sp(#19), ar1
     571 000262 ED2C                          mov dbl(*sp(#22)), xar0
         000264 8F   
     571 000265 A82A                          mov *sp(#21), ar0
     571              
     571 000267 A72E                          mov *sp(#23), t3
     571 000269 A630                          mov *sp(#24), t2
     571 00026b A532                          mov *sp(#25), t1
     571 00026d A434                          mov *sp(#26), t0
     571              
     571              ;                       mov dbl(*sp(#21)), *xssp(#0)
     571              ;                       mov *sp(#21), *ssp
     571              ;                       mov *sp(#21), RETA
     571              ; need to move 23-16 to XSSP contents
     571              ;                       mov xar0, dbl (*(#_save_xar7))
     571              ;                       mov ssp, ar0
     571              ;                       mov #0, ssp 
     571              ;                       mov xssp, xar0
     571              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     571              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     571                      ;               add #1, xssp            ; 32-bit return address pointer
     571                      ;               amar *xssp+
     571              ;                       mov sp, t0
     571              ;                       add #1, t0
     571              ;                       mov t0, ssp
     571              ;                       incr ssp
     571              ;                       asub #20, ar0
     571              ;                       mov xar0, xssp
     571              ;                       mov ar0, ssp
     571              ;                       mov ar0, 
     571              ;;                      mov *sp(#1), t0
     571              ;;                      mov *sp(#3), t3         ; ST0
     571              ;;                      mov *sp(#4), t2         ; DBSTAT
     571              ;;                      mov t3, *ar0(#2)
     571                      ;;              mov t2, *ar0(#1)
     571              ;;                      mov t0, *ar0(#0)
     571              
     571              ;;                      mov *sp(#5), t0
     571              ;;                      mov *sp(#6), t1
     571              ;;                      mov *sp(#7), t2
     571                      ;;              mov *sp(#8), t3
     571              
     571              
     571              
     571              ; restore ar0
     571              ;                       mov dbl(*sp(#-2)), xar0
     571              ;                       mov #-1, ar0
     571              ;;                      mov dbl (*(#_save_xar7)), xar0
     571              ;;
     571              ;;                      mov sp, t0
     571              ;;                      add #1, t0
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   26

     571              ;;                      mov t0, ssp
     571              
     571              ;                       mov *sp(#3), *(#00004ch+#1)
     571              
     571              ;                       mov t3, *ssp(#1) 
     571              ;                       mov t2, *ssp(#2)
     571              
     571              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     571              ;;                      mov t3, *(ssp(#0))
     571              ;                       mov t3, *ssp
     571              ;                       mov *sp(#3), t3 ; 
     571              ;                       mov t3, *ssp(#1)
     571              ;;                      mov *sp(#21), PC        
     571              
     571              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     571              ;                       mov dbl(xsp), dbl(lcrpc)
     571              ;                       popboth XAR7
     571              ;                       add #1, sp
     571              ;                       add #1, ssp
     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571              ;                       popboth XAR6
     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571              ;                       popboth XAR5
     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571                              ;-----------------------------------
     571              ;                       popboth XAR4
     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571              ;                       popboth XAR3
     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571              ;                       popboth XAR2
     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571              ;                       popboth XAR1
     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571              ;                       popboth XAR0
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   27

     571              ;                       add #2, t0
     571              ;                       add #2, t1
     571              ;                       mov t0, sp
     571              ;                       mov t1, ssp
     571              ;                       EDIS
     571              ;                       NASP    ; Un-align stack pointer
     571              ;;                      pop mmap(ST3_55)
     571              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     571              ;            BCC $2,TC1 ; |216|
     571 00026f ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000271 4F00 
         000273 0000!
     571 000275 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000277 5F00 
         000279 0000!
     571              ;                       B $3
     571              ;$2
     571              ;            MOV #0, *(#_first_flag) ; |217|
     571              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     571              ;                       mov dbl (*(#_first_save_xssp)), xssp
     571              ;$3
     571              ;                       aadd #-3, sp
     571 00027b 46B2                          bclr INTM               ; enable interrupts
     571              ;                       aadd #1, sp
     571 00027d 4805                          RETI
     571              ;                       mov #1860h, ssp
     571 00027f 20                            nop
     571 000280 20                            nop
     571              ;                       nop
     572                                              
     573              ; /*-----------------------------------------------------------*/
     574              
     575              
     576              ;/*
     577              ; * Manual context switch called by the portYIELD() macro.
     578              ; */
     579              
     580              ; We are using the slow return model:
     581              
     582              ; System Stack (SSP)                    Data Stack (SP)
     583              ; SSP = x - 3:  (Loop Bits):PC(23-16)   SP = y - 3: PC(15-0)  <<= Last pushed - first to POP
     584              ; SSP = x - 2:  DBSTAT                  SP = y - 2: ST1_55
     585              ; SSP = x - 1:  ST0_55                  SP = y - 1: ST2_55
     586              ; SSP = x:      Previously saved data   SP = y:     Previously saved data
     587              
     588              
     589 000281       _vPortYield:
     590              
     591 000281 4EFF                  aadd #-1, sp
     592 000283 F402                  AND #0x0010, mmap(@IFR0)
         000285 0010 
         000287 98   
     593              ;                /* Mimic an interrupt by pushing the SR. */
     594              
     595              ;               /* SR is 16-bits in 430X architecture */
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   28

     596              
     597              ;;                pushx.w    SR
     598              
     599              ;                /* Now the SR is stacked we can disable interrupts. */
     600              
     601              ;                dint
     602              
     603 000288 46B3                    bset INTM             ; disable interrupts
     604              
     605              ;;                bicx.w #0xF000,0(r1)
     606              ;;                swpbx.w +4(r1)
     607              ;;                rlax.w +4(r1)
     608              ;;                rlax.w +4(r1)
     609              ;;                rlax.w +4(r1)
     610              ;;                rlax.w +4(r1)
     611              ;;                addx.w +4(r1),0(r1)
     612              ;;                movx.w +2(r1),+4(r1)
     613              ;;                movx.w 0(r1),+2(r1)
     614              ;;                incdx.a r1
     615              
     616              ;                /* Save the context of the current task. */
     617              ;;        psh mmap(ST3_55)
     618 ****** MACRO         portSAVE_CONTEXT
     618              ;                       ;CONTEXT_SAVE
     618              ;                       ASP  ; Align Stack Pointer
     618              ;                       CLRC       OVM,PAGE0
     618              ;                       CLRC       AMODE
     618              ;                       EALLOW
     618              
     618              ;                       bclr C54CM      ; temp - until we figure out what is setting this
     618              
     618 00028a 46B3                          bset INTM               ; disable interrupts
     618              
     618              ;;;;;                   mov xsp,  dbl (*(#_save_xsp))                   ; save xsp
     618              ;;;;;                   mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     618                                      
     618              ;                       pshboth xar7
     618              ;                       pshboth xar6
     618              ;                       pshboth xar5
     618              
     618 00028c EB31                          mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
         00028e F500 
         000290 0000!
     618              
     618 000292 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000294 FF00 
         000296 0000!
     618              ; does this *always* work?
     618 000298 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00029a 4F   
     618 00029b EDED                          mov dbl (*ar7(#2)), xssp                        
         00029d 5F00 
         00029f 02   
     618              ;; what about xssp here?
     618              ;;                              mov xsp, dbl (*(#_save_xsp))                    ; save xsp
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   29

     618              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     618              
     618 0002a0 ED31                          mov dbl (*(#_save_xar7)), xar7                  ; restore xar7
         0002a2 FF00 
         0002a4 0000!
     618              
     618 0002a6 EB10                          mov xar7, dbl(*sp(#8))                          ; save xar7
         0002a8 F5   
     618 0002a9 CF0E                          mov ar7, *sp(#7)
     618              
     618 0002ab EB14                          mov xar6, dbl(*sp(#10))
         0002ad E5   
     618 0002ae CE12                          mov ar6, *sp(#9)
     618              
     618 0002b0 EB18                          mov xar5, dbl(*sp(#12))
         0002b2 D5   
     618 0002b3 CD16                          mov ar5, *sp(#11)
     618              
     618 0002b5 EB1C                          mov xar4, dbl(*sp(#14))
         0002b7 C5   
     618 0002b8 CC1A                          mov ar4, *sp(#13)
     618              
     618 0002ba EB20                          mov xar3, dbl(*sp(#16))
         0002bc B5   
     618 0002bd CB1E                          mov ar3, *sp(#15)
     618              
     618 0002bf EB24                          mov xar2, dbl(*sp(#18))
         0002c1 A5   
     618 0002c2 CA22                          mov ar2, *sp(#17)
     618              
     618 0002c4 EB28                          mov xar1, dbl(*sp(#20))
         0002c6 95   
     618 0002c7 C926                          mov ar1, *sp(#19)
     618              
     618 0002c9 EB2C                          mov xar0, dbl(*sp(#22))
         0002cb 85   
     618 0002cc C82A                          mov ar0, *sp(#21)
     618              
     618 0002ce C72E                          mov t3, *sp(#23)
     618 0002d0 C630                          mov t2, *sp(#24)
     618 0002d2 C532                          mov t1, *sp(#25)
     618 0002d4 C434                          mov t0, *sp(#26)
     618              
     618              ;;                      mov mmap(ST0_55), t0
     618              ; - this is ok - we are not pushing - it's a relative stack frame
     618              ;                       mov t0, *sp(#25)
     618              ;;                      mov t0, *sp(#23)
     618              ;;                      mov mmap(ST1_55), t1
     618              ;                       mov t1, *sp(#26)                ; stomping on own mem
     618              ;;                      mov t1, *sp(#21)                ; stomping on own mem
     618              ;;                      mov mmap(ST2_55), t2
     618              ;;                      mov t2, *sp(#22)
     618              ;                       mov t2, *sp(#27)
     618              ;;                      mov mmap(ST2_55), t3
     618              ;                       mov t3, *sp(#28)
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   30

     618              ;;                      mov t3, *sp(#24)
     618              
     618              ;                       PSH dbl(AR0) ; 32-bit
     618              ;                       PSH dbl(AR1) 
     618              ;                       PSH dbl(AR2) ; 32-bit
     618              ;                       PUSH XAR3 ; 32-bit
     618              ;                       PUSH XAR4 ; 32-bit
     618                              ;-- Comment these to save cycles --------
     618              ;                       PUSH XAR5 ; 32-bit
     618              ;                       PUSH XAR6 ; 32-bit
     618              ;                       PUSH XAR7 ; 32-bit
     618                              ;----------------------------------------
     618              
     618              ;                       PUSH XT   ; 32-bit
     618              
     618              ;                       movl xar6, @_portFLAGS_INT_ENABLED
     618              ;                       push xar6 ; portFLAGS_INT_ENABLED
     618              
     618 0002d6 ED31                          mov dbl (*(#_portFLAGS_INT_ENABLED)), xar6
         0002d8 EF00 
         0002da 0000!
     618 0002dc EB0C                          mov xar6, dbl(*sp(#6))
         0002de E5   
     618                                      
     618              
     618              ;                       movl xar7, @_usCriticalNesting
     618              ;                       push xar7
     618 0002df ED31                          mov dbl (*(#_usCriticalNesting)), xar7
         0002e1 FF00 
         0002e3 0000!
     618 0002e5 EB08                          mov xar7, dbl(*sp(#4))
         0002e7 F5   
     618              
     618 0002e8 AF06                          mov mmap(ST1_55), ar7
         0002ea 98   
     618 0002eb CF02                          mov ar7, *sp(#1)
     618 0002ed AF96                          mov  mmap(ST2_55), ar7
         0002ef 98   
     618 0002f0 CF04                          mov ar7, *sp(#2)
     618              
     618 0002f2 449F                          mov ssp, ar7
     618 0002f4 AE04                          mov mmap(ST0_55), ar6
         0002f6 98   
     618 0002f7 CEED                          mov ar6, *ar7(#1)
         0002f9 0001 
     618 0002fb AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         0002fd 98   
     618 0002fe CEED                          mov ar6, *ar7(#2)
         000300 0002 
     618              ;                       mov ar7, mmap(ST0_55)
     618              ;                       mov *ssp(#2), ar7
     618              
     618              ; fix up
     618              ;                       aadd #20, sp
     618              ;                       mov sp, t0
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   31

     618              ;                       sub #1, t0
     618              ;                       mov t0, ssp
     618              
     618                                      ; move contents of SP into address of current TCB
     618              ;                       mov xsp, dbl (*(#_pxCurrentTCB))                ; xsp contains our TCB now
     618              
     618              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     618              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     618              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     618              ;                       mov dbl (*ar7), xsp                             ; xsp contains our TCB now
     618              ;                       mov dbl (*ar7+), xssp
     618              
     618              ;                       mov sp, t0              ; we've already saved t0
     618              ;                       add #1, t0
     618              ;                       mov t0, ssp
     618              ; ??
     618              ;                       mov xsp, dbl (*(#_pxCurrentTCB))
     618              
     618              ;                       movl xar6, @_pxCurrentTCB ; XAR6 contains current TCB addr
     618              ;                       mov al, @sp
     618              ;                       movl  *xar6, acc        
     618              ;;                      mov  ar0, @sp
     618              ;;                      mov  @ar6, alxd
     618              ;;                      mov  ar0, @sp
     618              ;;                      movl 0(xar6), sp
     618              ;                       EDIS
     618              ;                       NASP
     618              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     618              ;                       NOP
     618 000302 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000304 4F00 
         000306 0000!
     618 000308 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         00030a 5F00 
         00030c 0000!
     618 00030e 20                            nop
     618 00030f 20                            nop
     618 000310 20                            nop
     619              
     620              ;        /* Switch to the highest priority task that is ready to run. */
     621 000311 6C00          call    #_vTaskSwitchContext
         000313 0000!
     622 000315 E651          mov #1, *port(#6166) ; |127|
         000317 0118 
         000319 16   
     623 00031a F551                  or #0x0001, *port(#7188) ; |130|
         00031c 0001 
         00031e 1C14 
     624 000320 4E01                  aadd #1, sp
     625 ****** MACRO         portRESTORE_CONTEXT
     625              ;                       .C54CM_on
     625              ;                       .CPL_on
     625              ;                       .ARMS_off
     625                                      .align 4
     625              
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   32

     625              ; Restore context & return
     625                                      ;CONTEXT_RESTORE
     625              ;                       ASP
     625              ;                       EALLOW
     625              ;                       nop
     625              ;                       nop
     625              ;                       nop
     625              ;                       nop
     625 000324 4652                          bclr C54CM    
     625              ;               xssp = dbl(*(#_pxCurrentTCB))
     625              ;               xsp  = dbl(*(#_pxCurrentTCB))
     625 000326 EB31                          mov xar7, dbl (*(#_save_xar7))  
         000328 F500 
         00032a 0000!
     625              
     625 00032c 4EFD                          aadd #-3, sp
     625              ;            aadd #-3, xsp
     625              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     625              ;            BCC $1,TC1 ; |216|
     625 00032e ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         000330 4F00 
         000332 0000!
     625 000334 ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         000336 5F00 
         000338 0000!
     625              ;            B $4
     625              ;;;;;;                  mov xsp, dbl (*(#_save_xsp))                    ; save xsp
     625              ;;;;;;                  mov xssp, dbl (*(#_save_xssp))                  ; save xssp
     625              
     625              ;                       aadd #-3, sp
     625              ;$1
     625              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     625              ;                       mov dbl (*(#_first_save_xssp)), xssp                    ; restore xssp
     625              ;$4
     625 00033a 904F                          mov xsp, xar7
     625 00033c 905E                          mov xssp, xar6
     625              
     625 00033e ED31                          mov dbl (*(#_pxCurrentTCB)), xar5                       
         000340 DF00 
         000342 0000!
     625              
     625 000344 EDA1                          mov dbl (*ar5), xar4                            ; xsp contains our TCB now
         000346 CF   
     625 000347 EDAD                          mov dbl (*ar5(#2)), xar3                        
         000349 BF00 
         00034b 02   
     625                                      
     625 00034c AA81                          mov *ar4, ar2
     625 00034e A961                          mov *ar3, ar1
     625              ;                       mov ar4, *ar6                           ; stack pointers fixed up
     625 000350 CAE1                          mov ar2, *ar7
     625 000352 C9C1                          mov ar1, *ar6
     625                                      
     625              
     625              
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   33

     625              
     625              ;                       mov #0, ssp     
     625              ;                       mov xar7, dbl (*(#_save_xar7))                  ; save xar7 
     625              ;                       mov dbl (*(#_pxCurrentTCB)), xar7
     625                                      ; 32-bit mode - will act on SP and SSP:
     625              ;                       'fix-up' current SP and SSP - is this dangerous????
     625              ;                       aadd #-3, sp
     625              ;;                      mov *ar7, *sp
     625              ;                       mov dbl (*ar7), ar6
     625              ;                       mov ar6, *sp                            ; xsp contains our TCB now
     625              ;                       mov *ar7(#2), *ssp                      
     625              ;                       POP mmap(ST3_55)
     625              ;                       pshboth xar7                            ; should increment both
     625 000354 AF06                          mov mmap(ST1_55), ar7
         000356 98   
     625 000357 7DF7                          and #0xf7ff, ar7                        ; <here>#0800h
         000359 FFFF 
     625 00035b CF02                          mov ar7, *sp(#1)                        ; need to make sure IRQ bit is enabled here
     625 00035d AF96                          mov mmap(ST2_55), ar7
         00035f 98   
     625 000360 CF04                          mov ar7, *sp(#2)
     625              
     625 000362 449F                          mov ssp, ar7
     625 000364 AE04                          mov mmap(ST0_55), ar6
         000366 98   
     625 000367 CEED                          mov ar6, *ar7(#1)
         000369 0001 
     625 00036b AE04                          mov mmap(ST0_55), ar6   ; needs to be DBSTAT
         00036d 98   
     625 00036e CEED                          mov ar6, *ar7(#2)
         000370 0002 
     625              
     625 000372 ED31                          mov dbl (*(#_pxCurrentTCB)), xar7
         000374 FF00 
         000376 0000!
     625              
     625 000378 EDE1                          mov dbl (*ar7), xsp                             ; xsp contains our TCB now
         00037a 4F   
     625 00037b EDED                          mov dbl (*ar7(#2)), xssp                        
         00037d 5F00 
         00037f 02   
     625              ;;                mov xsp, dbl (*(#_save_xsp))                  ; save xsp
     625              ;;                          mov xssp, dbl (*(#_save_xssp))                      ; save xssp
     625              
     625              ;                       mov mmap(ST0_55), *ssp(#1)
     625              ;                       mov mmap(STO_55), *ssp(#2)
     625              ;                       mov mmap(ST1_55), *sp(#1)
     625              ;                       mov mmap(ST2_55), *sp(#2)               ; needs to be DBSTAT                    
     625              ;                       mov *ar7, t0
     625              ;                       mov t0, *sp(#0)                         ; xsp contains our TCB now
     625              ;                       mov *ar7(#2), t0
     625              ;                       mov t0, *ssp(#0)                        
     625              
     625              ;                       mov  (*ar7), sp                                 ; xsp contains our TCB now
     625              ; what about xssp?
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   34

     625              ;                       mov xar6, xsp
     625              ;                       mov xssp, xar7
     625              ;                       add #1, ar7
     625              ;                       mov xar7, xsp
     625              ;                       mov sp, t0
     625              ;                       mov ssp, t1
     625              ;                       mov dbl(*(#_pxCurrentTCB)), xsp
     625              ;                       ar0 = *ar6
     625              ;                       xssp = xar0
     625              ;                       mov *xar6, xar0
     625              ;                       mov xar0, xssp  ; stack now points to our TCB
     625              ;;                      mov sp, *ar6
     625              ;;                      mov sp, ar0
     625              ;;                      mov sp, *_pxCurrentTCB
     625              ;;                      clr ar0
     625              ;;                      mov ar0, @xar6
     625              ;;                      mov sp, AR0
     625              ;;                      add sp, xar6
     625              
     625              ;;                      pshboth xar7
     625              ;;                      pshboth xar6
     625              ;;                      pshboth xar5
     625              
     625              ;;                      popboth xar5
     625              ;;                      popboth xar6
     625              ;;                      popboth xar7
     625              
     625              ;;;                     mov *sp(#1), ar7 
     625              ;                       mov dbl(*sp(#1)), ar7
     625              ;;;                     mov  ar7, mmap(ST1_55)
     625 000380 AF04                          mov *sp(#2), ar7
     625 000382 CF96                          mov ar7, mmap(ST2_55)
         000384 98   
     625 000385 449F                          mov ssp, ar7
     625 000387 AEED                          mov *ar7(#1), ar6
         000389 0001 
     625 00038b CE04                          mov ar6, mmap(ST0_55)
         00038d 98   
     625 00038e AEED                          mov *ar7(#2), ar6
         000390 0002 
     625 000392 CF04                          mov ar7, mmap(ST0_55)
         000394 98   
     625              ;                       mov *ssp(#2), ar7
     625              ;                       mov ar6, mmap(ST0_55)   ; needs to be DBSTAT
     625              
     625 000395 ED08                          mov dbl(*sp(#4)), xar7
         000397 FF   
     625              ;                       mov *sp(#1), ar7
     625 000398 EB31                          mov xar7, dbl(*(#_usCriticalNesting))   
         00039a F500 
         00039c 0000!
     625              
     625 00039e ED0C                          mov dbl(*sp(#6)), xar6
         0003a0 EF   
     625              ;                       mov *sp(#3), ar6
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   35

     625              ;                       popboth xar6 ; portFLAGS_INT_ENABLED
     625 0003a1 EB31                          mov xar6, dbl(*(#_portFLAGS_INT_ENABLED))       
         0003a3 E500 
         0003a5 0000!
     625              
     625              ;                       POP XT
     625                              ;-- Comment these to save cycles ---
     625 0003a7 ED10                          mov dbl(*sp(#8)), xar7
         0003a9 FF   
     625 0003aa AF0E                          mov *sp(#7), ar7
     625              ;                       mov *sp(#5), ar7
     625              ;                       mov dbl(*sp(#0)), hi(ar7)
     625              ;                       mov (*sp(#0)), lo(ar7)
     625 0003ac ED14                          mov dbl(*sp(#10)), xar6
         0003ae EF   
     625 0003af AE12                          mov *sp(#9), ar6
     625 0003b1 ED18                          mov dbl(*sp(#12)), xar5
         0003b3 DF   
     625 0003b4 AD16                          mov *sp(#11), ar5
     625              ;; pvPararmeters currently here - needs to be verified --- jcw
     625 0003b6 ED1C                          mov dbl(*sp(#14)), xar4
         0003b8 CF   
     625 0003b9 AC1A                          mov *sp(#13), ar4
     625 0003bb ED20                          mov dbl(*sp(#16)), xar3
         0003bd BF   
     625 0003be AB1E                          mov *sp(#15), ar3
     625 0003c0 ED24                          mov dbl(*sp(#18)), xar2
         0003c2 AF   
     625 0003c3 AA22                          mov *sp(#17), ar2
     625 0003c5 ED28                          mov dbl(*sp(#20)), xar1
         0003c7 9F   
     625 0003c8 A926                          mov *sp(#19), ar1
     625 0003ca ED2C                          mov dbl(*sp(#22)), xar0
         0003cc 8F   
     625 0003cd A82A                          mov *sp(#21), ar0
     625              
     625 0003cf A72E                          mov *sp(#23), t3
     625 0003d1 A630                          mov *sp(#24), t2
     625 0003d3 A532                          mov *sp(#25), t1
     625 0003d5 A434                          mov *sp(#26), t0
     625              
     625              ;                       mov dbl(*sp(#21)), *xssp(#0)
     625              ;                       mov *sp(#21), *ssp
     625              ;                       mov *sp(#21), RETA
     625              ; need to move 23-16 to XSSP contents
     625              ;                       mov xar0, dbl (*(#_save_xar7))
     625              ;                       mov ssp, ar0
     625              ;                       mov #0, ssp 
     625              ;                       mov xssp, xar0
     625              ;                       mov dbl (*(#_save_xsp)), xar0                   ; save xsp
     625              ;                       aadd #20, sp            ; this is ok - ssp also incremented
     625                      ;               add #1, xssp            ; 32-bit return address pointer
     625                      ;               amar *xssp+
     625              ;                       mov sp, t0
     625              ;                       add #1, t0
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   36

     625              ;                       mov t0, ssp
     625              ;                       incr ssp
     625              ;                       asub #20, ar0
     625              ;                       mov xar0, xssp
     625              ;                       mov ar0, ssp
     625              ;                       mov ar0, 
     625              ;;                      mov *sp(#1), t0
     625              ;;                      mov *sp(#3), t3         ; ST0
     625              ;;                      mov *sp(#4), t2         ; DBSTAT
     625              ;;                      mov t3, *ar0(#2)
     625                      ;;              mov t2, *ar0(#1)
     625              ;;                      mov t0, *ar0(#0)
     625              
     625              ;;                      mov *sp(#5), t0
     625              ;;                      mov *sp(#6), t1
     625              ;;                      mov *sp(#7), t2
     625                      ;;              mov *sp(#8), t3
     625              
     625              
     625              
     625              ; restore ar0
     625              ;                       mov dbl(*sp(#-2)), xar0
     625              ;                       mov #-1, ar0
     625              ;;                      mov dbl (*(#_save_xar7)), xar0
     625              ;;
     625              ;;                      mov sp, t0
     625              ;;                      add #1, t0
     625              ;;                      mov t0, ssp
     625              
     625              ;                       mov *sp(#3), *(#00004ch+#1)
     625              
     625              ;                       mov t3, *ssp(#1) 
     625              ;                       mov t2, *ssp(#2)
     625              
     625              ;;                      mov *sp(#1), dbl(*(#_save_xsp)) 
     625              ;;                      mov t3, *(ssp(#0))
     625              ;                       mov t3, *ssp
     625              ;                       mov *sp(#3), t3 ; 
     625              ;                       mov t3, *ssp(#1)
     625              ;;                      mov *sp(#21), PC        
     625              
     625              ;; ;;                   mov dbl (*(#_save_xsp)), xsp    ; restore xsp           
     625              ;                       mov dbl(xsp), dbl(lcrpc)
     625              ;                       popboth XAR7
     625              ;                       add #1, sp
     625              ;                       add #1, ssp
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
     625              ;                       popboth XAR6
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   37

     625              ;                       popboth XAR5
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
     625                              ;-----------------------------------
     625              ;                       popboth XAR4
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
     625              ;                       popboth XAR3
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
     625              ;                       popboth XAR2
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
     625              ;                       popboth XAR1
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
     625              ;                       popboth XAR0
     625              ;                       add #2, t0
     625              ;                       add #2, t1
     625              ;                       mov t0, sp
     625              ;                       mov t1, ssp
     625              ;                       EDIS
     625              ;                       NASP    ; Un-align stack pointer
     625              ;;                      pop mmap(ST3_55)
     625              ;            CMP *(#_first_flag) == #1, TC1 ; |216|
     625              ;            BCC $2,TC1 ; |216|
     625 0003d7 ED31                          mov dbl (*(#_save_xsp)), xsp                    ; restore xsp
         0003d9 4F00 
         0003db 0000!
     625 0003dd ED31                          mov dbl (*(#_save_xssp)), xssp                  ; restore xssp
         0003df 5F00 
         0003e1 0000!
     625              ;                       B $3
     625              ;$2
     625              ;            MOV #0, *(#_first_flag) ; |217|
     625              ;                       mov dbl (*(#_first_save_xsp)), xsp                      ; restore xsp
     625              ;                       mov dbl (*(#_first_save_xssp)), xssp
     625              ;$3
     625              ;                       aadd #-3, sp
     625 0003e3 46B2                          bclr INTM               ; enable interrupts
     625              ;                       aadd #1, sp
     625 0003e5 4805                          RETI
     625              ;                       mov #1860h, ssp
     625 0003e7 20                            nop
     625 0003e8 20                            nop
TMS320C55x Assembler PC v4.4.1 Sat Sep 15 04:47:21 2018

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
..\FreeRTOS\Source\portable\CCS\c55x\portASM.asm                     PAGE   38

     625              ;                       nop
     626              
     627              ;;;
     628              
     629              ;                /* Place the tick ISR in the correct vector. */
     630              
     631              ;;;                .sect ".int49"                       ; TIMER1_A0_VECTOR                      
     632              ;;                .sect ".int14"                        ; CPUTIMER2
     633              ;                 .sect ".text"                 ; CPUTIMER2
     634              ;;;;             .sect ".INT14_ISR"
     635              ;               .global _INT14_ISR
     636              ;;;; _INT14_ISR:
     637              ;;;;                .short   _vTickISR
     638              ;;;;            LCR #_vTickISR
     639                              .end

No Assembly Errors, No Assembly Warnings
