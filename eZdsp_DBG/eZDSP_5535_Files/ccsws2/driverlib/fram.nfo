MSP430 C/C++ Optimizer                  v3.3.1
Build Number 1KGCQ-KDADEMDK-RTARQ-TAV-ZACIF_T_T_R

		======File-level Analysis Summary======


extern void FRAM_configureWaitStateControl() is called from 0 sites in this file.
    It appears to be inlineable (size = 15 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void FRAM_disableInterrupt() is called from 0 sites in this file.
    It appears to be inlineable (size = 18 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void FRAM_enableInterrupt() is called from 0 sites in this file.
    It appears to be inlineable (size = 21 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern unsigned char FRAM_getInterruptStatus() is called from 0 sites in this file.
    It appears to be inlineable (size = 10 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern unsigned FRAM_isBusy() is called from 0 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void FRAM_memoryFill32() is called from 0 sites in this file.
    It appears to be inlineable (size = 27 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void FRAM_write16() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void FRAM_write32() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void FRAM_write8() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>



		======= End file-level Analysis =======


==============================================================================

extern void FRAM_write8() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

ADVICE: In function FRAM_write8() in fram.c
	in the 'while' loop with loop variable 'numberOfBytes' at lines 36-44
	for the statement *framPtr = *dataPtr; at line 42

	Consider declaring 'dataPtr' as unsigned char * restrict dataPtr
	or declaring 'framPtr' as  unsigned char * restrict framPtr
	to assert that 'dataPtr' in the address of *dataPtr;
	and            'framPtr' in the address of *framPtr;
	do not access the same object in memory.

==============================================================================

extern void FRAM_write32() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

ADVICE: In function FRAM_write32() in fram.c
	in the 'while' loop with loop variable 'count' at lines 96-104
	for the statement *framPtr = *dataPtr; at line 102

	Consider declaring 'dataPtr' as unsigned long * restrict dataPtr
	or declaring 'framPtr' as  unsigned long * restrict framPtr
	to assert that 'dataPtr' in the address of *dataPtr;
	and            'framPtr' in the address of *framPtr;
	do not access the same object in memory.

==============================================================================

extern void FRAM_write16() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

ADVICE: In function FRAM_write16() in fram.c
	in the 'while' loop with loop variable 'numberOfWords' at lines 66-74
	for the statement *framPtr = *dataPtr; at line 72

	Consider declaring 'dataPtr' as unsigned * restrict dataPtr
	or declaring 'framPtr' as  unsigned * restrict framPtr
	to assert that 'dataPtr' in the address of *dataPtr;
	and            'framPtr' in the address of *framPtr;
	do not access the same object in memory.

==============================================================================

extern void FRAM_memoryFill32() is called from 0 sites in this file.
    It appears to be inlineable (size = 27 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern unsigned FRAM_isBusy() is called from 0 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern unsigned char FRAM_getInterruptStatus() is called from 0 sites in this file.
    It appears to be inlineable (size = 10 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern void FRAM_enableInterrupt() is called from 0 sites in this file.
    It appears to be inlineable (size = 21 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern void FRAM_disableInterrupt() is called from 0 sites in this file.
    It appears to be inlineable (size = 18 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern void FRAM_configureWaitStateControl() is called from 0 sites in this file.
    It appears to be inlineable (size = 15 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>
<<NULL MIX DOMAIN>>

== END OF INFO OUTPUT==
